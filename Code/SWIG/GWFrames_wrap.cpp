/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
  return wrapper(a, NULL);			\
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)	\
SWIGINTERN void					\
wrapper##_closure(PyObject *a) {		\
    SwigPyObject *sobj;				\
    sobj = (SwigPyObject *)a;			\
    if (sobj->own) {				\
	PyObject *o = wrapper(a, NULL);		\
	Py_XDECREF(o);				\
    }						\
    if (PyType_IS_GC(a->ob_type)) {		\
	PyObject_GC_Del(a);			\
    } else {					\
	PyObject_Del(a);			\
    }						\
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)				\
SWIGINTERN int							\
wrapper##_closure(PyObject *a) {				\
    PyObject *pyresult;						\
    int result;							\
    pyresult = wrapper(a, NULL);				\
    result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;	\
    Py_XDECREF(pyresult);					\
    return result;						\
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a, PyObject *b) {	\
    PyObject *tuple, *result;			\
    tuple = PyTuple_New(1);			\
    assert(tuple);				\
    PyTuple_SET_ITEM(tuple, 0, b);		\
    Py_XINCREF(b);				\
    result = wrapper(a, tuple);			\
    Py_DECREF(tuple);				\
    return result;				\
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(b);						\
    Py_XINCREF(c);						\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *callable_object, PyObject *args, PyObject *) {	\
    return wrapper(callable_object, args);			\
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_closure(PyObject *a) {			\
    PyObject *resultobj;				\
    Py_ssize_t result;					\
    resultobj = wrapper(a, NULL);			\
    result = PyNumber_AsSsize_t(resultobj, NULL);	\
    Py_DECREF(resultobj);				\
    return result;					\
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *						\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
    PyObject *tuple, *result;					\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));		\
    result = wrapper(a, tuple);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) { \
    PyObject *tuple, *resultobj;					\
    int result;								\
    tuple = PyTuple_New(d ? 3 : 2);					\
    assert(tuple);							\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));			\
    PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));			\
    if (d) {								\
        PyTuple_SET_ITEM(tuple, 2, d);					\
        Py_INCREF(d);							\
    }									\
    resultobj = wrapper(a, tuple);					\
    result = resultobj ? 0 : -1;					\
    Py_DECREF(tuple);							\
    Py_XDECREF(resultobj);						\
    return result;							\
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *tuple, *result;				\
    tuple = PyTuple_New(1);				\
    assert(tuple);					\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));	\
    result = wrapper(a, tuple);				\
    Py_DECREF(tuple);					\
    return result;					\
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_closure(PyObject *a, Py_ssize_t b) {		\
    PyObject *arg, *result;				\
    arg = _PyLong_FromSsize_t(b);			\
    result = wrapper(a, arg);				\
    Py_DECREF(arg);					\
    return result;					\
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(2);					\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));		\
    PyTuple_SET_ITEM(tuple, 1, c);				\
    Py_XINCREF(c);						\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_closure(PyObject *a, PyObject *b, PyObject *c) {	\
    PyObject *tuple, *resultobj;				\
    int result;							\
    tuple = PyTuple_New(c ? 2 : 1);				\
    assert(tuple);						\
    PyTuple_SET_ITEM(tuple, 0, b);				\
    Py_XINCREF(b);						\
    if (c) {							\
        PyTuple_SET_ITEM(tuple, 1, c);				\
        Py_XINCREF(c);						\
    }								\
    resultobj = wrapper(a, tuple);				\
    result = resultobj ? 0 : -1;				\
    Py_XDECREF(resultobj);					\
    Py_DECREF(tuple);						\
    return result;						\
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    return wrapper(a, NULL);			\
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)	\
SWIGINTERN long					\
wrapper##_closure(PyObject *a) {		\
    PyObject *pyresult;				\
    long result;				\
    pyresult = wrapper(a, NULL);		\
    if (!pyresult || !PyLong_Check(pyresult))	\
	return -1;				\
    result = PyLong_AsLong(pyresult);		\
    Py_DECREF(pyresult);			\
    return result;				\
}

#define SWIGPY_ITERNEXT_CLOSURE(wrapper)	\
SWIGINTERN PyObject *				\
wrapper##_closure(PyObject *a) {		\
    PyObject *result;				\
    result = wrapper(a, NULL);			\
    if (result && result == Py_None) {		\
	Py_DECREF(result);			\
	result = NULL;				\
    }						\
    return result;				\
}

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *pyobj) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)pyobj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", pyobj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, val);
  Py_XINCREF(val);
  result = (*getset->set)(obj, tuple);
  Py_DECREF(tuple);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  _PyObject_GC_UNTRACK(descr);
  Py_XDECREF(PyDescr_TYPE(descr));
  Py_XDECREF(PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyTypeObject *type, PyObject *name, PyObject *value) {
  PyObject *attribute;
  descrsetfunc local_set;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,
#endif
      "swig_static_var_getset_descriptor",
      sizeof(PyGetSetDescrObject),
      0,
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
      0,                                        /* tp_print */
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
#if PY_VERSION_HEX >= 0x02030000
      0,                                        /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                        /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                                   /* tp_alloc -> tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    staticvar_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
#endif
  }
  return &staticvar_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  Py_XINCREF(type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    Py_DECREF(descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN void
SwigPyBuiltin_InitBases (PyTypeObject *type, PyTypeObject **bases) {
  int base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  int i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  type->tp_base = bases[0];
  Py_INCREF((PyObject *)bases[0]);
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
    Py_INCREF((PyObject *)bases[i]);
  }
  type->tp_bases = tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x03000000
    type->ob_base.ob_base.ob_type = metatype;
#else
    type->ob_type = metatype;
#endif
}

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GWFrames__DataGrid swig_types[0]
#define SWIGTYPE_p_GWFrames__Matrix swig_types[1]
#define SWIGTYPE_p_GWFrames__Modes swig_types[2]
#define SWIGTYPE_p_GWFrames__PNWaveform swig_types[3]
#define SWIGTYPE_p_GWFrames__Scri swig_types[4]
#define SWIGTYPE_p_GWFrames__ScriFunctor swig_types[5]
#define SWIGTYPE_p_GWFrames__SliceModes swig_types[6]
#define SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t swig_types[7]
#define SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t swig_types[8]
#define SWIGTYPE_p_GWFrames__SuperMomenta swig_types[9]
#define SWIGTYPE_p_GWFrames__Waveform swig_types[10]
#define SWIGTYPE_p_GWFrames__Waveforms swig_types[11]
#define SWIGTYPE_p_Quaternions__Quaternion swig_types[12]
#define SWIGTYPE_p_SwigPyObject swig_types[13]
#define SWIGTYPE_p_allocator_type swig_types[14]
#define SWIGTYPE_p_char swig_types[15]
#define SWIGTYPE_p_difference_type swig_types[16]
#define SWIGTYPE_p_double swig_types[17]
#define SWIGTYPE_p_p_PyObject swig_types[18]
#define SWIGTYPE_p_size_type swig_types[19]
#define SWIGTYPE_p_std__allocatorT_GWFrames__Matrix_t swig_types[20]
#define SWIGTYPE_p_std__allocatorT_GWFrames__Waveform_t swig_types[21]
#define SWIGTYPE_p_std__complexT_double_t swig_types[22]
#define SWIGTYPE_p_std__invalid_argument swig_types[23]
#define SWIGTYPE_p_std__string swig_types[24]
#define SWIGTYPE_p_std__stringstream swig_types[25]
#define SWIGTYPE_p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[31]
#define SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t swig_types[34]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[35]
#define SWIGTYPE_p_unsigned_int swig_types[36]
#define SWIGTYPE_p_value_type swig_types[37]
static swig_type_info *swig_types[39];
static swig_module_info swig_module = {swig_types, 38, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _GWFrames.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__GWFrames

#else
#  define SWIG_init    init_GWFrames

#endif
#define SWIG_name    "_GWFrames"

#define SWIGVERSION 0x030000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


  #include <iostream>
  #include <string>
  #include <sstream>
  #include <iomanip>
  #include <complex>
  #include "../Utilities.hpp"
  #include "Quaternions.hpp"
  #include "IntegrateAngularVelocity.hpp"
  #include "../Scri.hpp"
  #include "SWSHs.hpp"
  #include "../Waveforms.hpp"
  #include "../PNWaveforms.hpp"


#define SWIG_FILE_WITH_INIT


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


typedef std::complex<double> std_complex_double;
typedef unsigned int unsigned_int;


#define SWIG_AsVal_std_complex_double SWIG_AsVal_std_complex_Sl_double_Sg_
#define SWIG_AsVal_unsigned_int SWIG_AsVal_unsigned_SS_int


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <map>


#include <algorithm>


  const char* const GWFramesErrors[] = {
    "This function is not yet implemented.",
    "Failed system call.",
    "Bad file name.",
    "Failed GSL call.",
    "Unknown exception",
    "Unknown exception",
    "Unknown exception",
    "Unknown exception",
    "Unknown exception",
    "Unknown exception",
    "Bad value.",
    "Bad switches; we should not have gotten here.",
    "Index out of bounds.",
    "Unknown exception",
    "Unknown exception",
    "Vector size mismatch.",
    "Matrix size mismatch.",
    "Matrix size is assumed to be 3x3 in this function.",
    "Not enough points to take a derivative.",
    "Empty intersection requested.",
    "Waveform is missing requested (ell,m) component.",
    "Wrong frame type for this operation.",
    "Bad Waveform information."
  };
  const int GWFramesNumberOfErrors = 23;
  PyObject* const GWFramesExceptions[] = {
    PyExc_NotImplementedError, // Not implemented
    PyExc_SystemError, // Failed system call
    PyExc_IOError, // Bad file name
    PyExc_RuntimeError, // GSL failed
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_ValueError, // Bad value
    PyExc_ValueError, // Bad switches
    PyExc_IndexError, // Index out of bounds
    PyExc_RuntimeError, // [empty]
    PyExc_RuntimeError, // [empty]
    PyExc_AssertionError, // Mismatched vector size
    PyExc_AssertionError, // Mismatched matrix size
    PyExc_AssertionError, // 3x3 matrix assumed
    PyExc_AssertionError, // Not enough points for derivative
    PyExc_AssertionError, // Empty intersection
    PyExc_IndexError, // Waveform missing ell,m
    PyExc_AssertionError, // Bad frame type
    PyExc_ValueError, // Bad Waveform information
  };


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if ( j < 0 ) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      if (ii > jj) {
        typename Sequence::const_reverse_iterator sb = self->rbegin();
        typename Sequence::const_reverse_iterator se = self->rbegin();
        std::advance(sb,size-ii-1);
        std::advance(se,size-jj-1);
        typename Sequence::const_reverse_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<-step && it!=se; ++c)
            it++;
        }
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj < ii)
        jj = ii;
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount; ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      if (jj > ii)
        jj = ii;
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount; ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (jj > ii) {
        typename Sequence::iterator sb = self->begin();
        std::advance(sb,ii);
        if (step == 1) {
          typename Sequence::iterator se = self->begin();
          std::advance(se,jj);
          self->erase(sb,se);
        } else {
          typename Sequence::iterator it = sb;
          size_t delcount = (jj - ii + step - 1) / step;
          while (delcount) {
            it = self->erase(it);
            for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
              it++;
            delcount--;
          }
        }
      }
    } else {
      if (ii > jj) {
        typename Sequence::reverse_iterator sb = self->rbegin();
        std::advance(sb,size-ii-1);
        typename Sequence::reverse_iterator it = sb;
        size_t delcount = (ii - jj - step - 1) / -step;
        while (delcount) {
          it = typename Sequence::reverse_iterator(self->erase((++it).base()));
          for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
            it++;
          delcount--;
        }
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


  namespace swig {
    template <>  struct traits<GWFrames::Matrix > {
      typedef pointer_category category;
      static const char* type_name() { return"GWFrames::Matrix"; }
    };
  }


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<GWFrames::Matrix, std::allocator< GWFrames::Matrix > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "GWFrames::Matrix" "," "std::allocator< GWFrames::Matrix >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_GWFrames_Matrix_Sg__iterator(std::vector< GWFrames::Matrix > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_GWFrames_Matrix_Sg____nonzero__(std::vector< GWFrames::Matrix > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_GWFrames_Matrix_Sg____bool__(std::vector< GWFrames::Matrix > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< GWFrames::Matrix >::size_type std_vector_Sl_GWFrames_Matrix_Sg____len__(std::vector< GWFrames::Matrix > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< GWFrames::Matrix >::value_type std_vector_Sl_GWFrames_Matrix_Sg__pop(std::vector< GWFrames::Matrix > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *std_vector_Sl_GWFrames_Matrix_Sg____getslice__(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::difference_type i,std::vector< GWFrames::Matrix >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____setslice____SWIG_0(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::difference_type i,std::vector< GWFrames::Matrix >::difference_type j,std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &v=std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____delslice__(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::difference_type i,std::vector< GWFrames::Matrix >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____delitem____SWIG_0(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *std_vector_Sl_GWFrames_Matrix_Sg____getitem____SWIG_0(std::vector< GWFrames::Matrix > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type id = i;
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_0(std::vector< GWFrames::Matrix > *self,PySliceObject *slice,std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type id = i;
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_1(std::vector< GWFrames::Matrix > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type id = i;
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____delitem____SWIG_1(std::vector< GWFrames::Matrix > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type id = i;
      std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< GWFrames::Matrix >::value_type const &std_vector_Sl_GWFrames_Matrix_Sg____getitem____SWIG_1(std::vector< GWFrames::Matrix > const *self,std::vector< GWFrames::Matrix >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_2(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::difference_type i,std::vector< GWFrames::Matrix >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg__append(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< GWFrames::Matrix >::iterator std_vector_Sl_GWFrames_Matrix_Sg__erase__SWIG_0(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< GWFrames::Matrix >::iterator std_vector_Sl_GWFrames_Matrix_Sg__erase__SWIG_1(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::iterator first,std::vector< GWFrames::Matrix >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< GWFrames::Matrix >::iterator std_vector_Sl_GWFrames_Matrix_Sg__insert__SWIG_0(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::iterator pos,std::vector< GWFrames::Matrix >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_GWFrames_Matrix_Sg__insert__SWIG_1(std::vector< GWFrames::Matrix > *self,std::vector< GWFrames::Matrix >::iterator pos,std::vector< GWFrames::Matrix >::size_type n,std::vector< GWFrames::Matrix >::value_type const &x){ self->insert(pos, n, x); }

  #define SWIG_From_double   PyFloat_FromDouble 


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
SWIG_From_std_complex_Sl_double_Sg_  (/*@SWIG:/usr/local/Cellar/swig/3.0.0/share/swig/3.0.0/typemaps/swigmacros.swg,104,%ifcplusplus@*/

const std::complex<double>&



/*@SWIG@*/ c)
{
  return PyComplex_FromDoubles(std::real(c), std::imag(c));
}

SWIGINTERN std::complex< double > const GWFrames_DataGrid___getitem____SWIG_1(GWFrames::DataGrid const *self,unsigned int const i){ return self->operator[](i); }

SWIGINTERN int
SWIG_AsVal_std_complex_Sl_double_Sg_  (PyObject *o, std::complex<double>* val)
{
  if (PyComplex_Check(o)) {
    if (val) *val = std::complex<double>(PyComplex_RealAsDouble(o), PyComplex_ImagAsDouble(o));
    return SWIG_OK;
  } else {
    double d;    
    int res = SWIG_AddCast(SWIG_AsVal_double (o, &d));
    if (SWIG_IsOK(res)) {
      if (val) *val = std::complex<double>(d, 0.0);
      return res;
    }
  }
  return SWIG_TypeError;
}

SWIGINTERN void GWFrames_DataGrid___setitem____SWIG_1(GWFrames::DataGrid *self,unsigned int const i,std::complex< double > const &a){ self->operator[](i)=a; }
SWIGINTERN void GWFrames_Modes___setitem____SWIG_1(GWFrames::Modes *self,unsigned int const i,std::complex< double > const &a){ self->operator[](i)=a; }
SWIGINTERN GWFrames::Modes const &GWFrames_SliceModes___getitem__(GWFrames::SliceModes const *self,unsigned int const i){ return self->operator[](i); }
SWIGINTERN void GWFrames_SliceModes___setitem__(GWFrames::SliceModes *self,unsigned int const i,GWFrames::Modes const &a){ self->operator[](i)=a; }
SWIGINTERN void GWFrames_Scri___setitem____SWIG_1(GWFrames::Scri *self,unsigned int const i,GWFrames::SliceModes const &a){ self->operator[](i) = a; }
SWIGINTERN GWFrames::Modes const GWFrames_SuperMomenta___getitem__(GWFrames::SuperMomenta const *self,unsigned int const i){ return self->operator[](i); }
SWIGINTERN void GWFrames_SuperMomenta___setitem__(GWFrames::SuperMomenta *self,unsigned int const i,GWFrames::Modes const &a){ self->operator[](i) = a; }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string GWFrames_Waveform___str__(GWFrames::Waveform *self){
    std::stringstream S;
    S << (self->HistoryStr()) << "#\n"
      << "# <in_python>\n"
      << "import GWFrames\n"
      << "print(this)\n"
      << "# </in_python>" << std::endl << std::setprecision(14);
    for(unsigned int t=0; t<self->NTimes(); ++t) {
      S << self->T(t) << " ";
      for(unsigned int mode=0; mode<self->NModes(); ++mode) {
        S << self->Re(mode, t) << " " << self->Im(mode, t) << " ";
      }
      S << std::endl;
    }
    return S.str();
  }
SWIGINTERN void GWFrames_Waveforms___setitem__(GWFrames::Waveforms *self,int i,GWFrames::Waveform const &W){
    self->operator[](i) = W;
    return;
  }

  namespace swig {
    template <>  struct traits<GWFrames::Waveform > {
      typedef pointer_category category;
      static const char* type_name() { return"GWFrames::Waveform"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<GWFrames::Waveform, std::allocator< GWFrames::Waveform > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "GWFrames::Waveform" "," "std::allocator< GWFrames::Waveform >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_GWFrames_Waveform_Sg__iterator(std::vector< GWFrames::Waveform > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_GWFrames_Waveform_Sg____nonzero__(std::vector< GWFrames::Waveform > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_GWFrames_Waveform_Sg____bool__(std::vector< GWFrames::Waveform > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< GWFrames::Waveform >::size_type std_vector_Sl_GWFrames_Waveform_Sg____len__(std::vector< GWFrames::Waveform > const *self){
      return self->size();
    }
SWIGINTERN std::vector< GWFrames::Waveform >::value_type std_vector_Sl_GWFrames_Waveform_Sg__pop(std::vector< GWFrames::Waveform > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *std_vector_Sl_GWFrames_Waveform_Sg____getslice__(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::difference_type i,std::vector< GWFrames::Waveform >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____setslice____SWIG_0(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::difference_type i,std::vector< GWFrames::Waveform >::difference_type j,std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &v=std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > >()){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____delslice__(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::difference_type i,std::vector< GWFrames::Waveform >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____delitem____SWIG_0(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *std_vector_Sl_GWFrames_Waveform_Sg____getitem____SWIG_0(std::vector< GWFrames::Waveform > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type id = i;
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_0(std::vector< GWFrames::Waveform > *self,PySliceObject *slice,std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type id = i;
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_1(std::vector< GWFrames::Waveform > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type id = i;
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____delitem____SWIG_1(std::vector< GWFrames::Waveform > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type id = i;
      std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< GWFrames::Waveform >::value_type const &std_vector_Sl_GWFrames_Waveform_Sg____getitem____SWIG_1(std::vector< GWFrames::Waveform > const *self,std::vector< GWFrames::Waveform >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_2(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::difference_type i,std::vector< GWFrames::Waveform >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg__append(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< GWFrames::Waveform >::iterator std_vector_Sl_GWFrames_Waveform_Sg__erase__SWIG_0(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< GWFrames::Waveform >::iterator std_vector_Sl_GWFrames_Waveform_Sg__erase__SWIG_1(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::iterator first,std::vector< GWFrames::Waveform >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< GWFrames::Waveform >::iterator std_vector_Sl_GWFrames_Waveform_Sg__insert__SWIG_0(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::iterator pos,std::vector< GWFrames::Waveform >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_GWFrames_Waveform_Sg__insert__SWIG_1(std::vector< GWFrames::Waveform > *self,std::vector< GWFrames::Waveform >::iterator pos,std::vector< GWFrames::Waveform >::size_type n,std::vector< GWFrames::Waveform >::value_type const &x){ self->insert(pos, n, x); }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_distance",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_equal",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGPY_ITERNEXT_CLOSURE(_wrap_SwigPyIterator___next__)

SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_advance",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___eq__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___ne__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___iadd__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___iadd__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___isub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___isub__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___add__)

SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_SwigPyIterator___sub__)

SWIGINTERN PyObject *_wrap__vectorM_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_iterator" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_GWFrames_Matrix_Sg__iterator(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap__vectorM_iterator)

SWIGINTERN PyObject *_wrap__vectorM___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___nonzero__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_GWFrames_Matrix_Sg____nonzero__((std::vector< GWFrames::Matrix > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap__vectorM___nonzero__)

SWIGINTERN PyObject *_wrap__vectorM___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___bool__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_GWFrames_Matrix_Sg____bool__((std::vector< GWFrames::Matrix > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___len__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = std_vector_Sl_GWFrames_Matrix_Sg____len__((std::vector< GWFrames::Matrix > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap__vectorM___len__)

SWIGINTERN PyObject *_wrap__vectorM_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_pop" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_GWFrames_Matrix_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< GWFrames::Matrix >::value_type(static_cast< const std::vector< GWFrames::Matrix >::value_type& >(result))), SWIGTYPE_p_GWFrames__Matrix, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  std::vector< GWFrames::Matrix >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___getslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___getslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorM___getslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *)std_vector_Sl_GWFrames_Matrix_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  std::vector< GWFrames::Matrix >::difference_type arg3 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_vectorM___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___setslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___setslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorM___setslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val3);
  {
    std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *ptr = (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_vectorM___setslice__" "', argument " "4"" of type '" "std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM___setslice__" "', argument " "4"" of type '" "std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  std::vector< GWFrames::Matrix >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___setslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___setslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorM___setslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__vectorM___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__vectorM___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::__setslice__(std::vector< GWFrames::Matrix >::difference_type,std::vector< GWFrames::Matrix >::difference_type,std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &)\n"
    "    std::vector< GWFrames::Matrix >::__setslice__(std::vector< GWFrames::Matrix >::difference_type,std::vector< GWFrames::Matrix >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorM___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  std::vector< GWFrames::Matrix >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___delslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___delslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorM___delslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___delitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___delitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___getitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *)std_vector_Sl_GWFrames_Matrix_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *ptr = (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorM___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___delitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorM___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorM___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::__delitem__(std::vector< GWFrames::Matrix >::difference_type)\n"
    "    std::vector< GWFrames::Matrix >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorM___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___getitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___getitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< GWFrames::Matrix >::value_type *) &std_vector_Sl_GWFrames_Matrix_Sg____getitem____SWIG_1((std::vector< GWFrames::Matrix > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorM___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorM___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::__getitem__(PySliceObject *)\n"
    "    std::vector< GWFrames::Matrix >::__getitem__(std::vector< GWFrames::Matrix >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__vectorM___getitem__)

SWIGINTERN PyObject *_wrap__vectorM___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::difference_type arg2 ;
  std::vector< GWFrames::Matrix >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM___setitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorM___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Matrix_Sg____setitem____SWIG_2(arg1,arg2,(GWFrames::Matrix const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorM___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorM___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Matrix, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorM___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::__setitem__(PySliceObject *,std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > const &)\n"
    "    std::vector< GWFrames::Matrix >::__setitem__(PySliceObject *)\n"
    "    std::vector< GWFrames::Matrix >::__setitem__(std::vector< GWFrames::Matrix >::difference_type,std::vector< GWFrames::Matrix >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap__vectorM___setitem__)

SWIGINTERN PyObject *_wrap__vectorM_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_append" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorM_append" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_append" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_GWFrames_Matrix_Sg__append(arg1,(GWFrames::Matrix const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new__vectorM__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (std::vector< GWFrames::Matrix > *)new std::vector< GWFrames::Matrix >();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__vectorM__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__vectorM",&obj1)) SWIG_fail;
  {
    std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *ptr = (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__vectorM" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__vectorM" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< GWFrames::Matrix > *)new std::vector< GWFrames::Matrix >((std::vector< GWFrames::Matrix > const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorM_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_empty" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (bool)((std::vector< GWFrames::Matrix > const *)arg1)->empty();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_size" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Matrix > const *)arg1)->size();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_clear" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      (arg1)->clear();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_swap" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorM_swap" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_swap" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< GWFrames::Matrix > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_get_allocator" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Matrix > const *)arg1)->get_allocator();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< GWFrames::Matrix >::allocator_type(static_cast< const std::vector< GWFrames::Matrix >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_GWFrames__Matrix_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_begin" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (arg1)->begin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_end" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (arg1)->end();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_rbegin" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_rend" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (arg1)->rend();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new__vectorM__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__vectorM",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__vectorM" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val1);
  {
    try {
      result = (std::vector< GWFrames::Matrix > *)new std::vector< GWFrames::Matrix >(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorM_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_pop_back" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      (arg1)->pop_back();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_resize" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM_resize" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_erase" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_GWFrames_Matrix_Sg__erase__SWIG_0(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::iterator arg2 ;
  std::vector< GWFrames::Matrix >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Matrix >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_erase" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_erase" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_GWFrames_Matrix_Sg__erase__SWIG_1(arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap__vectorM_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap__vectorM_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::erase(std::vector< GWFrames::Matrix >::iterator)\n"
    "    std::vector< GWFrames::Matrix >::erase(std::vector< GWFrames::Matrix >::iterator,std::vector< GWFrames::Matrix >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new__vectorM__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix >::size_type arg1 ;
  std::vector< GWFrames::Matrix >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Matrix > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__vectorM",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__vectorM" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new__vectorM" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__vectorM" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp2);
  {
    try {
      result = (std::vector< GWFrames::Matrix > *)new std::vector< GWFrames::Matrix >(arg1,(std::vector< GWFrames::Matrix >::value_type const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__vectorM(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__vectorM__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new__vectorM__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__vectorM__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Matrix, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new__vectorM__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__vectorM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::vector()\n"
    "    std::vector< GWFrames::Matrix >::vector(std::vector< GWFrames::Matrix > const &)\n"
    "    std::vector< GWFrames::Matrix >::vector(std::vector< GWFrames::Matrix >::size_type)\n"
    "    std::vector< GWFrames::Matrix >::vector(std::vector< GWFrames::Matrix >::size_type,std::vector< GWFrames::Matrix >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorM_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_push_back" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorM_push_back" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_push_back" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< GWFrames::Matrix >::value_type const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_front" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (std::vector< GWFrames::Matrix >::value_type *) &((std::vector< GWFrames::Matrix > const *)arg1)->front();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_back" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = (std::vector< GWFrames::Matrix >::value_type *) &((std::vector< GWFrames::Matrix > const *)arg1)->back();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Matrix, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::size_type arg2 ;
  std::vector< GWFrames::Matrix >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_assign" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM_assign" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorM_assign" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_assign" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< GWFrames::Matrix >::value_type const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::size_type arg2 ;
  std::vector< GWFrames::Matrix >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_resize" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM_resize" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorM_resize" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_resize" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< GWFrames::Matrix >::value_type const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorM_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Matrix, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorM_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::resize(std::vector< GWFrames::Matrix >::size_type)\n"
    "    std::vector< GWFrames::Matrix >::resize(std::vector< GWFrames::Matrix >::size_type,std::vector< GWFrames::Matrix >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorM_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::iterator arg2 ;
  std::vector< GWFrames::Matrix >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Matrix >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorM_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_insert" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorM_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_GWFrames_Matrix_Sg__insert__SWIG_0(arg1,arg2,(GWFrames::Matrix const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Matrix >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::iterator arg2 ;
  std::vector< GWFrames::Matrix >::size_type arg3 ;
  std::vector< GWFrames::Matrix >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_vectorM_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_insert" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorM_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorM_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GWFrames__Matrix,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_vectorM_insert" "', argument " "4"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorM_insert" "', argument " "4"" of type '" "std::vector< GWFrames::Matrix >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< GWFrames::Matrix >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_GWFrames_Matrix_Sg__insert__SWIG_1(arg1,arg2,arg3,(GWFrames::Matrix const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Matrix, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorM_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Matrix >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_GWFrames__Matrix, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__vectorM_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorM_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Matrix >::insert(std::vector< GWFrames::Matrix >::iterator,std::vector< GWFrames::Matrix >::value_type const &)\n"
    "    std::vector< GWFrames::Matrix >::insert(std::vector< GWFrames::Matrix >::iterator,std::vector< GWFrames::Matrix >::size_type,std::vector< GWFrames::Matrix >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorM_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  std::vector< GWFrames::Matrix >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorM_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_reserve" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorM_reserve" "', argument " "2"" of type '" "std::vector< GWFrames::Matrix >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Matrix >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorM_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorM_capacity" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Matrix > const *)arg1)->capacity();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__vectorM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Matrix > *arg1 = (std::vector< GWFrames::Matrix > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__vectorM" "', argument " "1"" of type '" "std::vector< GWFrames::Matrix > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Matrix > * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ScriFunctor___call__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ScriFunctor *arg1 = (GWFrames::ScriFunctor *) 0 ;
  Quaternions::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quaternions::Quaternion tmp2 ;
  PyObject *item2 ;
  Py_ssize_t i2 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ScriFunctor___call__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__ScriFunctor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ScriFunctor___call__" "', argument " "1"" of type '" "GWFrames::ScriFunctor const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::ScriFunctor * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      for(i2=0; i2<4; ++i2) {
        item2 = PySequence_GetItem(obj1, i2);
        if(!SWIG_IsOK(SWIG_AsVal_double (item2, &tmp2[i2]))) {
          Py_DECREF(item2);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item2);
      }
      arg2 = &tmp2;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj1, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 2 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp2[0] = (*ptmp2)[0];
      tmp2[1] = (*ptmp2)[1];
      tmp2[2] = (*ptmp2)[2];
      tmp2[3] = (*ptmp2)[3];
      arg2 = &tmp2;
    }
  }
  {
    try {
      result = (double)((GWFrames::ScriFunctor const *)arg1)->operator ()((Quaternions::Quaternion const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_TERNARYCALLFUNC_CLOSURE(_wrap_ScriFunctor___call__)

SWIGINTERN int _wrap_new_ScriFunctor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ScriFunctor *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::ScriFunctor *)new GWFrames::ScriFunctor();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__ScriFunctor, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ScriFunctor(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ScriFunctor *arg1 = (GWFrames::ScriFunctor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__ScriFunctor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ScriFunctor" "', argument " "1"" of type '" "GWFrames::ScriFunctor *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::ScriFunctor * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Boost(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg1 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternions::Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Boost",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Boost" "', argument " "1"" of type '" "GWFrames::ThreeVector""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boost" "', argument " "1"" of type '" "GWFrames::ThreeVector""'");
    } else {
      GWFrames::ThreeVector * temp = reinterpret_cast< GWFrames::ThreeVector * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Boost" "', argument " "2"" of type '" "GWFrames::ThreeVector""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Boost" "', argument " "2"" of type '" "GWFrames::ThreeVector""'");
    } else {
      GWFrames::ThreeVector * temp = reinterpret_cast< GWFrames::ThreeVector * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = GWFrames::Boost(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Quaternions::Quaternion(static_cast< const Quaternions::Quaternion& >(result))), SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataGrid",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid((GWFrames::DataGrid const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< std_complex_double > temp4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DataGrid",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_CDOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'complex' expected."	\
          " Make sure that the numpy array use dtype=complex.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      std_complex_double* array = static_cast<std_complex_double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(std_complex_double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_std_complex_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"std_complex_double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'complex' expected. " \
        "Make sure that the numpy array use dtype=complex.");
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1,arg2,arg3,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes arg1 ;
  int arg2 ;
  int arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DataGrid",&obj1,&obj2,&obj3)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'");
    } else {
      GWFrames::Modes * temp = reinterpret_cast< GWFrames::Modes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_5(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DataGrid",&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'");
    } else {
      GWFrames::Modes * temp = reinterpret_cast< GWFrames::Modes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_6(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DataGrid",&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes""'");
    } else {
      GWFrames::Modes * temp = reinterpret_cast< GWFrames::Modes * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_7(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = 0 ;
  GWFrames::ThreeVector *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_DataGrid",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj4, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_DataGrid" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid((GWFrames::Modes const &)*arg1,(GWFrames::ThreeVector const &)*arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_8(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = 0 ;
  GWFrames::ThreeVector *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_DataGrid",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid((GWFrames::Modes const &)*arg1,(GWFrames::ThreeVector const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_9(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = 0 ;
  GWFrames::ThreeVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DataGrid",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid((GWFrames::Modes const &)*arg1,(GWFrames::ThreeVector const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid__SWIG_10(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  GWFrames::ThreeVector *arg4 = 0 ;
  GWFrames::ScriFunctor *arg5 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< double > temp4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new_DataGrid",&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DataGrid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DataGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DataGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  res5 = SWIG_ConvertPtr(obj5, &argp5, SWIGTYPE_p_GWFrames__ScriFunctor,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_DataGrid" "', argument " "5"" of type '" "GWFrames::ScriFunctor const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DataGrid" "', argument " "5"" of type '" "GWFrames::ScriFunctor const &""'"); 
  }
  arg5 = reinterpret_cast< GWFrames::ScriFunctor * >(argp5);
  {
    try {
      result = (GWFrames::DataGrid *)new GWFrames::DataGrid(arg1,arg2,arg3,(GWFrames::ThreeVector const &)*arg4,(GWFrames::ScriFunctor const &)*arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DataGrid__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataGrid__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DataGrid__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DataGrid__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DataGrid__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap_new_DataGrid__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DataGrid__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
          }
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_DataGrid__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
          }
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_DataGrid__SWIG_7(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                std_complex_double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_std_complex_double (item, temp));
              }
            }
          }
          if (_v) {
            return _wrap_new_DataGrid__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_GWFrames__ScriFunctor, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_new_DataGrid__SWIG_10(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DataGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::DataGrid::DataGrid(int const)\n"
    "    GWFrames::DataGrid::DataGrid()\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::DataGrid const &)\n"
    "    GWFrames::DataGrid::DataGrid(int const,int const,int const,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes,int const,int const)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes,int const)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes const &,GWFrames::ThreeVector const &,int const,int const)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes const &,GWFrames::ThreeVector const &,int const)\n"
    "    GWFrames::DataGrid::DataGrid(GWFrames::Modes const &,GWFrames::ThreeVector const &)\n"
    "    GWFrames::DataGrid::DataGrid(int const,int const,int const,GWFrames::ThreeVector const &,GWFrames::ScriFunctor const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_DataGrid_SetSpin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid_SetSpin",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_SetSpin" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid_SetSpin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::DataGrid *) &(arg1)->SetSpin(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_SetNTheta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid_SetNTheta",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_SetNTheta" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid_SetNTheta" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::DataGrid *) &(arg1)->SetNTheta(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_SetNPhi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid_SetNPhi",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_SetNPhi" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid_SetNPhi" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::DataGrid *) &(arg1)->SetNPhi(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_size" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::DataGrid const *)arg1)->size();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_Spin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_Spin" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = (int)((GWFrames::DataGrid const *)arg1)->Spin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_N_theta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_N_theta" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = (int)((GWFrames::DataGrid const *)arg1)->N_theta();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_N_phi(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_N_phi" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = (int)((GWFrames::DataGrid const *)arg1)->N_phi();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___getitem__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::complex< double > *) &((GWFrames::DataGrid const *)arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___setitem__" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::complex< double > *) &(arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid_Data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_Data" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->Data();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___mul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  GWFrames::DataGrid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___mul__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataGrid___mul__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataGrid___mul__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->operator *((GWFrames::DataGrid const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_DataGrid___mul__)

SWIGINTERN PyObject *_wrap_DataGrid___div__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  GWFrames::DataGrid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___div__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___div__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataGrid___div__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataGrid___div__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->operator /((GWFrames::DataGrid const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_DataGrid___div__)

SWIGINTERN PyObject *_wrap_DataGrid___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  GWFrames::DataGrid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___add__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataGrid___add__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataGrid___add__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->operator +((GWFrames::DataGrid const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_DataGrid___add__)

SWIGINTERN PyObject *_wrap_DataGrid___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  GWFrames::DataGrid *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___sub__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataGrid___sub__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DataGrid___sub__" "', argument " "2"" of type '" "GWFrames::DataGrid const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->operator -((GWFrames::DataGrid const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_DataGrid___sub__)

SWIGINTERN PyObject *_wrap_DataGrid_pow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid_pow",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid_pow" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid_pow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((GWFrames::DataGrid const *)arg1)->pow(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DataGrid___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___getitem__" "', argument " "1"" of type '" "GWFrames::DataGrid const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = GWFrames_DataGrid___getitem____SWIG_1((GWFrames::DataGrid const *)arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataGrid___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataGrid___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataGrid___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::DataGrid::operator [](unsigned int const) const\n"
    "    GWFrames::DataGrid::__getitem__(unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataGrid___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  unsigned int arg2 ;
  std::complex< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::complex< double > temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DataGrid___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataGrid___setitem__" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataGrid___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DataGrid___setitem__" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  temp3 = static_cast< std::complex< double > >(val3);
  arg3 = &temp3;
  {
    try {
      GWFrames_DataGrid___setitem____SWIG_1(arg1,arg2,(std::complex< double > const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataGrid___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DataGrid___setitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DataGrid___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DataGrid___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::DataGrid::operator [](unsigned int const)\n"
    "    GWFrames::DataGrid::__setitem__(unsigned int const,std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_DataGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid *arg1 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataGrid" "', argument " "1"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::DataGrid * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ConformalFactorGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ThreeVector *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ConformalFactorGrid",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if(PyArray_Check(obj0)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj0);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp1.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp1.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp1[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj0)) {
      Py_ssize_t size = PySequence_Size(obj0);
      temp1.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj0, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp1[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 1");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg1 = &temp1;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ConformalFactorGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ConformalFactorGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = GWFrames::ConformalFactorGrid((std::vector< double,std::allocator< double > > const &)*arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseConformalFactorGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ThreeVector *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InverseConformalFactorGrid",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if(PyArray_Check(obj0)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj0);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp1.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp1.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp1[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj0)) {
      Py_ssize_t size = PySequence_Size(obj0);
      temp1.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj0, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp1[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 1");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg1 = &temp1;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseConformalFactorGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InverseConformalFactorGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = GWFrames::InverseConformalFactorGrid((std::vector< double,std::allocator< double > > const &)*arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_InverseConformalFactorBoostedGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::ThreeVector *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > temp1 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::DataGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:InverseConformalFactorBoostedGrid",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if(PyArray_Check(obj0)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj0);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp1.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp1.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp1[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj0)) {
      Py_ssize_t size = PySequence_Size(obj0);
      temp1.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj0, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp1[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 1");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg1 = &temp1;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InverseConformalFactorBoostedGrid" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InverseConformalFactorBoostedGrid" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = GWFrames::InverseConformalFactorBoostedGrid((std::vector< double,std::allocator< double > > const &)*arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::DataGrid(static_cast< const GWFrames::DataGrid& >(result))), SWIGTYPE_p_GWFrames__DataGrid, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Modes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Modes",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Modes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Modes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes((GWFrames::Modes const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< std_complex_double > temp2 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Modes",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Modes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_CDOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'complex' expected."	\
          " Make sure that the numpy array use dtype=complex.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      std_complex_double* array = static_cast<std_complex_double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(std_complex_double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_std_complex_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"std_complex_double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'complex' expected. " \
        "Make sure that the numpy array use dtype=complex.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes(arg1,(std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Modes",&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::DataGrid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::DataGrid""'");
    } else {
      GWFrames::DataGrid * temp = reinterpret_cast< GWFrames::DataGrid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Modes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes__SWIG_5(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::DataGrid arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Modes",&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__DataGrid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::DataGrid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Modes" "', argument " "1"" of type '" "GWFrames::DataGrid""'");
    } else {
      GWFrames::DataGrid * temp = reinterpret_cast< GWFrames::DataGrid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (GWFrames::Modes *)new GWFrames::Modes(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Modes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Modes__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Modes__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Modes__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Modes__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__DataGrid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_Modes__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            std_complex_double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_std_complex_double (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap_new_Modes__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Modes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Modes::Modes(int const)\n"
    "    GWFrames::Modes::Modes()\n"
    "    GWFrames::Modes::Modes(GWFrames::Modes const &)\n"
    "    GWFrames::Modes::Modes(int const,std::vector< std::complex< double >,std::allocator< std::complex< double > > > const &)\n"
    "    GWFrames::Modes::Modes(GWFrames::DataGrid,int const)\n"
    "    GWFrames::Modes::Modes(GWFrames::DataGrid)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Modes_SetSpin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes_SetSpin",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_SetSpin" "', argument " "1"" of type '" "GWFrames::Modes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes_SetSpin" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Modes *) &(arg1)->SetSpin(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_SetEllMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes_SetEllMax",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_SetEllMax" "', argument " "1"" of type '" "GWFrames::Modes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes_SetEllMax" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Modes *) &(arg1)->SetEllMax(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_size" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::Modes const *)arg1)->size();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_Spin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_Spin" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = (int)((GWFrames::Modes const *)arg1)->Spin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_EllMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_EllMax" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = (int)((GWFrames::Modes const *)arg1)->EllMax();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___getitem__" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___setitem__" "', argument " "1"" of type '" "GWFrames::Modes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::complex< double > *) &(arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_Data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_Data" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->Data();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_pow(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes_pow",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_pow" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes_pow" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->pow(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_bar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_bar" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->bar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes___mul__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___mul__" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modes___mul__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modes___mul__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->operator *((GWFrames::Modes const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Modes___mul__)

SWIGINTERN PyObject *_wrap_Modes___div__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___div__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___div__" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modes___div__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modes___div__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->operator /((GWFrames::Modes const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Modes___div__)

SWIGINTERN PyObject *_wrap_Modes___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___add__" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modes___add__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modes___add__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->operator +((GWFrames::Modes const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Modes___add__)

SWIGINTERN PyObject *_wrap_Modes___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___sub__" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Modes___sub__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Modes___sub__" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->operator -((GWFrames::Modes const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap_Modes___sub__)

SWIGINTERN PyObject *_wrap_Modes_edth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_edth" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->edth();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_edthbar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_edthbar" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->edthbar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_edth2edthbar2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_edth2edthbar2" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->edth2edthbar2();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_EvaluateAtPoint__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Modes_EvaluateAtPoint",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_EvaluateAtPoint" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes_EvaluateAtPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modes_EvaluateAtPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->EvaluateAtPoint(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_EvaluateAtPoint__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  Quaternions::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quaternions::Quaternion tmp2 ;
  PyObject *item2 ;
  Py_ssize_t i2 ;
  PyObject * obj1 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Modes_EvaluateAtPoint",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes_EvaluateAtPoint" "', argument " "1"" of type '" "GWFrames::Modes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      for(i2=0; i2<4; ++i2) {
        item2 = PySequence_GetItem(obj1, i2);
        if(!SWIG_IsOK(SWIG_AsVal_double (item2, &tmp2[i2]))) {
          Py_DECREF(item2);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item2);
      }
      arg2 = &tmp2;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj1, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 2 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp2[0] = (*ptmp2)[0];
      tmp2[1] = (*ptmp2)[1];
      tmp2[2] = (*ptmp2)[2];
      tmp2[3] = (*ptmp2)[3];
      arg2 = &tmp2;
    }
  }
  {
    try {
      result = ((GWFrames::Modes const *)arg1)->EvaluateAtPoint((Quaternions::Quaternion const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes_EvaluateAtPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void* argp1 = 0;
        // If this is a SWIG-wrapped Quaternion, accept it
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
        if(!_v) {
          // Accept it if this is a sequence of numbers with length 4
          if(PySequence_Check(argv[1]) && PySequence_Size(argv[1])==4) {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            _v = (PyFloat_Check(item) || PyInt_Check(item));
          }
        }
      }
      if (_v) {
        return _wrap_Modes_EvaluateAtPoint__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Modes_EvaluateAtPoint__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Modes_EvaluateAtPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Modes::EvaluateAtPoint(double const,double const) const\n"
    "    GWFrames::Modes::EvaluateAtPoint(Quaternions::Quaternion const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Modes___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  unsigned int arg2 ;
  std::complex< double > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::complex< double > temp3 ;
  std::complex< double > val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Modes___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Modes___setitem__" "', argument " "1"" of type '" "GWFrames::Modes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Modes___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Modes___setitem__" "', argument " "3"" of type '" "std::complex< double >""'");
  } 
  temp3 = static_cast< std::complex< double > >(val3);
  arg3 = &temp3;
  {
    try {
      GWFrames_Modes___setitem____SWIG_1(arg1,arg2,(std::complex< double > const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Modes___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Modes___setitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Modes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Modes___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Modes___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Modes::operator [](unsigned int const)\n"
    "    GWFrames::Modes::__setitem__(unsigned int const,std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Modes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Modes" "', argument " "1"" of type '" "GWFrames::Modes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_vFromOneOverK(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Modes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:vFromOneOverK",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vFromOneOverK" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vFromOneOverK" "', argument " "1"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Modes * >(argp1);
  {
    try {
      result = GWFrames::vFromOneOverK((GWFrames::Modes const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SliceModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceModes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceModes",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SliceModes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::SliceModes *)new GWFrames::SliceModes(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceModes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::SliceModes *)new GWFrames::SliceModes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceModes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceModes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceModes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__SliceModes,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceModes" "', argument " "1"" of type '" "GWFrames::SliceModes const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceModes" "', argument " "1"" of type '" "GWFrames::SliceModes const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      result = (GWFrames::SliceModes *)new GWFrames::SliceModes((GWFrames::SliceModes const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceModes, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SliceModes__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__SliceModes, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SliceModes__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SliceModes__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SliceModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::SliceModes::SliceModes(int const)\n"
    "    GWFrames::SliceModes::SliceModes()\n"
    "    GWFrames::SliceModes::SliceModes(GWFrames::SliceModes const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_SliceModes_EllMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_EllMax" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      result = (int)((GWFrames::SliceModes const *)arg1)->EllMax();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes_Mass(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_Mass" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      result = (double)((GWFrames::SliceModes const *)arg1)->Mass();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes_FourMomentum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_FourMomentum" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      result = ((GWFrames::SliceModes const *)arg1)->FourMomentum();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes_SuperMomentum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_SuperMomentum" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      result = ((GWFrames::SliceModes const *)arg1)->SuperMomentum();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes_BMSTransformationOnSlice(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  double arg2 ;
  GWFrames::ThreeVector *arg3 = 0 ;
  GWFrames::Modes *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::SliceGrid result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SliceModes_BMSTransformationOnSlice",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_BMSTransformationOnSlice" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SliceModes_BMSTransformationOnSlice" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SliceModes_BMSTransformationOnSlice" "', argument " "4"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceModes_BMSTransformationOnSlice" "', argument " "4"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg4 = reinterpret_cast< GWFrames::Modes * >(argp4);
  {
    try {
      result = ((GWFrames::SliceModes const *)arg1)->BMSTransformationOnSlice(arg2,(GWFrames::ThreeVector const &)*arg3,(GWFrames::Modes const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::SliceGrid(static_cast< const GWFrames::SliceGrid& >(result))), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes_MoreschiIteration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  GWFrames::Modes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SliceModes_MoreschiIteration",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes_MoreschiIteration" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceModes_MoreschiIteration" "', argument " "2"" of type '" "GWFrames::Modes &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceModes_MoreschiIteration" "', argument " "2"" of type '" "GWFrames::Modes &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Modes,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SliceModes_MoreschiIteration" "', argument " "3"" of type '" "GWFrames::Modes &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceModes_MoreschiIteration" "', argument " "3"" of type '" "GWFrames::Modes &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Modes * >(argp3);
  {
    try {
      ((GWFrames::SliceModes const *)arg1)->MoreschiIteration(*arg2,*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceModes___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes___getitem__" "', argument " "1"" of type '" "GWFrames::SliceModes const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SliceModes___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (GWFrames::Modes *) &GWFrames_SliceModes___getitem__((GWFrames::SliceModes const *)arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceModes___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  unsigned int arg2 ;
  GWFrames::Modes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SliceModes___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceModes___setitem__" "', argument " "1"" of type '" "GWFrames::SliceModes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SliceModes___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SliceModes___setitem__" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceModes___setitem__" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Modes * >(argp3);
  {
    try {
      GWFrames_SliceModes___setitem__(arg1,arg2,(GWFrames::Modes const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SliceModes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceModes *arg1 = (GWFrames::SliceModes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceModes, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SliceModes" "', argument " "1"" of type '" "GWFrames::SliceModes *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceModes * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Scri__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  GWFrames::Waveform *arg3 = 0 ;
  GWFrames::Waveform *arg4 = 0 ;
  GWFrames::Waveform *arg5 = 0 ;
  GWFrames::Waveform *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GWFrames::Scri *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new_Scri",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Scri" "', argument " "1"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "1"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Scri" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  res3 = SWIG_ConvertPtr(obj3, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Scri" "', argument " "3"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "3"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Waveform * >(argp3);
  res4 = SWIG_ConvertPtr(obj4, &argp4, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "new_Scri" "', argument " "4"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "4"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg4 = reinterpret_cast< GWFrames::Waveform * >(argp4);
  res5 = SWIG_ConvertPtr(obj5, &argp5, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "new_Scri" "', argument " "5"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "5"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg5 = reinterpret_cast< GWFrames::Waveform * >(argp5);
  res6 = SWIG_ConvertPtr(obj6, &argp6, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "new_Scri" "', argument " "6"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp6) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "6"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg6 = reinterpret_cast< GWFrames::Waveform * >(argp6);
  {
    try {
      result = (GWFrames::Scri *)new GWFrames::Scri((GWFrames::Waveform const &)*arg1,(GWFrames::Waveform const &)*arg2,(GWFrames::Waveform const &)*arg3,(GWFrames::Waveform const &)*arg4,(GWFrames::Waveform const &)*arg5,(GWFrames::Waveform const &)*arg6);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Scri, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Scri__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Scri *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Scri",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Scri,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Scri" "', argument " "1"" of type '" "GWFrames::Scri const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Scri" "', argument " "1"" of type '" "GWFrames::Scri const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  {
    try {
      result = (GWFrames::Scri *)new GWFrames::Scri((GWFrames::Scri const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Scri, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Scri(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Scri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Scri__SWIG_1(self, args);
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_ConvertPtr(argv[5], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_new_Scri__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Scri'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Scri::Scri(GWFrames::Waveform const &,GWFrames::Waveform const &,GWFrames::Waveform const &,GWFrames::Waveform const &,GWFrames::Waveform const &,GWFrames::Waveform const &)\n"
    "    GWFrames::Scri::Scri(GWFrames::Scri const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_Scri_BMSTransformation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  double *arg2 = 0 ;
  GWFrames::ThreeVector *arg3 = 0 ;
  GWFrames::Modes *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::SliceModes result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Scri_BMSTransformation",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri_BMSTransformation" "', argument " "1"" of type '" "GWFrames::Scri const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scri_BMSTransformation" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Scri_BMSTransformation" "', argument " "4"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scri_BMSTransformation" "', argument " "4"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg4 = reinterpret_cast< GWFrames::Modes * >(argp4);
  {
    try {
      result = ((GWFrames::Scri const *)arg1)->BMSTransformation((double const &)*arg2,(GWFrames::ThreeVector const &)*arg3,(GWFrames::Modes const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::SliceModes(static_cast< const GWFrames::SliceModes& >(result))), SWIGTYPE_p_GWFrames__SliceModes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri_NTimes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri_NTimes" "', argument " "1"" of type '" "GWFrames::Scri const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  {
    try {
      result = (int)((GWFrames::Scri const *)arg1)->NTimes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri_T(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri_T" "', argument " "1"" of type '" "GWFrames::Scri const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  {
    try {
      result = ((GWFrames::Scri const *)arg1)->T();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceModes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scri___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri___getitem__" "', argument " "1"" of type '" "GWFrames::Scri const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scri___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Scri const *)arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::SliceModes(static_cast< const GWFrames::SliceModes& >(result))), SWIGTYPE_p_GWFrames__SliceModes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceModes *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Scri___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri___setitem__" "', argument " "1"" of type '" "GWFrames::Scri *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scri___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (GWFrames::SliceModes *) &(arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceModes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  unsigned int arg2 ;
  GWFrames::SliceModes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Scri___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Scri___setitem__" "', argument " "1"" of type '" "GWFrames::Scri *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Scri___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__SliceModes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Scri___setitem__" "', argument " "3"" of type '" "GWFrames::SliceModes const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Scri___setitem__" "', argument " "3"" of type '" "GWFrames::SliceModes const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::SliceModes * >(argp3);
  {
    try {
      GWFrames_Scri___setitem____SWIG_1(arg1,arg2,(GWFrames::SliceModes const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Scri___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Scri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Scri___setitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Scri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__SliceModes, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Scri___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Scri___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Scri::operator [](unsigned int const)\n"
    "    GWFrames::Scri::__setitem__(unsigned int const,GWFrames::SliceModes const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Scri(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = (GWFrames::Scri *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Scri, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Scri" "', argument " "1"" of type '" "GWFrames::Scri *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SuperMomenta__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SuperMomenta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SuperMomenta",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SuperMomenta" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    try {
      result = (GWFrames::SuperMomenta *)new GWFrames::SuperMomenta(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SuperMomenta, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SuperMomenta__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SuperMomenta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SuperMomenta",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__SuperMomenta,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SuperMomenta" "', argument " "1"" of type '" "GWFrames::SuperMomenta const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SuperMomenta" "', argument " "1"" of type '" "GWFrames::SuperMomenta const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  {
    try {
      result = (GWFrames::SuperMomenta *)new GWFrames::SuperMomenta((GWFrames::SuperMomenta const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SuperMomenta, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SuperMomenta__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > *arg2 = 0 ;
  std::vector< double > temp1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::SuperMomenta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SuperMomenta",&obj1,&obj2)) SWIG_fail;
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp1.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp1.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp1[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp1.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp1[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 1");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg1 = &temp1;
  }
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SuperMomenta" "', argument " "2"" of type '" "std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SuperMomenta" "', argument " "2"" of type '" "std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > * >(argp2);
  {
    try {
      result = (GWFrames::SuperMomenta *)new GWFrames::SuperMomenta((std::vector< double,std::allocator< double > > const &)*arg1,(std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SuperMomenta, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SuperMomenta__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Scri *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SuperMomenta *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SuperMomenta",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Scri,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SuperMomenta" "', argument " "1"" of type '" "GWFrames::Scri const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SuperMomenta" "', argument " "1"" of type '" "GWFrames::Scri const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Scri * >(argp1);
  {
    try {
      result = (GWFrames::SuperMomenta *)new GWFrames::SuperMomenta((GWFrames::Scri const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SuperMomenta, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SuperMomenta(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__SuperMomenta, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SuperMomenta__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Scri, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SuperMomenta__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SuperMomenta__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = false;
      if(PyArray_Check(argv[0])) {
        _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[0]))==1);
      } else if(PyList_Check(argv[0])) {
        if(PyList_Size(argv[0])==0) {
          _v = true;
        } else {
          PyObject* item = PySequence_GetItem(argv[0], 0);
          double* temp=0;
          _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
        }
      }
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SuperMomenta__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SuperMomenta'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::SuperMomenta::SuperMomenta(unsigned int const)\n"
    "    GWFrames::SuperMomenta::SuperMomenta(GWFrames::SuperMomenta const &)\n"
    "    GWFrames::SuperMomenta::SuperMomenta(std::vector< double,std::allocator< double > > const &,std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > const &)\n"
    "    GWFrames::SuperMomenta::SuperMomenta(GWFrames::Scri const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_SuperMomenta_NTimes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta_NTimes" "', argument " "1"" of type '" "GWFrames::SuperMomenta const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  {
    try {
      result = (int)((GWFrames::SuperMomenta const *)arg1)->NTimes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SuperMomenta_T(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta_T" "', argument " "1"" of type '" "GWFrames::SuperMomenta const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  {
    try {
      result = ((GWFrames::SuperMomenta const *)arg1)->T();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SuperMomenta_BMSTransform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  GWFrames::Modes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SuperMomenta_BMSTransform",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta_BMSTransform" "', argument " "1"" of type '" "GWFrames::SuperMomenta const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SuperMomenta_BMSTransform" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuperMomenta_BMSTransform" "', argument " "2"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SuperMomenta_BMSTransform" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuperMomenta_BMSTransform" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Modes * >(argp3);
  {
    try {
      result = ((GWFrames::SuperMomenta const *)arg1)->BMSTransform((GWFrames::Modes const &)*arg2,(GWFrames::Modes const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SuperMomenta_MoreschiIteration(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  GWFrames::Modes *arg2 = 0 ;
  GWFrames::Modes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SuperMomenta_MoreschiIteration",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta_MoreschiIteration" "', argument " "1"" of type '" "GWFrames::SuperMomenta const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Modes,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SuperMomenta_MoreschiIteration" "', argument " "2"" of type '" "GWFrames::Modes &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuperMomenta_MoreschiIteration" "', argument " "2"" of type '" "GWFrames::Modes &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Modes,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SuperMomenta_MoreschiIteration" "', argument " "3"" of type '" "GWFrames::Modes &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuperMomenta_MoreschiIteration" "', argument " "3"" of type '" "GWFrames::Modes &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Modes * >(argp3);
  {
    try {
      ((GWFrames::SuperMomenta const *)arg1)->MoreschiIteration(*arg2,*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SuperMomenta___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Modes result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SuperMomenta___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta___getitem__" "', argument " "1"" of type '" "GWFrames::SuperMomenta const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SuperMomenta___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = GWFrames_SuperMomenta___getitem__((GWFrames::SuperMomenta const *)arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Modes(static_cast< const GWFrames::Modes& >(result))), SWIGTYPE_p_GWFrames__Modes, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SuperMomenta___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  unsigned int arg2 ;
  GWFrames::Modes *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SuperMomenta___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SuperMomenta___setitem__" "', argument " "1"" of type '" "GWFrames::SuperMomenta *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SuperMomenta___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Modes,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SuperMomenta___setitem__" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SuperMomenta___setitem__" "', argument " "3"" of type '" "GWFrames::Modes const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Modes * >(argp3);
  {
    try {
      GWFrames_SuperMomenta___setitem__(arg1,arg2,(GWFrames::Modes const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SuperMomenta(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SuperMomenta *arg1 = (GWFrames::SuperMomenta *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SuperMomenta, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SuperMomenta" "', argument " "1"" of type '" "GWFrames::SuperMomenta *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SuperMomenta * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi0_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_psi0_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi0_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_psi0_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->psi0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi0_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi0_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->psi0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_psi1_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi1_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_psi1_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->psi1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi1_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->psi1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_psi2_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi2_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_psi2_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->psi2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi2_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->psi2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_psi3_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi3_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_psi3_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->psi3 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi3_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->psi3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi4_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_psi4_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi4_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_psi4_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->psi4 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_psi4_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_psi4_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->psi4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_sigma_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_sigma_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_sigma_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_sigma_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->sigma = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_sigma_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_sigma_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_sigmadot_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  GWFrames::DataGrid *arg2 = (GWFrames::DataGrid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriGrid_sigmadot_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_sigmadot_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriGrid_sigmadot_set" "', argument " "2"" of type '" "GWFrames::DataGrid *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::DataGrid * >(argp2);
  if (arg1) (arg1)->sigmadot = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriGrid_sigmadot_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::DataGrid *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriGrid_sigmadot_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  result = (GWFrames::DataGrid *)& ((arg1)->sigmadot);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__DataGrid, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SliceOfScriGrid__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceOfScriGrid",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SliceOfScriGrid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::DataGrid > *)new GWFrames::SliceOfScri< GWFrames::DataGrid >(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriGrid__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::DataGrid > *)new GWFrames::SliceOfScri< GWFrames::DataGrid >();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriGrid__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceOfScriGrid",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceOfScriGrid" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceOfScriGrid" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::DataGrid > *)new GWFrames::SliceOfScri< GWFrames::DataGrid >((GWFrames::SliceOfScri< GWFrames::DataGrid > const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriGrid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SliceOfScriGrid__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SliceOfScriGrid__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SliceOfScriGrid__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SliceOfScriGrid'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::SliceOfScri< GWFrames::DataGrid >::SliceOfScri(int const)\n"
    "    GWFrames::SliceOfScri< GWFrames::DataGrid >::SliceOfScri()\n"
    "    GWFrames::SliceOfScri< GWFrames::DataGrid >::SliceOfScri(GWFrames::SliceOfScri< GWFrames::DataGrid > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_SliceOfScriGrid(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::DataGrid > *arg1 = (GWFrames::SliceOfScri< GWFrames::DataGrid > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SliceOfScriGrid" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::DataGrid > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::DataGrid > * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi0_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_psi0_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi0_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_psi0_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->psi0 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi0_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi0_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->psi0);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi1_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_psi1_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi1_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_psi1_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->psi1 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi1_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi1_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->psi1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi2_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_psi2_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi2_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_psi2_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->psi2 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi2_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi2_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->psi2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi3_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_psi3_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi3_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_psi3_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->psi3 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi3_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi3_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->psi3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi4_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_psi4_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi4_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_psi4_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->psi4 = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_psi4_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_psi4_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->psi4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_sigma_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_sigma_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_sigma_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_sigma_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->sigma = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_sigma_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_sigma_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->sigma);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_sigmadot_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  GWFrames::Modes *arg2 = (GWFrames::Modes *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SliceOfScriModes_sigmadot_set",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_sigmadot_set" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceOfScriModes_sigmadot_set" "', argument " "2"" of type '" "GWFrames::Modes *""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Modes * >(argp2);
  if (arg1) (arg1)->sigmadot = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SliceOfScriModes_sigmadot_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Modes *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceOfScriModes_sigmadot_get" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  result = (GWFrames::Modes *)& ((arg1)->sigmadot);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Modes, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_SliceOfScriModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceOfScri< GWFrames::Modes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceOfScriModes",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SliceOfScriModes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::Modes > *)new GWFrames::SliceOfScri< GWFrames::Modes >(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::Modes > *)new GWFrames::SliceOfScri< GWFrames::Modes >();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriModes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::SliceOfScri< GWFrames::Modes > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SliceOfScriModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceOfScriModes" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceOfScriModes" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  {
    try {
      result = (GWFrames::SliceOfScri< GWFrames::Modes > *)new GWFrames::SliceOfScri< GWFrames::Modes >((GWFrames::SliceOfScri< GWFrames::Modes > const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_SliceOfScriModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SliceOfScriModes__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SliceOfScriModes__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SliceOfScriModes__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SliceOfScriModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::SliceOfScri< GWFrames::Modes >::SliceOfScri(int const)\n"
    "    GWFrames::SliceOfScri< GWFrames::Modes >::SliceOfScri()\n"
    "    GWFrames::SliceOfScri< GWFrames::Modes >::SliceOfScri(GWFrames::SliceOfScri< GWFrames::Modes > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_SliceOfScriModes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::SliceOfScri< GWFrames::Modes > *arg1 = (GWFrames::SliceOfScri< GWFrames::Modes > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__SliceOfScriT_GWFrames__Modes_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SliceOfScriModes" "', argument " "1"" of type '" "GWFrames::SliceOfScri< GWFrames::Modes > *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::SliceOfScri< GWFrames::Modes > * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int Swig_var_WaveformFrameNames_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WaveformFrameNames is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WaveformFrameNames_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(GWFrames::WaveformFrameNames), SWIGTYPE_p_std__string,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WaveformDataNames_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WaveformDataNames is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WaveformDataNames_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(GWFrames::WaveformDataNames), SWIGTYPE_p_std__string,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WaveformDataNamesLaTeX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WaveformDataNamesLaTeX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WaveformDataNamesLaTeX_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(GWFrames::WaveformDataNamesLaTeX), SWIGTYPE_p_std__string,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_WeightError_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable WeightError is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_WeightError_get(void) {
  PyObject *pyobj = 0;
  PyObject *self = 0;
  
  (void)self;
  pyobj = SWIG_From_int(static_cast< int >(GWFrames::WeightError));
  return pyobj;
}


SWIGINTERN int _wrap_new__Waveform__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::Waveform *)new GWFrames::Waveform();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__Waveform__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__Waveform",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Waveform" "', argument " "1"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Waveform" "', argument " "1"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *)new GWFrames::Waveform((GWFrames::Waveform const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__Waveform__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__Waveform",&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__Waveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Waveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new__Waveform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__Waveform" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (GWFrames::Waveform *)new GWFrames::Waveform((std::string const &)*arg1,(std::string const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return -1;
}


SWIGINTERN int _wrap_new__Waveform__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *arg3 = 0 ;
  std::vector< double > temp1 ;
  std::vector< std::vector< int > > temp2 ;
  std::vector< std::vector< std_complex_double > > temp3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new__Waveform",&obj1,&obj2,&obj3)) SWIG_fail;
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp1.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp1.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp1[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp1.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp1[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 1");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg1 = &temp1;
  }
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=intc.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp2.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp2[i].resize(size1);
      }
      int* array = static_cast<int*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(int);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(int);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp2[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size0 = PySequence_Size(obj2);
      temp2.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj2, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp2[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_int (item1, &temp2[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"int\" in argument 2");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected.");
    }
    arg2 = &temp2;
  }
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_CDOUBLE) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'complex' expected."	\
          " Make sure that the numpy array use dtype=complex.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp3.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp3[i].resize(size1);
      }
      std_complex_double* array = static_cast<std_complex_double*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(std_complex_double);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(std_complex_double);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp3[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size0 = PySequence_Size(obj3);
      temp3.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj3, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp3[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_std_complex_double (item1, &temp3[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"std_complex_double\" in argument 3");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'complex' expected.");
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (GWFrames::Waveform *)new GWFrames::Waveform((std::vector< double,std::allocator< double > > const &)*arg1,(std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2,(std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__Waveform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__Waveform__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__Waveform__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new__Waveform__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = false;
      if(PyArray_Check(argv[0])) {
        _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[0]))==1);
      } else if(PyList_Check(argv[0])) {
        if(PyList_Size(argv[0])==0) {
          _v = true;
        } else {
          PyObject* item = PySequence_GetItem(argv[0], 0);
          double* temp=0;
          _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
        }
      }
    }
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==2);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item0 = PySequence_GetItem(argv[1], 0);
            if(PyList_Size(item0)==0) {
              _v = true;
            } else {
              PyObject* item1 = PySequence_GetItem(item0, 0);
              int* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_int (item1, temp));
            }
          }
        }
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==2);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item0 = PySequence_GetItem(argv[2], 0);
              if(PyList_Size(item0)==0) {
                _v = true;
              } else {
                PyObject* item1 = PySequence_GetItem(item0, 0);
                std_complex_double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_std_complex_double (item1, temp));
              }
            }
          }
        }
        if (_v) {
          return _wrap_new__Waveform__SWIG_3(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__Waveform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Waveform()\n"
    "    GWFrames::Waveform::Waveform(GWFrames::Waveform const &)\n"
    "    GWFrames::Waveform::Waveform(std::string const &,std::string const &)\n"
    "    GWFrames::Waveform::Waveform(std::vector< double,std::allocator< double > > const &,std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &,std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete__Waveform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__Waveform" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_CopyWithoutData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_CopyWithoutData" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->CopyWithoutData();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndices__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimeIndices",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndices" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndices" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimeIndices" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndices(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndices__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimeIndices",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndices" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndices" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndices(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndices(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimeIndices__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimeIndices__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimeIndices'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimeIndices(unsigned int const,unsigned int) const\n"
    "    GWFrames::Waveform::SliceOfTimeIndices(unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithEll2__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimeIndicesWithEll2",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndicesWithEll2" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndicesWithEll2" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimeIndicesWithEll2" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndicesWithEll2(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithEll2__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimeIndicesWithEll2",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndicesWithEll2" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndicesWithEll2" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndicesWithEll2(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithEll2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimeIndicesWithEll2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimeIndicesWithEll2__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimeIndicesWithEll2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimeIndicesWithEll2(unsigned int const,unsigned int) const\n"
    "    GWFrames::Waveform::SliceOfTimeIndicesWithEll2(unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithoutModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimeIndicesWithoutModes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndicesWithoutModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndicesWithoutModes" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimeIndicesWithoutModes" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndicesWithoutModes(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithoutModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimeIndicesWithoutModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimeIndicesWithoutModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimeIndicesWithoutModes" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimeIndicesWithoutModes(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimeIndicesWithoutModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimeIndicesWithoutModes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimeIndicesWithoutModes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimeIndicesWithoutModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimeIndicesWithoutModes(unsigned int const,unsigned int) const\n"
    "    GWFrames::Waveform::SliceOfTimeIndicesWithoutModes(unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimes(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimes(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_SliceOfTimes__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimes(double const,double const) const\n"
    "    GWFrames::Waveform::SliceOfTimes(double const) const\n"
    "    GWFrames::Waveform::SliceOfTimes() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithEll2__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimesWithEll2",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithEll2(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithEll2__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimesWithEll2",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithEll2(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithEll2__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithEll2" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithEll2();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithEll2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_SliceOfTimesWithEll2__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimesWithEll2__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimesWithEll2__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimesWithEll2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimesWithEll2(double const,double const) const\n"
    "    GWFrames::Waveform::SliceOfTimesWithEll2(double const) const\n"
    "    GWFrames::Waveform::SliceOfTimesWithEll2() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithoutModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_SliceOfTimesWithoutModes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithoutModes(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithoutModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SliceOfTimesWithoutModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithoutModes(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithoutModes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SliceOfTimesWithoutModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->SliceOfTimesWithoutModes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SliceOfTimesWithoutModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_SliceOfTimesWithoutModes__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_SliceOfTimesWithoutModes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_SliceOfTimesWithoutModes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SliceOfTimesWithoutModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SliceOfTimesWithoutModes(double const,double const) const\n"
    "    GWFrames::Waveform::SliceOfTimesWithoutModes(double const) const\n"
    "    GWFrames::Waveform::SliceOfTimesWithoutModes() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_DropTimesOutside(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_DropTimesOutside",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DropTimesOutside" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_DropTimesOutside" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_DropTimesOutside" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->DropTimesOutside(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DropEllModes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned_int > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_DropEllModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DropEllModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_UINT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'uint' expected."	\
          " Make sure that the numpy array use dtype=uint.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      unsigned_int* array = static_cast<unsigned_int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(unsigned_int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_unsigned_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"unsigned_int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'uint' expected. " \
        "Make sure that the numpy array use dtype=uint.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->DropEllModes((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_KeepOnlyEllModes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned_int > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_KeepOnlyEllModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_KeepOnlyEllModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_UINT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'uint' expected."	\
          " Make sure that the numpy array use dtype=uint.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      unsigned_int* array = static_cast<unsigned_int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(unsigned_int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_unsigned_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"unsigned_int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'uint' expected. " \
        "Make sure that the numpy array use dtype=uint.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->KeepOnlyEllModes((std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_KeepOnlyEll2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_KeepOnlyEll2" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->KeepOnlyEll2();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetSpinWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetSpinWeight",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetSpinWeight" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetSpinWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetSpinWeight(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetBoostWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetBoostWeight",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetBoostWeight" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetBoostWeight" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetBoostWeight(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AppendHistory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_AppendHistory",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AppendHistory" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_AppendHistory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_AppendHistory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AppendHistory((std::string const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetHistory(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetHistory",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetHistory" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_SetHistory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_SetHistory" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetHistory((std::string const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetT(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetT",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetT" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetT((std::vector< double,std::allocator< double > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetTime",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetTime" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetTime((std::vector< double,std::allocator< double > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetFrame((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetFrameType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::WaveformFrameType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetFrameType",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetFrameType" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetFrameType" "', argument " "2"" of type '" "GWFrames::WaveformFrameType""'");
  } 
  arg2 = static_cast< GWFrames::WaveformFrameType >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetFrameType(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetDataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::WaveformDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetDataType",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetDataType" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetDataType" "', argument " "2"" of type '" "GWFrames::WaveformDataType""'");
  } 
  arg2 = static_cast< GWFrames::WaveformDataType >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetDataType(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetRIsScaledOut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetRIsScaledOut",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetRIsScaledOut" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetRIsScaledOut" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetRIsScaledOut(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetMIsScaledOut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetMIsScaledOut",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetMIsScaledOut" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetMIsScaledOut" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetMIsScaledOut(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetLM(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int > > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetLM",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetLM" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=intc.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp2.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp2[i].resize(size1);
      }
      int* array = static_cast<int*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(int);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(int);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp2[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size0 = PySequence_Size(obj1);
      temp2.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj1, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp2[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_int (item1, &temp2[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"int\" in argument 2");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetLM((std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetData__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< std_complex_double > > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_SetData",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetData" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_CDOUBLE) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'complex' expected."	\
          " Make sure that the numpy array use dtype=complex.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp2.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp2[i].resize(size1);
      }
      std_complex_double* array = static_cast<std_complex_double*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(std_complex_double);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(std_complex_double);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp2[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size0 = PySequence_Size(obj1);
      temp2.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj1, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp2[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_std_complex_double (item1, &temp2[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"std_complex_double\" in argument 2");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'complex' expected.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetData((std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetData__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::complex< double > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  std::complex< double > temp4 ;
  std::complex< double > val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_SetData",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SetData" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_SetData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_SetData" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_std_complex_Sl_double_Sg_(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_SetData" "', argument " "4"" of type '" "std::complex< double >""'");
  } 
  temp4 = static_cast< std::complex< double > >(val4);
  arg4 = &temp4;
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->SetData(arg2,arg3,(std::complex< double > const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SetData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==2);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item0 = PySequence_GetItem(argv[1], 0);
            if(PyList_Size(item0)==0) {
              _v = true;
            } else {
              PyObject* item1 = PySequence_GetItem(item0, 0);
              std_complex_double* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_std_complex_double (item1, temp));
            }
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_SetData__SWIG_0(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_std_complex_Sl_double_Sg_(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap__Waveform_SetData__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_SetData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::SetData(std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > const &)\n"
    "    GWFrames::Waveform::SetData(unsigned int const,unsigned int const,std::complex< double > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_ResizeData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_ResizeData",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_ResizeData" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_ResizeData" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_ResizeData" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->ResizeData(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_swap" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_swap" "', argument " "2"" of type '" "GWFrames::Waveform &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_swap" "', argument " "2"" of type '" "GWFrames::Waveform &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_NTimes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_NTimes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->NTimes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_NModes(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_NModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->NModes();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_SpinWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_SpinWeight" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (int)((GWFrames::Waveform const *)arg1)->SpinWeight();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_BoostWeight(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_BoostWeight" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (int)((GWFrames::Waveform const *)arg1)->BoostWeight();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_HistoryStr(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_HistoryStr" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->HistoryStr();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_HistoryStream(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::stringstream *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_HistoryStream" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (std::stringstream *) &(arg1)->HistoryStream();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__stringstream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_FrameType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_FrameType" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (int)((GWFrames::Waveform const *)arg1)->FrameType();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DataType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DataType" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (int)((GWFrames::Waveform const *)arg1)->DataType();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_FrameTypeString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_FrameTypeString" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->FrameTypeString();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DataTypeString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DataTypeString" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->DataTypeString();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DataTypeLaTeXString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DataTypeLaTeXString" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->DataTypeLaTeXString();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DescriptorString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DescriptorString" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->DescriptorString();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_RIsScaledOut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RIsScaledOut" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (bool)((GWFrames::Waveform const *)arg1)->RIsScaledOut();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_MIsScaledOut(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_MIsScaledOut" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (bool)((GWFrames::Waveform const *)arg1)->MIsScaledOut();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_T__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_T",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_T" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_T" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->T(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Frame__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Quaternions::Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Frame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Frame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Frame" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Frame(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Quaternions::Quaternion(static_cast< const Quaternions::Quaternion& >(result))), SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Re__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Re",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Re" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Re" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Re" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->Re(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Im__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Im",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Im" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Im" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Im" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->Im(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Abs__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Abs",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Abs" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Abs" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Abs" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->Abs(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Arg__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Arg",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Arg" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Arg" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Arg" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->Arg(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Data__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Data",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Data" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Data" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Data" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Data(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___call____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform___call__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___call__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform___call__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform___call__" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator ()(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LM__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int,std::allocator< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_LM",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LM" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_LM" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< int,std::allocator< int > > *) &((GWFrames::Waveform const *)arg1)->LM(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_INT);
    int* data = static_cast<int*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Re__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Re",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Re" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Re" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Re(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Im__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Im",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Im" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Im" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Im(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Abs__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Abs",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Abs" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Abs" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Abs(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Arg__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Arg",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Arg" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Arg" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Arg(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_ArgUnwrapped__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_ArgUnwrapped",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_ArgUnwrapped" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_ArgUnwrapped" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->ArgUnwrapped(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Data__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Data",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Data" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Data" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Data(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___call____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::complex< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___call__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___call__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform___call__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::complex< double > *)((GWFrames::Waveform const *)arg1)->operator ()(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__complexT_double_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___call__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform___call____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform___call____SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform___call__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::operator ()(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::operator ()(unsigned int const) const\n");
  return 0;
}


SWIGPY_TERNARYCALLFUNC_CLOSURE(_wrap__Waveform___call__)

SWIGINTERN PyObject *_wrap__Waveform_T__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_T" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::Waveform const *)arg1)->T();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_T(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_T__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_T__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_T'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::T(unsigned int const) const\n"
    "    GWFrames::Waveform::T() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Frame__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Frame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *) &((GWFrames::Waveform const *)arg1)->Frame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    npy_intp size = result->size();
    resultobj = PyArray_SimpleNew(1, &size, NPY_OBJECT);
    PyObject** data = static_cast<PyObject**>(PyArray_DATA((PyArrayObject*)resultobj));
    for(npy_intp i=0; i<size; ++i) {
      PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion((*result)[i])),
        SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
      if(!qobj) {
        SWIG_fail;
      }
      Py_INCREF(qobj);
      data[i] = qobj;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Frame(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Frame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Frame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Frame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Frame(unsigned int const) const\n"
    "    GWFrames::Waveform::Frame() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_LM__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LM" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > *) &((GWFrames::Waveform const *)arg1)->LM();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_INT);
    int* data = static_cast<int*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LM(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_LM__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_LM__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_LM'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::LM(unsigned int const) const\n"
    "    GWFrames::Waveform::LM() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Re__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Re" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Re();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Re(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Re__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Re__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Re__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Re'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Re(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::Re(unsigned int const) const\n"
    "    GWFrames::Waveform::Re() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Im__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Im" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Im();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Im(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Im__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Im__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Im__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Im'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Im(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::Im(unsigned int const) const\n"
    "    GWFrames::Waveform::Im() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Abs__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Abs" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Abs();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Abs(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Abs__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Abs__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Abs__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Abs'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Abs(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::Abs(unsigned int const) const\n"
    "    GWFrames::Waveform::Abs() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Arg__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Arg" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Arg();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Arg(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Arg__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Arg__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Arg__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Arg'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Arg(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::Arg(unsigned int const) const\n"
    "    GWFrames::Waveform::Arg() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_ArgUnwrapped__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_ArgUnwrapped" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->ArgUnwrapped();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_ArgUnwrapped(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_ArgUnwrapped__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_ArgUnwrapped__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_ArgUnwrapped'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::ArgUnwrapped(unsigned int const) const\n"
    "    GWFrames::Waveform::ArgUnwrapped() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Data__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< std::complex< double >,std::allocator< std::complex< double > > >,std::allocator< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Data" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Data();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Data(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Data__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Data__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Data__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Data'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Data(unsigned int const,unsigned int const) const\n"
    "    GWFrames::Waveform::Data(unsigned int const) const\n"
    "    GWFrames::Waveform::Data() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_EllMax(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_EllMax" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (int)((GWFrames::Waveform const *)arg1)->EllMax();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_FindModeIndex(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_FindModeIndex",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_FindModeIndex" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_FindModeIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_FindModeIndex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->FindModeIndex(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_FindModeIndexWithoutError(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_FindModeIndexWithoutError",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_FindModeIndexWithoutError" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_FindModeIndexWithoutError" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_FindModeIndexWithoutError" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->FindModeIndexWithoutError(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Contrast(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Contrast",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Contrast" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Contrast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Contrast" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Contrast(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_NormalizedAsymmetry(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_NormalizedAsymmetry" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->NormalizedAsymmetry();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_DataDot(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_DataDot",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_DataDot" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_DataDot" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->DataDot(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Differentiate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Differentiate" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->Differentiate();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Norm__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Norm",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Norm" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Norm" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Norm(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Norm__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Norm" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Norm();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Norm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_Norm__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_Norm__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Norm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Norm(bool const) const\n"
    "    GWFrames::Waveform::Norm() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormIndex__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_MaxNormIndex",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_MaxNormIndex" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_MaxNormIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->MaxNormIndex(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormIndex__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_MaxNormIndex" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::Waveform const *)arg1)->MaxNormIndex();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormIndex(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_MaxNormIndex__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_MaxNormIndex__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_MaxNormIndex'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::MaxNormIndex(unsigned int const) const\n"
    "    GWFrames::Waveform::MaxNormIndex() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormTime__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_MaxNormTime",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_MaxNormTime" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_MaxNormTime" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->MaxNormTime(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormTime__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_MaxNormTime" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (double)((GWFrames::Waveform const *)arg1)->MaxNormTime();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_MaxNormTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_MaxNormTime__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform_MaxNormTime__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_MaxNormTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::MaxNormTime(unsigned int const) const\n"
    "    GWFrames::Waveform::MaxNormTime() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_RotatePhysicalSystem__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  Quaternions::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quaternions::Quaternion tmp2 ;
  PyObject *item2 ;
  Py_ssize_t i2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_RotatePhysicalSystem",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RotatePhysicalSystem" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      for(i2=0; i2<4; ++i2) {
        item2 = PySequence_GetItem(obj1, i2);
        if(!SWIG_IsOK(SWIG_AsVal_double (item2, &tmp2[i2]))) {
          Py_DECREF(item2);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item2);
      }
      arg2 = &tmp2;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj1, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 2 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp2[0] = (*ptmp2)[0];
      tmp2[1] = (*ptmp2)[1];
      tmp2[2] = (*ptmp2)[2];
      tmp2[3] = (*ptmp2)[3];
      arg2 = &tmp2;
    }
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->RotatePhysicalSystem((Quaternions::Quaternion const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_RotatePhysicalSystem__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  SwigValueWrapper< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_RotatePhysicalSystem",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RotatePhysicalSystem" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_RotatePhysicalSystem" "', argument " "2"" of type '" "std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_RotatePhysicalSystem" "', argument " "2"" of type '" "std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > >""'");
    } else {
      std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > * temp = reinterpret_cast< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->RotatePhysicalSystem(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_RotatePhysicalSystem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform_RotatePhysicalSystem__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void* argp1 = 0;
        // If this is a SWIG-wrapped Quaternion, accept it
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
        if(!_v) {
          // Accept it if this is a sequence of numbers with length 4
          if(PySequence_Check(argv[1]) && PySequence_Size(argv[1])==4) {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            _v = (PyFloat_Check(item) || PyInt_Check(item));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_RotatePhysicalSystem__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_RotatePhysicalSystem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::RotatePhysicalSystem(Quaternions::Quaternion const &)\n"
    "    GWFrames::Waveform::RotatePhysicalSystem(std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_RotateDecompositionBasis__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  Quaternions::Quaternion *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Quaternions::Quaternion tmp2 ;
  PyObject *item2 ;
  Py_ssize_t i2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_RotateDecompositionBasis",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RotateDecompositionBasis" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      for(i2=0; i2<4; ++i2) {
        item2 = PySequence_GetItem(obj1, i2);
        if(!SWIG_IsOK(SWIG_AsVal_double (item2, &tmp2[i2]))) {
          Py_DECREF(item2);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item2);
      }
      arg2 = &tmp2;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj1, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 2 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp2[0] = (*ptmp2)[0];
      tmp2[1] = (*ptmp2)[1];
      tmp2[2] = (*ptmp2)[2];
      tmp2[3] = (*ptmp2)[3];
      arg2 = &tmp2;
    }
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->RotateDecompositionBasis((Quaternions::Quaternion const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_RotateDecompositionBasis__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_RotateDecompositionBasis",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RotateDecompositionBasis" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->RotateDecompositionBasis((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_RotateDecompositionBasis(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        void* argp1 = 0;
        // If this is a SWIG-wrapped Quaternion, accept it
        _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
        if(!_v) {
          // Accept it if this is a sequence of numbers with length 4
          if(PySequence_Check(argv[1]) && PySequence_Size(argv[1])==4) {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            _v = (PyFloat_Check(item) || PyInt_Check(item));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_RotateDecompositionBasis__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PySequence_Check(argv[1])) {
          // If this is a python sequence...
          if(PySequence_Size(argv[1])==0) {
            // and has zero length, accept
            _v = true;
          } else {
            // otherwise...
            PyObject* item0 = PySequence_GetItem(argv[1], 0);
            if(PySequence_Check(item0) && PySequence_Size(item0)==4) {
              // Accept if it's a sequence of sequences with length 4
              PyObject* item00 = PySequence_GetItem(item0, 0);
              _v = (PyFloat_Check(item00) || PyInt_Check(item00));
            } else {
              // Accept if it's a sequence of SWIG-wrapped Quaternions
              void* p = 0;
              _v = SWIG_IsOK(SWIG_ConvertPtr(item0, &p, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            }
          }
        } else {
          // Accept if it's a SWIG-wrapped vector<Quaternion>
          void* p = 0;
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &p, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
        }
      }
      if (_v) {
        return _wrap__Waveform_RotateDecompositionBasis__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_RotateDecompositionBasis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::RotateDecompositionBasis(Quaternions::Quaternion const &)\n"
    "    GWFrames::Waveform::RotateDecompositionBasis(std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_RotateDecompositionBasisOfUncertainties(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_RotateDecompositionBasisOfUncertainties",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_RotateDecompositionBasisOfUncertainties" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->RotateDecompositionBasisOfUncertainties((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LdtVector__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_LdtVector",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LdtVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_LdtVector" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_LdtVector" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'");
    } else {
      std::vector< int,std::allocator< int > > * temp = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->LdtVector(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LdtVector__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LdtVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->LdtVector();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LdtVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_LdtVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform_LdtVector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_LdtVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::LdtVector(std::vector< int,std::allocator< int > >) const\n"
    "    GWFrames::Waveform::LdtVector() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_LLMatrix__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  SwigValueWrapper< std::vector< int,std::allocator< int > > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_LLMatrix",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LLMatrix" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_LLMatrix" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_LLMatrix" "', argument " "2"" of type '" "std::vector< int,std::allocator< int > >""'");
    } else {
      std::vector< int,std::allocator< int > > * temp = reinterpret_cast< std::vector< int,std::allocator< int > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->LLMatrix(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LLMatrix__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_LLMatrix" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->LLMatrix();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = swig::from(static_cast< std::vector<GWFrames::Matrix,std::allocator< GWFrames::Matrix > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_LLMatrix(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_LLMatrix__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_int_std__allocatorT_int_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform_LLMatrix__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_LLMatrix'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::LLMatrix(std::vector< int,std::allocator< int > >) const\n"
    "    GWFrames::Waveform::LLMatrix() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_OShaughnessyEtAlVector__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_OShaughnessyEtAlVector",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_OShaughnessyEtAlVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->OShaughnessyEtAlVector((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_OShaughnessyEtAlVector__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_OShaughnessyEtAlVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->OShaughnessyEtAlVector();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_OShaughnessyEtAlVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_OShaughnessyEtAlVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_OShaughnessyEtAlVector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_OShaughnessyEtAlVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::OShaughnessyEtAlVector(std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::OShaughnessyEtAlVector() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_AngularVelocityVector__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_AngularVelocityVector",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AngularVelocityVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->AngularVelocityVector((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AngularVelocityVector__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AngularVelocityVector" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->AngularVelocityVector();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AngularVelocityVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_AngularVelocityVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_AngularVelocityVector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_AngularVelocityVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::AngularVelocityVector(std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::AngularVelocityVector() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_CorotatingFrame__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_CorotatingFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_CorotatingFrame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->CorotatingFrame((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    npy_intp size = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &size, NPY_OBJECT);
    PyObject** data = static_cast<PyObject**>(PyArray_DATA((PyArrayObject*)resultobj));
    for(npy_intp i=0; i<size; ++i) {
      PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion((*(&result))[i])),
        SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
      if(!qobj) {
        SWIG_fail;
      }
      Py_INCREF(qobj);
      data[i] = qobj;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_CorotatingFrame__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_CorotatingFrame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->CorotatingFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    npy_intp size = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &size, NPY_OBJECT);
    PyObject** data = static_cast<PyObject**>(PyArray_DATA((PyArrayObject*)resultobj));
    for(npy_intp i=0; i<size; ++i) {
      PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion((*(&result))[i])),
        SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
      if(!qobj) {
        SWIG_fail;
      }
      Py_INCREF(qobj);
      data[i] = qobj;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_CorotatingFrame(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_CorotatingFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_CorotatingFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_CorotatingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::CorotatingFrame(std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::CorotatingFrame() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentOrbitalAV__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_PNEquivalentOrbitalAV",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_PNEquivalentOrbitalAV" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->PNEquivalentOrbitalAV((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentOrbitalAV__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_PNEquivalentOrbitalAV" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->PNEquivalentOrbitalAV();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentOrbitalAV(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_PNEquivalentOrbitalAV__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_PNEquivalentOrbitalAV__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_PNEquivalentOrbitalAV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::PNEquivalentOrbitalAV(std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::PNEquivalentOrbitalAV() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentPrecessionalAV__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_PNEquivalentPrecessionalAV",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_PNEquivalentPrecessionalAV" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->PNEquivalentPrecessionalAV((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentPrecessionalAV__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_PNEquivalentPrecessionalAV" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->PNEquivalentPrecessionalAV();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_PNEquivalentPrecessionalAV(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_PNEquivalentPrecessionalAV__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_PNEquivalentPrecessionalAV__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_PNEquivalentPrecessionalAV'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::PNEquivalentPrecessionalAV(std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::PNEquivalentPrecessionalAV() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToOShaughnessyEtAlFrame__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_TransformToOShaughnessyEtAlFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToOShaughnessyEtAlFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToOShaughnessyEtAlFrame((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToOShaughnessyEtAlFrame__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToOShaughnessyEtAlFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToOShaughnessyEtAlFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToOShaughnessyEtAlFrame(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_TransformToOShaughnessyEtAlFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_TransformToOShaughnessyEtAlFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_TransformToOShaughnessyEtAlFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::TransformToOShaughnessyEtAlFrame(std::vector< int,std::allocator< int > > const &)\n"
    "    GWFrames::Waveform::TransformToOShaughnessyEtAlFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToAngularVelocityFrame__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_TransformToAngularVelocityFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToAngularVelocityFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToAngularVelocityFrame((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToAngularVelocityFrame__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToAngularVelocityFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToAngularVelocityFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToAngularVelocityFrame(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_TransformToAngularVelocityFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_TransformToAngularVelocityFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_TransformToAngularVelocityFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::TransformToAngularVelocityFrame(std::vector< int,std::allocator< int > > const &)\n"
    "    GWFrames::Waveform::TransformToAngularVelocityFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToCorotatingFrame__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< int,std::allocator< int > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_TransformToCorotatingFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToCorotatingFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToCorotatingFrame((std::vector< int,std::allocator< int > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToCorotatingFrame__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToCorotatingFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToCorotatingFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToCorotatingFrame(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__Waveform_TransformToCorotatingFrame__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            int* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_TransformToCorotatingFrame__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_TransformToCorotatingFrame'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::TransformToCorotatingFrame(std::vector< int,std::allocator< int > > const &)\n"
    "    GWFrames::Waveform::TransformToCorotatingFrame()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformToInertialFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformToInertialFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformToInertialFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformUncertaintiesToCorotatingFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_TransformUncertaintiesToCorotatingFrame",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformUncertaintiesToCorotatingFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformUncertaintiesToCorotatingFrame((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_TransformUncertaintiesToInertialFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_TransformUncertaintiesToInertialFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->TransformUncertaintiesToInertialFrame();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Interpolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Interpolate",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Interpolate" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Interpolate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Interpolate((std::vector< double,std::allocator< double > > const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Interpolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Interpolate",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Interpolate" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Interpolate((std::vector< double,std::allocator< double > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Interpolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
          }
        }
      }
      if (_v) {
        return _wrap__Waveform_Interpolate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PyArray_Check(argv[1])) {
          _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[1]))==1);
        } else if(PyList_Check(argv[1])) {
          if(PyList_Size(argv[1])==0) {
            _v = true;
          } else {
            PyObject* item = PySequence_GetItem(argv[1], 0);
            double* temp=0;
            _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
          }
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Interpolate__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Interpolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Interpolate(std::vector< double,std::allocator< double > > const &,bool const) const\n"
    "    GWFrames::Waveform::Interpolate(std::vector< double,std::allocator< double > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_InterpolateInPlace(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< double,std::allocator< double > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_InterpolateInPlace",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_InterpolateInPlace" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp2.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp2.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp2[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size = PySequence_Size(obj1);
      temp2.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj1, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp2[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 2");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->InterpolateInPlace((std::vector< double,std::allocator< double > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Segment(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Segment",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Segment" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_Segment" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Segment" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Segment(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_GetAlignmentOfTime",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfTime" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_GetAlignmentOfTime" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfTime" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_GetAlignmentOfTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfTime((GWFrames::Waveform const &)*arg2,arg3,*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_AlignTime",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignTime" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_AlignTime" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_AlignTime" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_AlignTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignTime((GWFrames::Waveform const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  std::vector< int > temp3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_GetAlignmentsOfDecompositionFrameToModes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentsOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg3 = &temp3;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GetAlignmentsOfDecompositionFrameToModes((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    npy_intp size = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &size, NPY_OBJECT);
    PyObject** data = static_cast<PyObject**>(PyArray_DATA((PyArrayObject*)resultobj));
    for(npy_intp i=0; i<size; ++i) {
      PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion((*(&result))[i])),
        SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
      if(!qobj) {
        SWIG_fail;
      }
      Py_INCREF(qobj);
      data[i] = qobj;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< Quaternions::Quaternion > tmp2 ;
  PyObject *itemi2 ;
  PyObject *itemij2 ;
  void *p2 ;
  Py_ssize_t size2 ;
  Py_ssize_t i2 ;
  Py_ssize_t j2 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_GetAlignmentsOfDecompositionFrameToModes",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentsOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PySequence_Check(obj1)) {
      // If this is a python sequence...
      if(PySequence_Size(obj1)==0) {
        // and has zero length...
        tmp2 = std::vector<Quaternions::Quaternion>(0);
      } else {
        // otherwise...
        size2 = PySequence_Size(obj1);
        tmp2 = std::vector<Quaternions::Quaternion>(size2);
        for(i2=0; i2<size2; ++i2) {
          itemi2 = PySequence_GetItem(obj1, i2);
          if(PySequence_Check(itemi2) && PySequence_Size(itemi2)==4) {
            // Accept if it's a sequence of sequences with length 4
            for(j2=0; j2<4; ++j2) {
              itemij2 = PySequence_GetItem(itemi2, j2);
              SWIG_AsVal_double (itemij2, &(tmp2[i2][j2]));
            }
          } else {
            // Accept if it's a sequence of SWIG-wrapped Quaternions
            p2 = 0;
            res2 = SWIG_IsOK(SWIG_ConvertPtr(itemi2, &p2, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!res2) {
              SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be a sequence of objects of type \"Quaternion\".");
            }
            tmp2[i2] = *((Quaternions::Quaternion*)p2);
          }
        }
      }
    } else {
      // Accept if it's a SWIG-wrapped vector<Quaternion>
      void* p2 = &tmp2;
      res2 = SWIG_IsOK(SWIG_ConvertPtr(obj1, &p2, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
      if(!res2) {
        SWIG_exception_fail(SWIG_ArgError(res2), "expected argument 2 to be of type \"vector<Quaternion>\".");
      }
    }
    arg2 = &tmp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GetAlignmentsOfDecompositionFrameToModes((std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    npy_intp size = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &size, NPY_OBJECT);
    PyObject** data = static_cast<PyObject**>(PyArray_DATA((PyArrayObject*)resultobj));
    for(npy_intp i=0; i<size; ++i) {
      PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion((*(&result))[i])),
        SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
      if(!qobj) {
        SWIG_fail;
      }
      Py_INCREF(qobj);
      data[i] = qobj;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PySequence_Check(argv[1])) {
          // If this is a python sequence...
          if(PySequence_Size(argv[1])==0) {
            // and has zero length, accept
            _v = true;
          } else {
            // otherwise...
            PyObject* item0 = PySequence_GetItem(argv[1], 0);
            if(PySequence_Check(item0) && PySequence_Size(item0)==4) {
              // Accept if it's a sequence of sequences with length 4
              PyObject* item00 = PySequence_GetItem(item0, 0);
              _v = (PyFloat_Check(item00) || PyInt_Check(item00));
            } else {
              // Accept if it's a sequence of SWIG-wrapped Quaternions
              void* p = 0;
              _v = SWIG_IsOK(SWIG_ConvertPtr(item0, &p, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            }
          }
        } else {
          // Accept if it's a SWIG-wrapped vector<Quaternion>
          void* p = 0;
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &p, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
        }
      }
      if (_v) {
        return _wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = false;
        if(PySequence_Check(argv[1])) {
          // If this is a python sequence...
          if(PySequence_Size(argv[1])==0) {
            // and has zero length, accept
            _v = true;
          } else {
            // otherwise...
            PyObject* item0 = PySequence_GetItem(argv[1], 0);
            if(PySequence_Check(item0) && PySequence_Size(item0)==4) {
              // Accept if it's a sequence of sequences with length 4
              PyObject* item00 = PySequence_GetItem(item0, 0);
              _v = (PyFloat_Check(item00) || PyInt_Check(item00));
            } else {
              // Accept if it's a sequence of SWIG-wrapped Quaternions
              void* p = 0;
              _v = SWIG_IsOK(SWIG_ConvertPtr(item0, &p, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            }
          }
        } else {
          // Accept if it's a SWIG-wrapped vector<Quaternion>
          void* p = 0;
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[1], &p, SWIGTYPE_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0 | 0 ));
        }
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              int* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
            }
          }
        }
        if (_v) {
          return _wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_GetAlignmentsOfDecompositionFrameToModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::GetAlignmentsOfDecompositionFrameToModes(std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &,std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::GetAlignmentsOfDecompositionFrameToModes(std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  std::vector< int > temp4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Quaternions::Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg4 = &temp4;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Quaternions::Quaternion(static_cast< const Quaternions::Quaternion& >(result))), SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Quaternions::Quaternion result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new Quaternions::Quaternion(static_cast< const Quaternions::Quaternion& >(result))), SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  Quaternions::Quaternion *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  std::vector< int > temp5 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Quaternions__Quaternion,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "4"" of type '" "Quaternions::Quaternion &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "4"" of type '" "Quaternions::Quaternion &""'"); 
  }
  arg4 = reinterpret_cast< Quaternions::Quaternion * >(argp4);
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp5.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp5.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp5[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp5.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp5[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 5");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg5 = &temp5;
  }
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3,*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  Quaternions::Quaternion *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Quaternions__Quaternion,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "4"" of type '" "Quaternions::Quaternion &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "4"" of type '" "Quaternions::Quaternion &""'"); 
  }
  arg4 = reinterpret_cast< Quaternions::Quaternion * >(argp4);
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3,*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignDecompositionFrameToModes__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  std::vector< int,std::allocator< int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  std::vector< int > temp4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_AlignDecompositionFrameToModes",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3,(std::vector< int,std::allocator< int > > const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignDecompositionFrameToModes__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  Quaternions::Quaternion *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  Quaternions::Quaternion tmp3 ;
  PyObject *item3 ;
  Py_ssize_t i3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_AlignDecompositionFrameToModes",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PySequence_Check(obj2)) {
      for(i3=0; i3<4; ++i3) {
        item3 = PySequence_GetItem(obj2, i3);
        if(!SWIG_IsOK(SWIG_AsVal_double (item3, &tmp3[i3]))) {
          Py_DECREF(item3);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item3);
      }
      arg3 = &tmp3;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj2, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 3 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp3[0] = (*ptmp2)[0];
      tmp3[1] = (*ptmp2)[1];
      tmp3[2] = (*ptmp2)[2];
      tmp3[3] = (*ptmp2)[3];
      arg3 = &tmp3;
    }
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignDecompositionFrameToModes(arg2,(Quaternions::Quaternion const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  Quaternions::Quaternion *arg4 = 0 ;
  Quaternions::Quaternion *arg5 = 0 ;
  std::vector< int,std::allocator< int > > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Quaternions::Quaternion tmp4 ;
  PyObject *item4 ;
  Py_ssize_t i4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  std::vector< int > temp6 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    if(PySequence_Check(obj3)) {
      for(i4=0; i4<4; ++i4) {
        item4 = PySequence_GetItem(obj3, i4);
        if(!SWIG_IsOK(SWIG_AsVal_double (item4, &tmp4[i4]))) {
          Py_DECREF(item4);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item4);
      }
      arg4 = &tmp4;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj3, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 4 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp4[0] = (*ptmp2)[0];
      tmp4[1] = (*ptmp2)[1];
      tmp4[2] = (*ptmp2)[2];
      tmp4[3] = (*ptmp2)[3];
      arg4 = &tmp4;
    }
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Quaternions__Quaternion,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "5"" of type '" "Quaternions::Quaternion &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "5"" of type '" "Quaternions::Quaternion &""'"); 
  }
  arg5 = reinterpret_cast< Quaternions::Quaternion * >(argp5);
  {
    if(PyArray_Check(obj5)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj5);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp6.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp6.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp6[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj5)) {
      Py_ssize_t size = PySequence_Size(obj5);
      temp6.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj5, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp6[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 6");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg6 = &temp6;
  }
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,arg3,(Quaternions::Quaternion const &)*arg4,*arg5,(std::vector< int,std::allocator< int > > const &)*arg6);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_5(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  Quaternions::Quaternion *arg4 = 0 ;
  Quaternions::Quaternion *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Quaternions::Quaternion tmp4 ;
  PyObject *item4 ;
  Py_ssize_t i4 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_Waveform_GetAlignmentOfDecompositionFrameToModes",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    if(PySequence_Check(obj3)) {
      for(i4=0; i4<4; ++i4) {
        item4 = PySequence_GetItem(obj3, i4);
        if(!SWIG_IsOK(SWIG_AsVal_double (item4, &tmp4[i4]))) {
          Py_DECREF(item4);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item4);
      }
      arg4 = &tmp4;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj3, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 4 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp4[0] = (*ptmp2)[0];
      tmp4[1] = (*ptmp2)[1];
      tmp4[2] = (*ptmp2)[2];
      tmp4[3] = (*ptmp2)[3];
      arg4 = &tmp4;
    }
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_Quaternions__Quaternion,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "5"" of type '" "Quaternions::Quaternion &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfDecompositionFrameToModes" "', argument " "5"" of type '" "Quaternions::Quaternion &""'"); 
  }
  arg5 = reinterpret_cast< Quaternions::Quaternion * >(argp5);
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfDecompositionFrameToModes(arg2,arg3,(Quaternions::Quaternion const &)*arg4,*arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfDecompositionFrameToModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Quaternions__Quaternion, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                int* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
              }
            }
          }
          if (_v) {
            return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void* argp1 = 0;
            // If this is a SWIG-wrapped Quaternion, accept it
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!_v) {
              // Accept it if this is a sequence of numbers with length 4
              if(PySequence_Check(argv[3]) && PySequence_Size(argv[3])==4) {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                _v = (PyFloat_Check(item) || PyInt_Check(item));
              }
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_Quaternions__Quaternion, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Quaternions__Quaternion, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              _v = false;
              if(PyArray_Check(argv[4])) {
                _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[4]))==1);
              } else if(PyList_Check(argv[4])) {
                if(PyList_Size(argv[4])==0) {
                  _v = true;
                } else {
                  PyObject* item = PySequence_GetItem(argv[4], 0);
                  int* temp=0;
                  _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
                }
              }
            }
            if (_v) {
              return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void* argp1 = 0;
            // If this is a SWIG-wrapped Quaternion, accept it
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!_v) {
              // Accept it if this is a sequence of numbers with length 4
              if(PySequence_Check(argv[3]) && PySequence_Size(argv[3])==4) {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                _v = (PyFloat_Check(item) || PyInt_Check(item));
              }
            }
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_Quaternions__Quaternion, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = false;
                if(PyArray_Check(argv[5])) {
                  _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[5]))==1);
                } else if(PyList_Check(argv[5])) {
                  if(PyList_Size(argv[5])==0) {
                    _v = true;
                  } else {
                    PyObject* item = PySequence_GetItem(argv[5], 0);
                    int* temp=0;
                    _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
                  }
                }
              }
              if (_v) {
                return _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_GetAlignmentOfDecompositionFrameToModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,Quaternions::Quaternion const &,std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,Quaternions::Quaternion const &) const\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,Quaternions::Quaternion const &,Quaternions::Quaternion &,std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,Quaternions::Quaternion const &,Quaternions::Quaternion &) const\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,double const,Quaternions::Quaternion const &,Quaternions::Quaternion &,std::vector< int,std::allocator< int > > const &) const\n"
    "    GWFrames::Waveform::GetAlignmentOfDecompositionFrameToModes(double const,double const,Quaternions::Quaternion const &,Quaternions::Quaternion &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignDecompositionFrameToModes__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  Quaternions::Quaternion *arg4 = 0 ;
  std::vector< int,std::allocator< int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Quaternions::Quaternion tmp4 ;
  PyObject *item4 ;
  Py_ssize_t i4 ;
  std::vector< int > temp5 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_Waveform_AlignDecompositionFrameToModes",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    if(PySequence_Check(obj3)) {
      for(i4=0; i4<4; ++i4) {
        item4 = PySequence_GetItem(obj3, i4);
        if(!SWIG_IsOK(SWIG_AsVal_double (item4, &tmp4[i4]))) {
          Py_DECREF(item4);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item4);
      }
      arg4 = &tmp4;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj3, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 4 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp4[0] = (*ptmp2)[0];
      tmp4[1] = (*ptmp2)[1];
      tmp4[2] = (*ptmp2)[2];
      tmp4[3] = (*ptmp2)[3];
      arg4 = &tmp4;
    }
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp5.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp5.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp5[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp5.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp5[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 5");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignDecompositionFrameToModes(arg2,arg3,(Quaternions::Quaternion const &)*arg4,(std::vector< int,std::allocator< int > > const &)*arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignDecompositionFrameToModes__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  Quaternions::Quaternion *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Quaternions::Quaternion tmp4 ;
  PyObject *item4 ;
  Py_ssize_t i4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_AlignDecompositionFrameToModes",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_AlignDecompositionFrameToModes" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    if(PySequence_Check(obj3)) {
      for(i4=0; i4<4; ++i4) {
        item4 = PySequence_GetItem(obj3, i4);
        if(!SWIG_IsOK(SWIG_AsVal_double (item4, &tmp4[i4]))) {
          Py_DECREF(item4);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item4);
      }
      arg4 = &tmp4;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj3, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 4 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp4[0] = (*ptmp2)[0];
      tmp4[1] = (*ptmp2)[1];
      tmp4[2] = (*ptmp2)[2];
      tmp4[3] = (*ptmp2)[3];
      arg4 = &tmp4;
    }
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignDecompositionFrameToModes(arg2,arg3,(Quaternions::Quaternion const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignDecompositionFrameToModes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          return _wrap__Waveform_AlignDecompositionFrameToModes__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void* argp1 = 0;
            // If this is a SWIG-wrapped Quaternion, accept it
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!_v) {
              // Accept it if this is a sequence of numbers with length 4
              if(PySequence_Check(argv[3]) && PySequence_Size(argv[3])==4) {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                _v = (PyFloat_Check(item) || PyInt_Check(item));
              }
            }
          }
          if (_v) {
            return _wrap__Waveform_AlignDecompositionFrameToModes__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void* argp1 = 0;
          // If this is a SWIG-wrapped Quaternion, accept it
          _v = SWIG_IsOK(SWIG_ConvertPtr(argv[2], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
          if(!_v) {
            // Accept it if this is a sequence of numbers with length 4
            if(PySequence_Check(argv[2]) && PySequence_Size(argv[2])==4) {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              _v = (PyFloat_Check(item) || PyInt_Check(item));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                int* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
              }
            }
          }
          if (_v) {
            return _wrap__Waveform_AlignDecompositionFrameToModes__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void* argp1 = 0;
            // If this is a SWIG-wrapped Quaternion, accept it
            _v = SWIG_IsOK(SWIG_ConvertPtr(argv[3], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
            if(!_v) {
              // Accept it if this is a sequence of numbers with length 4
              if(PySequence_Check(argv[3]) && PySequence_Size(argv[3])==4) {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                _v = (PyFloat_Check(item) || PyInt_Check(item));
              }
            }
          }
          if (_v) {
            {
              _v = false;
              if(PyArray_Check(argv[4])) {
                _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[4]))==1);
              } else if(PyList_Check(argv[4])) {
                if(PyList_Size(argv[4])==0) {
                  _v = true;
                } else {
                  PyObject* item = PySequence_GetItem(argv[4], 0);
                  int* temp=0;
                  _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
                }
              }
            }
            if (_v) {
              return _wrap__Waveform_AlignDecompositionFrameToModes__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_AlignDecompositionFrameToModes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::AlignDecompositionFrameToModes(double const,Quaternions::Quaternion const &,std::vector< int,std::allocator< int > > const &)\n"
    "    GWFrames::Waveform::AlignDecompositionFrameToModes(double const,Quaternions::Quaternion const &)\n"
    "    GWFrames::Waveform::AlignDecompositionFrameToModes(double const,double const,Quaternions::Quaternion const &,std::vector< int,std::allocator< int > > const &)\n"
    "    GWFrames::Waveform::AlignDecompositionFrameToModes(double const,double const,Quaternions::Quaternion const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  Quaternions::Quaternion *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  Quaternions::Quaternion quat_temp4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &quat_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_GetAlignmentOfFrame",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfFrame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_GetAlignmentOfFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_GetAlignmentOfFrame" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfFrame((GWFrames::Waveform const &)*arg2,arg3,*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion(*arg4)),
      SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
    if(!qobj) {
      SWIG_fail;
    }
    Py_INCREF(qobj);
    resultobj = SWIG_Python_AppendOutput(resultobj, qobj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_AlignFrame",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_AlignFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_AlignFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_AlignFrame" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignFrame((GWFrames::Waveform const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GetAlignmentOfTimeAndFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double *arg5 = 0 ;
  Quaternions::Quaternion *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  Quaternions::Quaternion quat_temp6 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  arg5 = &temp5;
  {
    arg6 = &quat_temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_GetAlignmentOfTimeAndFrame",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GetAlignmentOfTimeAndFrame" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_GetAlignmentOfTimeAndFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_GetAlignmentOfTimeAndFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_GetAlignmentOfTimeAndFrame" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_GetAlignmentOfTimeAndFrame" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      ((GWFrames::Waveform const *)arg1)->GetAlignmentOfTimeAndFrame((GWFrames::Waveform const &)*arg2,arg3,arg4,*arg5,*arg6);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  {
    PyObject* qobj = SWIG_NewPointerObj((new Quaternions::Quaternion(*arg6)),
      SWIGTYPE_p_Quaternions__Quaternion, SWIG_POINTER_OWN);
    if(!qobj) {
      SWIG_fail;
    }
    Py_INCREF(qobj);
    resultobj = SWIG_Python_AppendOutput(resultobj, qobj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_AlignTimeAndFrame(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_AlignTimeAndFrame",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_AlignTimeAndFrame" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_AlignTimeAndFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_AlignTimeAndFrame" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_AlignTimeAndFrame" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_AlignTimeAndFrame" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->AlignTimeAndFrame((GWFrames::Waveform const &)*arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Compare__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_Compare",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Compare" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Compare" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_Compare" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Compare((GWFrames::Waveform const &)*arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Compare__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Compare",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Compare" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Compare" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Compare((GWFrames::Waveform const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Compare__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Compare",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Compare" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Compare" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Compare((GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Compare(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform_Compare__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Compare__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap__Waveform_Compare__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Compare'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Compare(GWFrames::Waveform const &,double const,double const) const\n"
    "    GWFrames::Waveform::Compare(GWFrames::Waveform const &,double const) const\n"
    "    GWFrames::Waveform::Compare(GWFrames::Waveform const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_Hybridize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:_Waveform_Hybridize",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Hybridize" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Hybridize" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Hybridize" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Hybridize" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_Hybridize" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "_Waveform_Hybridize" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Hybridize((GWFrames::Waveform const &)*arg2,arg3,arg4,arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Hybridize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_Hybridize",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Hybridize" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Hybridize" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Hybridize" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Hybridize" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_Hybridize" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Hybridize((GWFrames::Waveform const &)*arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Hybridize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap__Waveform_Hybridize__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap__Waveform_Hybridize__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Hybridize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Hybridize(GWFrames::Waveform const &,double const,double const,double const) const\n"
    "    GWFrames::Waveform::Hybridize(GWFrames::Waveform const &,double const,double const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_EvaluateAtPoint__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::vector< std::complex< double >,std::allocator< std::complex< double > > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_EvaluateAtPoint",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->EvaluateAtPoint(arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_CDOUBLE);
    std_complex_double* data = static_cast<std_complex_double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_EvaluateAtPoint__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_EvaluateAtPoint",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_EvaluateAtPoint" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->EvaluateAtPoint(arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_EvaluateAtPoint(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_EvaluateAtPoint__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap__Waveform_EvaluateAtPoint__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_EvaluateAtPoint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::EvaluateAtPoint(double const,double const) const\n"
    "    GWFrames::Waveform::EvaluateAtPoint(double const,double const,unsigned int const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform_InterpolateToPoint(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  std::complex< double > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_Waveform_InterpolateToPoint",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_InterpolateToPoint" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform_InterpolateToPoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_InterpolateToPoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "_Waveform_InterpolateToPoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->InterpolateToPoint(arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_complex_Sl_double_Sg_(static_cast< std::complex<double> >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___add__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___add__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___add__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform___add__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform___add__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator +((GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__Waveform___add__)

SWIGINTERN PyObject *_wrap__Waveform___sub__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___sub__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___sub__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform___sub__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform___sub__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator -((GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__Waveform___sub__)

SWIGINTERN PyObject *_wrap__Waveform___mul____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___mul__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform___mul__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform___mul__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator *((GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___div____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___div__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___div__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform___div__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform___div__" "', argument " "2"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator /((GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___mul____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___mul__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___mul__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform___mul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator *(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___mul__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform___mul____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__Waveform___mul__)

SWIGINTERN PyObject *_wrap__Waveform___div____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform___div__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___div__" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_Waveform___div__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->operator /(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform___div__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform___div____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__Waveform___div____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__Waveform___div__)

SWIGINTERN PyObject *_wrap__Waveform_NPEdth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_NPEdth" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->NPEdth();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_NPEdthBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_NPEdthBar" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->NPEdthBar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GHPEdth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GHPEdth" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GHPEdth();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_GHPEdthBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_GHPEdthBar" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->GHPEdthBar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_IntegrateNPEdth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_IntegrateNPEdth" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->IntegrateNPEdth();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_IntegrateNPEdthBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_IntegrateNPEdthBar" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->IntegrateNPEdthBar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_IntegrateGHPEdth(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_IntegrateGHPEdth" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->IntegrateGHPEdth();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_IntegrateGHPEdthBar(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GWFrames::Waveform result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_IntegrateGHPEdthBar" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->IntegrateGHPEdthBar();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_ApplySupertranslation(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< std::complex< double >,std::allocator< std::complex< double > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_ApplySupertranslation",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_ApplySupertranslation" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_ApplySupertranslation" "', argument " "2"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_ApplySupertranslation" "', argument " "2"" of type '" "std::vector< std::complex< double >,std::allocator< std::complex< double > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::complex< double >,std::allocator< std::complex< double > > > * >(argp2);
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->ApplySupertranslation(*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_BoostPsi4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double > > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_BoostPsi4",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_BoostPsi4" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp2.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp2[i].resize(size1);
      }
      double* array = static_cast<double*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(double);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(double);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp2[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size0 = PySequence_Size(obj1);
      temp2.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj1, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp2[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_double (item1, &temp2[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"double\" in argument 2");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->BoostPsi4((std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Translate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double > > temp2 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Translate",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Translate" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    if(PyArray_Check(obj1)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj1);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp2.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp2[i].resize(size1);
      }
      double* array = static_cast<double*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(double);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(double);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp2[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj1)) {
      Py_ssize_t size0 = PySequence_Size(obj1);
      temp2.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj1, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp2[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_double (item1, &temp2[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"double\" in argument 2");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected.");
    }
    arg2 = &temp2;
  }
  {
    try {
      result = ((GWFrames::Waveform const *)arg1)->Translate((std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveform(static_cast< const GWFrames::Waveform& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Output__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_Waveform_Output",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Output" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_Waveform_Output" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    try {
      result = (GWFrames::Waveform *) &((GWFrames::Waveform const *)arg1)->Output((std::string const &)*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Output__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_Waveform_Output",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform_Output" "', argument " "1"" of type '" "GWFrames::Waveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_Waveform_Output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_Waveform_Output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (GWFrames::Waveform *) &((GWFrames::Waveform const *)arg1)->Output((std::string const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__Waveform_Output(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap__Waveform_Output__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__Waveform_Output__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_Waveform_Output'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveform::Output(std::string const &,unsigned int const) const\n"
    "    GWFrames::Waveform::Output(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__Waveform___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = (GWFrames::Waveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_Waveform___str__" "', argument " "1"" of type '" "GWFrames::Waveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  {
    try {
      result = GWFrames_Waveform___str__(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AlignWaveforms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveform *arg1 = 0 ;
  GWFrames::Waveform *arg2 = 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg4 = 0 ;
  std::vector< double,std::allocator< double > > *arg5 = 0 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< double > temp3 ;
  std::vector< std::vector< double > > temp4 ;
  std::vector< double > temp5 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:AlignWaveforms",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_GWFrames__Waveform,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AlignWaveforms" "', argument " "1"" of type '" "GWFrames::Waveform &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlignWaveforms" "', argument " "1"" of type '" "GWFrames::Waveform &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveform * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AlignWaveforms" "', argument " "2"" of type '" "GWFrames::Waveform &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AlignWaveforms" "', argument " "2"" of type '" "GWFrames::Waveform &""'"); 
  }
  arg2 = reinterpret_cast< GWFrames::Waveform * >(argp2);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size0 = PyArray_DIM(xa, 0);
      const std::size_t size1 = PyArray_DIM(xa, 1);
      temp4.resize(size0);
      for(unsigned int i=0; i<size0; ++i) {
        temp4[i].resize(size1);
      }
      double* array = static_cast<double*>(PyArray_DATA(xa));
      const npy_intp strides0 = PyArray_STRIDE(xa, 0)/sizeof(double);
      const npy_intp strides1 = PyArray_STRIDE(xa, 1)/sizeof(double);
      for (std::size_t i = 0; i < size0; ++i) {
        for (std::size_t j = 0; j< size1; ++j) {
          temp4[i][j] = array[i*strides0+j*strides1];
        }
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size0 = PySequence_Size(obj3);
      temp4.resize(size0);
      PyObject* item0;
      PyObject* item1;
      for(Py_ssize_t i=0; i<size0; ++i) {
        item0 = PySequence_GetItem(obj3, i);
        Py_ssize_t size1 = PySequence_Size(item0);
        temp4[i].resize(size1);
        for(Py_ssize_t j=0; j<size1; ++j) {
          item1 = PySequence_GetItem(item0, j);
          if(!SWIG_IsOK(SWIG_AsVal_double (item1, &temp4[i][j]))) {
            Py_DECREF(item1);
            SWIG_exception(SWIG_TypeError, "expected items of sequence to be sequences of type " \
              "\"double\" in argument 4");
          }
          Py_DECREF(item1);
        }
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected.");
    }
    arg4 = &temp4;
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp5.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp5.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp5[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp5.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp5[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 5");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg5 = &temp5;
  }
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "AlignWaveforms" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "AlignWaveforms" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      GWFrames::AlignWaveforms(*arg1,*arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > const &)*arg4,(std::vector< double,std::allocator< double > > const &)*arg5,arg6,arg7);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_Waveforms__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveforms *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Waveforms",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Waveforms" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    try {
      result = (GWFrames::Waveforms *)new GWFrames::Waveforms(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveforms, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Waveforms__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::Waveforms *)new GWFrames::Waveforms();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveforms, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Waveforms__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveforms *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Waveforms",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__Waveforms,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Waveforms" "', argument " "1"" of type '" "GWFrames::Waveforms const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Waveforms" "', argument " "1"" of type '" "GWFrames::Waveforms const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  {
    try {
      result = (GWFrames::Waveforms *)new GWFrames::Waveforms((GWFrames::Waveforms const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveforms, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Waveforms__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveforms *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Waveforms",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Waveforms" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Waveforms" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > * >(argp1);
  {
    try {
      result = (GWFrames::Waveforms *)new GWFrames::Waveforms((std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveforms, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Waveforms(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Waveforms__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Waveforms__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Waveforms__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_Waveforms__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Waveforms'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveforms::Waveforms(int const)\n"
    "    GWFrames::Waveforms::Waveforms()\n"
    "    GWFrames::Waveforms::Waveforms(GWFrames::Waveforms const &)\n"
    "    GWFrames::Waveforms::Waveforms(std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Waveforms(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Waveforms" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Waveforms___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms___getitem__" "', argument " "1"" of type '" "GWFrames::Waveforms const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveforms___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &((GWFrames::Waveforms const *)arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::Waveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Waveforms___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms___getitem__" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveforms___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (GWFrames::Waveform *) &(arg1)->operator [](arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Waveforms___getitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Waveforms___getitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Waveforms___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveforms::operator [](int const) const\n"
    "    GWFrames::Waveforms::operator [](int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Waveforms_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_clear" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  {
    try {
      (arg1)->clear();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_size" "', argument " "1"" of type '" "GWFrames::Waveforms const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  {
    try {
      result = (unsigned int)((GWFrames::Waveforms const *)arg1)->size();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_SetCommonTime__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Waveforms_SetCommonTime",&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_SetCommonTime" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveforms_SetCommonTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveforms_SetCommonTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Waveforms_SetCommonTime" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      (arg1)->SetCommonTime(*arg2,arg3,arg4,arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_SetCommonTime__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Waveforms_SetCommonTime",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_SetCommonTime" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveforms_SetCommonTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Waveforms_SetCommonTime" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetCommonTime(*arg2,arg3,arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_SetCommonTime__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Waveforms_SetCommonTime",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_SetCommonTime" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Waveforms_SetCommonTime" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->SetCommonTime(*arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_SetCommonTime__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Waveforms_SetCommonTime",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_SetCommonTime" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_SetCommonTime" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  {
    try {
      (arg1)->SetCommonTime(*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_SetCommonTime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Waveforms_SetCommonTime__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Waveforms_SetCommonTime__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Waveforms_SetCommonTime__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Waveforms_SetCommonTime__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Waveforms_SetCommonTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveforms::SetCommonTime(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &,double const,double const,double const)\n"
    "    GWFrames::Waveforms::SetCommonTime(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &,double const,double const)\n"
    "    GWFrames::Waveforms::SetCommonTime(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &,double const)\n"
    "    GWFrames::Waveforms::SetCommonTime(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Waveforms_Extrapolate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< int > temp3 ;
  std::vector< double > temp4 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  GWFrames::Waveforms result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Waveforms_Extrapolate",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_Extrapolate" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_Extrapolate" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_Extrapolate" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (arg1)->Extrapolate(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveforms(static_cast< const GWFrames::Waveforms& >(result))), SWIGTYPE_p_GWFrames__Waveforms, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_Extrapolate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *arg2 = 0 ;
  std::vector< int,std::allocator< int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  GWFrames::Waveforms result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Waveforms_Extrapolate",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms_Extrapolate" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Waveforms_Extrapolate" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms_Extrapolate" "', argument " "2"" of type '" "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > * >(argp2);
  {
    if(PyArray_Check(obj2)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj2);
      if(PyArray_TYPE(xa) != NPY_INT) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'int' expected."	\
          " Make sure that the numpy array use dtype=int.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      int* array = static_cast<int*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(int);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj2)) {
      Py_ssize_t size = PySequence_Size(obj2);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj2, i);
        if(!SWIG_IsOK(SWIG_AsVal_int (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"int\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'int' expected. " \
        "Make sure that the numpy array use dtype=int.");
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (arg1)->Extrapolate(*arg2,(std::vector< int,std::allocator< int > > const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new GWFrames::Waveforms(static_cast< const GWFrames::Waveforms& >(result))), SWIGTYPE_p_GWFrames__Waveforms, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Waveforms_Extrapolate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              int* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
            }
          }
        }
        if (_v) {
          return _wrap_Waveforms_Extrapolate__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__Waveforms, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              int* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_int (item, temp));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            return _wrap_Waveforms_Extrapolate__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Waveforms_Extrapolate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::Waveforms::Extrapolate(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &,std::vector< int,std::allocator< int > > const &,std::vector< double,std::allocator< double > > const &)\n"
    "    GWFrames::Waveforms::Extrapolate(std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > &,std::vector< int,std::allocator< int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Waveforms___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::Waveforms *arg1 = (GWFrames::Waveforms *) 0 ;
  int arg2 ;
  GWFrames::Waveform *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Waveforms___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__Waveforms, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Waveforms___setitem__" "', argument " "1"" of type '" "GWFrames::Waveforms *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::Waveforms * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Waveforms___setitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Waveforms___setitem__" "', argument " "3"" of type '" "GWFrames::Waveform const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Waveforms___setitem__" "', argument " "3"" of type '" "GWFrames::Waveform const &""'"); 
  }
  arg3 = reinterpret_cast< GWFrames::Waveform * >(argp3);
  {
    try {
      GWFrames_Waveforms___setitem__(arg1,arg2,(GWFrames::Waveform const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &self;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_iterator" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (swig::SwigPyIterator *)std_vector_Sl_GWFrames_Waveform_Sg__iterator(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGPY_UNARYFUNC_CLOSURE(_wrap__vectorW_iterator)

SWIGINTERN PyObject *_wrap__vectorW___nonzero__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___nonzero__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_GWFrames_Waveform_Sg____nonzero__((std::vector< GWFrames::Waveform > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_INQUIRY_CLOSURE(_wrap__vectorW___nonzero__)

SWIGINTERN PyObject *_wrap__vectorW___bool__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___bool__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (bool)std_vector_Sl_GWFrames_Waveform_Sg____bool__((std::vector< GWFrames::Waveform > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___len__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___len__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = std_vector_Sl_GWFrames_Waveform_Sg____len__((std::vector< GWFrames::Waveform > const *)arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap__vectorW___len__)

SWIGINTERN PyObject *_wrap__vectorW_pop(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::value_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_pop" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      try {
        result = std_vector_Sl_GWFrames_Waveform_Sg__pop(arg1);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< GWFrames::Waveform >::value_type(static_cast< const std::vector< GWFrames::Waveform >::value_type& >(result))), SWIGTYPE_p_GWFrames__Waveform, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___getslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  std::vector< GWFrames::Waveform >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW___getslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___getslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___getslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorW___getslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val3);
  {
    try {
      try {
        result = (std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *)std_vector_Sl_GWFrames_Waveform_Sg____getslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setslice____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  std::vector< GWFrames::Waveform >::difference_type arg3 ;
  std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_vectorW___setslice__",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___setslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___setslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorW___setslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val3);
  {
    std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *ptr = (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_vectorW___setslice__" "', argument " "4"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW___setslice__" "', argument " "4"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____setslice____SWIG_0(arg1,arg2,arg3,(std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)*arg4);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setslice____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  std::vector< GWFrames::Waveform >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW___setslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___setslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___setslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorW___setslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____setslice____SWIG_0(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setslice__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap__vectorW___setslice____SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__vectorW___setslice____SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::__setslice__(std::vector< GWFrames::Waveform >::difference_type,std::vector< GWFrames::Waveform >::difference_type,std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)\n"
    "    std::vector< GWFrames::Waveform >::__setslice__(std::vector< GWFrames::Waveform >::difference_type,std::vector< GWFrames::Waveform >::difference_type)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorW___delslice__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  std::vector< GWFrames::Waveform >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW___delslice__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___delslice__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___delslice__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorW___delslice__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____delslice__(arg1,arg2,arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___delitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___delitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___delitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____delitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___getitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___getitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        result = (std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *)std_vector_Sl_GWFrames_Waveform_Sg____getitem____SWIG_0(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setitem____SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *ptr = (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorW___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW___setitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___delitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW___delitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___delitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    if (!PySlice_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) obj1;
  }
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____delitem____SWIG_1(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      catch(std::invalid_argument &_e) {
        SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorW___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorW___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::__delitem__(std::vector< GWFrames::Waveform >::difference_type)\n"
    "    std::vector< GWFrames::Waveform >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorW___getitem____SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Waveform >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW___getitem__",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___getitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___getitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  {
    try {
      try {
        result = (std::vector< GWFrames::Waveform >::value_type *) &std_vector_Sl_GWFrames_Waveform_Sg____getitem____SWIG_1((std::vector< GWFrames::Waveform > const *)arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorW___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorW___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::__getitem__(PySliceObject *)\n"
    "    std::vector< GWFrames::Waveform >::__getitem__(std::vector< GWFrames::Waveform >::difference_type) const\n");
  return 0;
}


SWIGPY_BINARYFUNC_CLOSURE(_wrap__vectorW___getitem__)

SWIGINTERN PyObject *_wrap__vectorW___setitem____SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::difference_type arg2 ;
  std::vector< GWFrames::Waveform >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW___setitem__",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW___setitem__" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW___setitem__" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorW___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW___setitem__" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp3);
  {
    try {
      try {
        std_vector_Sl_GWFrames_Waveform_Sg____setitem____SWIG_2(arg1,arg2,(GWFrames::Waveform const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
      }
      ;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap__vectorW___setitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorW___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorW___setitem____SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::__setitem__(PySliceObject *,std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > const &)\n"
    "    std::vector< GWFrames::Waveform >::__setitem__(PySliceObject *)\n"
    "    std::vector< GWFrames::Waveform >::__setitem__(std::vector< GWFrames::Waveform >::difference_type,std::vector< GWFrames::Waveform >::value_type const &)\n");
  return 0;
}


SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap__vectorW___setitem__)

SWIGINTERN PyObject *_wrap__vectorW_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_append",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_append" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorW_append" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_append" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp2);
  {
    try {
      std_vector_Sl_GWFrames_Waveform_Sg__append(arg1,(GWFrames::Waveform const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new__vectorW__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (std::vector< GWFrames::Waveform > *)new std::vector< GWFrames::Waveform >();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__vectorW__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Waveform > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__vectorW",&obj1)) SWIG_fail;
  {
    std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *ptr = (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__vectorW" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__vectorW" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (std::vector< GWFrames::Waveform > *)new std::vector< GWFrames::Waveform >((std::vector< GWFrames::Waveform > const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorW_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_empty" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (bool)((std::vector< GWFrames::Waveform > const *)arg1)->empty();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_size" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Waveform > const *)arg1)->size();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_clear" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      (arg1)->clear();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_swap(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_swap",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_swap" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorW_swap" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_swap" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp2);
  {
    try {
      (arg1)->swap(*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_get_allocator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::allocator< GWFrames::Waveform > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_get_allocator" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Waveform > const *)arg1)->get_allocator();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< GWFrames::Waveform >::allocator_type(static_cast< const std::vector< GWFrames::Waveform >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_GWFrames__Waveform_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_begin" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (arg1)->begin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_end" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (arg1)->end();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_rbegin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_rbegin" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (arg1)->rbegin();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_rend(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::reverse_iterator result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_rend" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (arg1)->rend();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new__vectorW__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Waveform > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__vectorW",&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__vectorW" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val1);
  {
    try {
      result = (std::vector< GWFrames::Waveform > *)new std::vector< GWFrames::Waveform >(arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorW_pop_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_pop_back" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      (arg1)->pop_back();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_resize__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_resize",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_resize" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW_resize" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val2);
  {
    try {
      (arg1)->resize(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj1 = 0 ;
  std::vector< GWFrames::Waveform >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_erase",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_erase" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_GWFrames_Waveform_Sg__erase__SWIG_0(arg1,arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::iterator arg2 ;
  std::vector< GWFrames::Waveform >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Waveform >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW_erase",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_erase" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_erase" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
    }
  }
  {
    try {
      result = std_vector_Sl_GWFrames_Waveform_Sg__erase__SWIG_1(arg1,arg2,arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap__vectorW_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap__vectorW_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::erase(std::vector< GWFrames::Waveform >::iterator)\n"
    "    std::vector< GWFrames::Waveform >::erase(std::vector< GWFrames::Waveform >::iterator,std::vector< GWFrames::Waveform >::iterator)\n");
  return 0;
}


SWIGINTERN int _wrap_new__vectorW__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform >::size_type arg1 ;
  std::vector< GWFrames::Waveform >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Waveform > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new__vectorW",&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new__vectorW" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg1 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj2, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new__vectorW" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__vectorW" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp2);
  {
    try {
      result = (std::vector< GWFrames::Waveform > *)new std::vector< GWFrames::Waveform >(arg1,(std::vector< GWFrames::Waveform >::value_type const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__vectorW(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__vectorW__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new__vectorW__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__vectorW__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new__vectorW__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__vectorW'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::vector()\n"
    "    std::vector< GWFrames::Waveform >::vector(std::vector< GWFrames::Waveform > const &)\n"
    "    std::vector< GWFrames::Waveform >::vector(std::vector< GWFrames::Waveform >::size_type)\n"
    "    std::vector< GWFrames::Waveform >::vector(std::vector< GWFrames::Waveform >::size_type,std::vector< GWFrames::Waveform >::value_type const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap__vectorW_push_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_push_back",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_push_back" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_vectorW_push_back" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_push_back" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp2);
  {
    try {
      (arg1)->push_back((std::vector< GWFrames::Waveform >::value_type const &)*arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_front(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_front" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (std::vector< GWFrames::Waveform >::value_type *) &((std::vector< GWFrames::Waveform > const *)arg1)->front();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_back(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::value_type *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_back" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = (std::vector< GWFrames::Waveform >::value_type *) &((std::vector< GWFrames::Waveform > const *)arg1)->back();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__Waveform, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_assign(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::size_type arg2 ;
  std::vector< GWFrames::Waveform >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW_assign",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_assign" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW_assign" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorW_assign" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_assign" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp3);
  {
    try {
      (arg1)->assign(arg2,(std::vector< GWFrames::Waveform >::value_type const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_resize__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::size_type arg2 ;
  std::vector< GWFrames::Waveform >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW_resize",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_resize" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW_resize" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorW_resize" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_resize" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp3);
  {
    try {
      (arg1)->resize(arg2,(std::vector< GWFrames::Waveform >::value_type const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__vectorW_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorW_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::resize(std::vector< GWFrames::Waveform >::size_type)\n"
    "    std::vector< GWFrames::Waveform >::resize(std::vector< GWFrames::Waveform >::size_type,std::vector< GWFrames::Waveform >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorW_insert__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::iterator arg2 ;
  std::vector< GWFrames::Waveform >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< GWFrames::Waveform >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:_vectorW_insert",&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_insert" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "_vectorW_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp3);
  {
    try {
      result = std_vector_Sl_GWFrames_Waveform_Sg__insert__SWIG_0(arg1,arg2,(GWFrames::Waveform const &)*arg3);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< GWFrames::Waveform >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_insert__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::iterator arg2 ;
  std::vector< GWFrames::Waveform >::size_type arg3 ;
  std::vector< GWFrames::Waveform >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:_vectorW_insert",&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_insert" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "_vectorW_insert" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "_vectorW_insert" "', argument " "3"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg3 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_GWFrames__Waveform,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "_vectorW_insert" "', argument " "4"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "_vectorW_insert" "', argument " "4"" of type '" "std::vector< GWFrames::Waveform >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< GWFrames::Waveform >::value_type * >(argp4);
  {
    try {
      std_vector_Sl_GWFrames_Waveform_Sg__insert__SWIG_1(arg1,arg2,arg3,(GWFrames::Waveform const &)*arg4);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap__vectorW_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<GWFrames::Waveform,std::allocator< GWFrames::Waveform > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< GWFrames::Waveform >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_GWFrames__Waveform, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap__vectorW_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_vectorW_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< GWFrames::Waveform >::insert(std::vector< GWFrames::Waveform >::iterator,std::vector< GWFrames::Waveform >::value_type const &)\n"
    "    std::vector< GWFrames::Waveform >::insert(std::vector< GWFrames::Waveform >::iterator,std::vector< GWFrames::Waveform >::size_type,std::vector< GWFrames::Waveform >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__vectorW_reserve(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  std::vector< GWFrames::Waveform >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_vectorW_reserve",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_reserve" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_vectorW_reserve" "', argument " "2"" of type '" "std::vector< GWFrames::Waveform >::size_type""'");
  } 
  arg2 = static_cast< std::vector< GWFrames::Waveform >::size_type >(val2);
  {
    try {
      (arg1)->reserve(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__vectorW_capacity(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< GWFrames::Waveform >::size_type result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_vectorW_capacity" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      result = ((std::vector< GWFrames::Waveform > const *)arg1)->capacity();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete__vectorW(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< GWFrames::Waveform > *arg1 = (std::vector< GWFrames::Waveform > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__vectorW" "', argument " "1"" of type '" "std::vector< GWFrames::Waveform > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< GWFrames::Waveform > * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  GWFrames::PNWaveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new__PNWaveform",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_GWFrames__PNWaveform,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__PNWaveform" "', argument " "1"" of type '" "GWFrames::PNWaveform const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__PNWaveform" "', argument " "1"" of type '" "GWFrames::PNWaveform const &""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform((GWFrames::PNWaveform const &)*arg1);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  Quaternions::Quaternion *arg6 = 0 ;
  double arg7 ;
  double arg8 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  std::vector< double > temp4 ;
  double val5 ;
  int ecode5 = 0 ;
  Quaternions::Quaternion tmp6 ;
  PyObject *item6 ;
  Py_ssize_t i6 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  GWFrames::PNWaveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:new__PNWaveform",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__PNWaveform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_double(obj5, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new__PNWaveform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    if(PySequence_Check(obj6)) {
      for(i6=0; i6<4; ++i6) {
        item6 = PySequence_GetItem(obj6, i6);
        if(!SWIG_IsOK(SWIG_AsVal_double (item6, &tmp6[i6]))) {
          Py_DECREF(item6);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 6");
        }
        Py_DECREF(item6);
      }
      arg6 = &tmp6;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj6, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 6 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp6[0] = (*ptmp2)[0];
      tmp6[1] = (*ptmp2)[1];
      tmp6[2] = (*ptmp2)[2];
      tmp6[3] = (*ptmp2)[3];
      arg6 = &tmp6;
    }
  }
  ecode7 = SWIG_AsVal_double(obj7, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new__PNWaveform" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj8, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "new__PNWaveform" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform((std::string const &)*arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,(Quaternions::Quaternion const &)*arg6,arg7,arg8);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  Quaternions::Quaternion *arg6 = 0 ;
  double arg7 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  std::vector< double > temp4 ;
  double val5 ;
  int ecode5 = 0 ;
  Quaternions::Quaternion tmp6 ;
  PyObject *item6 ;
  Py_ssize_t i6 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  GWFrames::PNWaveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:new__PNWaveform",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__PNWaveform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_double(obj5, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new__PNWaveform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    if(PySequence_Check(obj6)) {
      for(i6=0; i6<4; ++i6) {
        item6 = PySequence_GetItem(obj6, i6);
        if(!SWIG_IsOK(SWIG_AsVal_double (item6, &tmp6[i6]))) {
          Py_DECREF(item6);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 6");
        }
        Py_DECREF(item6);
      }
      arg6 = &tmp6;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj6, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 6 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp6[0] = (*ptmp2)[0];
      tmp6[1] = (*ptmp2)[1];
      tmp6[2] = (*ptmp2)[2];
      tmp6[3] = (*ptmp2)[3];
      arg6 = &tmp6;
    }
  }
  ecode7 = SWIG_AsVal_double(obj7, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "new__PNWaveform" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform((std::string const &)*arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,(Quaternions::Quaternion const &)*arg6,arg7);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_4(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  Quaternions::Quaternion *arg6 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  std::vector< double > temp4 ;
  double val5 ;
  int ecode5 = 0 ;
  Quaternions::Quaternion tmp6 ;
  PyObject *item6 ;
  Py_ssize_t i6 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  GWFrames::PNWaveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:new__PNWaveform",&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__PNWaveform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_double(obj5, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new__PNWaveform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    if(PySequence_Check(obj6)) {
      for(i6=0; i6<4; ++i6) {
        item6 = PySequence_GetItem(obj6, i6);
        if(!SWIG_IsOK(SWIG_AsVal_double (item6, &tmp6[i6]))) {
          Py_DECREF(item6);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 6");
        }
        Py_DECREF(item6);
      }
      arg6 = &tmp6;
    } else {
      void* ptmp;
      int res = SWIG_ConvertPtr(obj6, &ptmp, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "expected argument 6 to be of type \"Quaternion\".");
      }
      Quaternions::Quaternion* ptmp2 = reinterpret_cast< Quaternions::Quaternion * >(ptmp);
      tmp6[0] = (*ptmp2)[0];
      tmp6[1] = (*ptmp2)[1];
      tmp6[2] = (*ptmp2)[2];
      tmp6[3] = (*ptmp2)[3];
      arg6 = &tmp6;
    }
  }
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform((std::string const &)*arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5,(Quaternions::Quaternion const &)*arg6);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform__SWIG_5(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  double arg5 ;
  int res1 = SWIG_OLDOBJ ;
  double val2 ;
  int ecode2 = 0 ;
  std::vector< double > temp3 ;
  std::vector< double > temp4 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  GWFrames::PNWaveform *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:new__PNWaveform",&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new__PNWaveform" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_double(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new__PNWaveform" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if(PyArray_Check(obj3)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj3);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp3.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp3.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp3[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj3)) {
      Py_ssize_t size = PySequence_Size(obj3);
      temp3.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj3, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp3[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 3");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg3 = &temp3;
  }
  {
    if(PyArray_Check(obj4)) {
      PyArrayObject *xa = reinterpret_cast<PyArrayObject*>(obj4);
      if(PyArray_TYPE(xa) != NPY_DOUBLE) {
        SWIG_exception(SWIG_TypeError, "(1) numpy array of 'double' expected."	\
          " Make sure that the numpy array use dtype=double.");
      }
      const std::size_t size = PyArray_DIM(xa, 0);
      temp4.resize(size);
      double* array = static_cast<double*>(PyArray_DATA(xa));
      if(PyArray_ISCONTIGUOUS(xa)) {
        std::copy(array, array + size, temp4.begin());
      } else {
        const npy_intp strides = PyArray_STRIDE(xa, 0)/sizeof(double);
        for (std::size_t i = 0; i < size; i++)
        temp4[i] = array[i*strides];
      }
    } else if(PySequence_Check(obj4)) {
      Py_ssize_t size = PySequence_Size(obj4);
      temp4.resize(size);
      PyObject* item;
      for(Py_ssize_t i=0; i<size; ++i) {
        item = PySequence_GetItem(obj4, i);
        if(!SWIG_IsOK(SWIG_AsVal_double (item, &temp4[i]))) {
          Py_DECREF(item);
          SWIG_exception(SWIG_TypeError, "expected items of sequence to be of type "\
            "\"double\" in argument 4");
        }
        Py_DECREF(item);
      }
    } else {
      SWIG_exception(SWIG_TypeError, "(2) numpy array of 'double' expected. " \
        "Make sure that the numpy array use dtype=double.");
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_double(obj5, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new__PNWaveform" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (GWFrames::PNWaveform *)new GWFrames::PNWaveform((std::string const &)*arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4,arg5);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GWFrames__PNWaveform, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new__PNWaveform(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 8) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new__PNWaveform__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new__PNWaveform__SWIG_1(self, args);
    }
  }
  if (argc == 5) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              double* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_new__PNWaveform__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              double* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                void* argp1 = 0;
                // If this is a SWIG-wrapped Quaternion, accept it
                _v = SWIG_IsOK(SWIG_ConvertPtr(argv[5], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
                if(!_v) {
                  // Accept it if this is a sequence of numbers with length 4
                  if(PySequence_Check(argv[5]) && PySequence_Size(argv[5])==4) {
                    PyObject* item = PySequence_GetItem(argv[5], 0);
                    _v = (PyFloat_Check(item) || PyInt_Check(item));
                  }
                }
              }
              if (_v) {
                return _wrap_new__PNWaveform__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              double* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                void* argp1 = 0;
                // If this is a SWIG-wrapped Quaternion, accept it
                _v = SWIG_IsOK(SWIG_ConvertPtr(argv[5], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
                if(!_v) {
                  // Accept it if this is a sequence of numbers with length 4
                  if(PySequence_Check(argv[5]) && PySequence_Size(argv[5])==4) {
                    PyObject* item = PySequence_GetItem(argv[5], 0);
                    _v = (PyFloat_Check(item) || PyInt_Check(item));
                  }
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_new__PNWaveform__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = false;
          if(PyArray_Check(argv[2])) {
            _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[2]))==1);
          } else if(PyList_Check(argv[2])) {
            if(PyList_Size(argv[2])==0) {
              _v = true;
            } else {
              PyObject* item = PySequence_GetItem(argv[2], 0);
              double* temp=0;
              _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
            }
          }
        }
        if (_v) {
          {
            _v = false;
            if(PyArray_Check(argv[3])) {
              _v = (PyArray_NDIM(reinterpret_cast<const PyArrayObject*>(argv[3]))==1);
            } else if(PyList_Check(argv[3])) {
              if(PyList_Size(argv[3])==0) {
                _v = true;
              } else {
                PyObject* item = PySequence_GetItem(argv[3], 0);
                double* temp=0;
                _v = SWIG_IsOK(SWIG_AsVal_double (item, temp));
              }
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                void* argp1 = 0;
                // If this is a SWIG-wrapped Quaternion, accept it
                _v = SWIG_IsOK(SWIG_ConvertPtr(argv[5], &argp1, SWIGTYPE_p_Quaternions__Quaternion, 0 | 0 ));
                if(!_v) {
                  // Accept it if this is a sequence of numbers with length 4
                  if(PySequence_Check(argv[5]) && PySequence_Size(argv[5])==4) {
                    PyObject* item = PySequence_GetItem(argv[5], 0);
                    _v = (PyFloat_Check(item) || PyInt_Check(item));
                  }
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_new__PNWaveform__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new__PNWaveform'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::PNWaveform()\n"
    "    GWFrames::PNWaveform::PNWaveform(GWFrames::PNWaveform const &)\n"
    "    GWFrames::PNWaveform::PNWaveform(std::string const &,double const,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &,double const,Quaternions::Quaternion const &,double const,double)\n"
    "    GWFrames::PNWaveform::PNWaveform(std::string const &,double const,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &,double const,Quaternions::Quaternion const &,double const)\n"
    "    GWFrames::PNWaveform::PNWaveform(std::string const &,double const,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &,double const,Quaternions::Quaternion const &)\n"
    "    GWFrames::PNWaveform::PNWaveform(std::string const &,double const,std::vector< double,std::allocator< double > > const &,std::vector< double,std::allocator< double > > const &,double const)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete__PNWaveform(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete__PNWaveform" "', argument " "1"" of type '" "GWFrames::PNWaveform *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      delete arg1;;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi1__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chi1",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi1" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chi1" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->chi1(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi2__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chi2",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi2" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chi2" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->chi2(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orb__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_orb",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_orb" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->Omega_orb(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_prec__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_prec",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_prec" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_prec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->Omega_prec(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_tot__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_tot",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_tot" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_tot" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->Omega_tot(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_L__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_L",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_L" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_L" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->L(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi1Mag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chi1Mag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi1Mag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chi1Mag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->chi1Mag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi2Mag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chi2Mag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi2Mag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chi2Mag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->chi2Mag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orbMag__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_orbMag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_orbMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_orbMag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->Omega_orbMag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_precMag__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_precMag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_precMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_precMag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->Omega_precMag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_totMag__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Omega_totMag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_totMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Omega_totMag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->Omega_totMag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LMag__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_LMag",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_LMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_LMag" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->LMag(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat1__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chiHat1",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chiHat1" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chiHat1" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->chiHat1(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat2__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_chiHat2",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chiHat2" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_chiHat2" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->chiHat2(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_orb__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_OmegaHat_orb",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_OmegaHat_orb" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_orb(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_prec__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_OmegaHat_prec",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_prec" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_OmegaHat_prec" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_prec(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_tot__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_OmegaHat_tot",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_tot" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_OmegaHat_tot" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_tot(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LHat__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_LHat",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_LHat" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_LHat" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->LHat(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi1__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi1" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((GWFrames::PNWaveform const *)arg1)->chi1();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi1(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_chi1__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_chi1__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_chi1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::chi1(unsigned int const) const\n"
    "    GWFrames::PNWaveform::chi1() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi2__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chi2" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((GWFrames::PNWaveform const *)arg1)->chi2();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chi2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_chi2__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_chi2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_chi2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::chi2(unsigned int const) const\n"
    "    GWFrames::PNWaveform::chi2() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orb__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((GWFrames::PNWaveform const *)arg1)->Omega_orb();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_orb__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_orb__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_orb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_orb(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_orb() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_prec__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_prec" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((GWFrames::PNWaveform const *)arg1)->Omega_prec();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_prec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_prec__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_prec__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_prec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_prec(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_prec() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_tot__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_tot" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->Omega_tot();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_tot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_tot__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_tot__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_tot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_tot(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_tot() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_L__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_L" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *) &((GWFrames::PNWaveform const *)arg1)->L();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adim1 = result->size();
    npy_intp adim2 = (adim1>0 ? (*result)[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*result)[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_L(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_L__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_L__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_L'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::L(unsigned int const) const\n"
    "    GWFrames::PNWaveform::L() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orbMag__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_orbMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->Omega_orbMag();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_orbMag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_orbMag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_orbMag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_orbMag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_orbMag(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_orbMag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_precMag__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_precMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->Omega_precMag();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_precMag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_precMag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_precMag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_precMag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_precMag(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_precMag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_totMag__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Omega_totMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->Omega_totMag();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Omega_totMag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Omega_totMag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Omega_totMag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Omega_totMag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Omega_totMag(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Omega_totMag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LMag__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< double,std::allocator< double > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_LMag" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->LMag();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adims = (&result)->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy((&result)->begin(), (&result)->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LMag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_LMag__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_LMag__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_LMag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::LMag(unsigned int const) const\n"
    "    GWFrames::PNWaveform::LMag() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat1__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chiHat1" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->chiHat1();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat1(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_chiHat1__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_chiHat1__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_chiHat1'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::chiHat1(unsigned int const) const\n"
    "    GWFrames::PNWaveform::chiHat1() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat2__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_chiHat2" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->chiHat2();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_chiHat2(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_chiHat2__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_chiHat2__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_chiHat2'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::chiHat2(unsigned int const) const\n"
    "    GWFrames::PNWaveform::chiHat2() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_orb__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_orb();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_orb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_OmegaHat_orb__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_OmegaHat_orb__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_OmegaHat_orb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::OmegaHat_orb(unsigned int const) const\n"
    "    GWFrames::PNWaveform::OmegaHat_orb() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_prec__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_prec" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_prec();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_prec(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_OmegaHat_prec__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_OmegaHat_prec__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_OmegaHat_prec'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::OmegaHat_prec(unsigned int const) const\n"
    "    GWFrames::PNWaveform::OmegaHat_prec() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_tot__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_OmegaHat_tot" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->OmegaHat_tot();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_OmegaHat_tot(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_OmegaHat_tot__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_OmegaHat_tot__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_OmegaHat_tot'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::OmegaHat_tot(unsigned int const) const\n"
    "    GWFrames::PNWaveform::OmegaHat_tot() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LHat__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_LHat" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = ((GWFrames::PNWaveform const *)arg1)->LHat();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING1
    npy_intp adim1 = (&result)->size();
    npy_intp adim2 = (adim1>0 ? (*(&result))[0].size() : 0);
    npy_intp adims[2] = {
      adim1, adim2
    };
    resultobj = PyArray_SimpleNew(2, adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    for(npy_intp i=0; i<adim1; ++i) {
      for(npy_intp j=0; j<adim2; ++j) {
        data[i*adim2+j] = (*(&result))[i][j];
      }
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_LHat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_LHat__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_LHat__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_LHat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::LHat(unsigned int const) const\n"
    "    GWFrames::PNWaveform::LHat() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Phi_orb__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:_PNWaveform_Phi_orb",&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Phi_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "_PNWaveform_Phi_orb" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    try {
      result = (double)((GWFrames::PNWaveform const *)arg1)->Phi_orb(arg2);;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Phi_orb__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  GWFrames::PNWaveform *arg1 = (GWFrames::PNWaveform *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_GWFrames__PNWaveform, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_PNWaveform_Phi_orb" "', argument " "1"" of type '" "GWFrames::PNWaveform const *""'"); 
  }
  arg1 = reinterpret_cast< GWFrames::PNWaveform * >(argp1);
  {
    try {
      result = (std::vector< double,std::allocator< double > > *) &((GWFrames::PNWaveform const *)arg1)->Phi_orb();;
    } catch(int i) {
      std::stringstream s;
      if(i>-1 && i<GWFramesNumberOfErrors) {
        s << "GWFrames exception: " << GWFramesErrors[i]; 
      }
      else  {
        s << "GWFrames: Unknown exception number {" << i << "}"; 
      }
      PyErr_SetString(GWFramesExceptions[i], s.str().c_str());
      return NULL;
    }
  }
  {
    // RANDOMSTRING3
    npy_intp adims = result->size();
    resultobj = PyArray_SimpleNew(1, &adims, NPY_DOUBLE);
    double* data = static_cast<double*>(PyArray_DATA(reinterpret_cast<PyArrayObject*>(resultobj)));
    std::copy(result->begin(), result->end(), data);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__PNWaveform_Phi_orb(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap__PNWaveform_Phi_orb__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_GWFrames__PNWaveform, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap__PNWaveform_Phi_orb__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '_PNWaveform_Phi_orb'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GWFrames::PNWaveform::Phi_orb(unsigned int const) const\n"
    "    GWFrames::PNWaveform::Phi_orb() const\n");
  return 0;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"Boost", _wrap_Boost, METH_VARARGS, (char *)"\n"
		"Parameters\n"
		"----------\n"
		"  ThreeVector v\n"
		"  ThreeVector n\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Quaternions::Quaternion\n"
		"\n"
		"\n"
		""},
	 { (char *)"ConformalFactorGrid", _wrap_ConformalFactorGrid, METH_VARARGS, (char *)"\n"
		"Construct a grid with the conformal factor at each point.\n"
		"=========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const ThreeVector& v\n"
		"    const int n_theta\n"
		"    const int n_phi\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    DataGrid\n"
		"  \n"
		"\n"
		""},
	 { (char *)"InverseConformalFactorGrid", _wrap_InverseConformalFactorGrid, METH_VARARGS, (char *)"\n"
		"Construct a grid with the conformal factor at each point.\n"
		"=========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const ThreeVector& v\n"
		"    const int n_theta\n"
		"    const int n_phi\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    DataGrid\n"
		"  \n"
		"\n"
		""},
	 { (char *)"InverseConformalFactorBoostedGrid", _wrap_InverseConformalFactorBoostedGrid, METH_VARARGS, (char *)"\n"
		"Construct a boosted grid with the conformal factor at each point.\n"
		"=================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const ThreeVector& v\n"
		"    const int n_theta\n"
		"    const int n_phi\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    DataGrid\n"
		"  \n"
		"\n"
		""},
	 { (char *)"vFromOneOverK", _wrap_vFromOneOverK, METH_VARARGS, (char *)"\n"
		"Derive three-velocity from the inverse conformal metric.\n"
		"========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Modes& OneOverK\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    ThreeVector\n"
		"  \n"
		"\n"
		""},
	 { (char *)"AlignWaveforms", _wrap_AlignWaveforms, METH_VARARGS, (char *)"\n"
		"Do everything necessary to align two waveform objects.\n"
		"======================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    Waveform& A\n"
		"    Waveform& B\n"
		"    const vector<double>& nHat_A\n"
		"      Approximate nHat vector at (t_1+t_2)/2.\n"
		"    const vector<vector<double>>& nHat_B\n"
		"      Approximate nHat vectors at t_B\n"
		"    const vector<double>& t_B\n"
		"      Times corresponding to values of nHat_B\n"
		"    const double t_1\n"
		"      Beginning of alignment interval\n"
		"    const double t_2\n"
		"      End of alignment interval\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function aligns the frame to the waveform modes for both input\n"
		"    Waveform objects at time t_mid = (t_1+t_2)/2. It also optimizes the\n"
		"    alignment of W_B by adjusting its time and overall orientations to align\n"
		"    with W_A as well as possible. While doing so, it re-adjusts the frame\n"
		"    alignment to the modes for W_B to account for the changing meaning of t_mid.\n"
		"    \n"
		"    The input waveforms are transformed to their co-rotating frames if they are\n"
		"    in the inertial frame. Otherwise, they must already be in the co-rotating\n"
		"    frame. (E.g., the co-orbital frame is an error.)\n"
		"    \n"
		"    The nHat quantities are just approximate directions for that vector in the\n"
		"    two systems, used to set the direction of the x axis for the rotating\n"
		"    frame. For W_A only the value at t_mid is needed; for W_B, the values and\n"
		"    related times are needed, so that the appropriate value can be interpolated\n"
		"    as W_B is shifted in time.\n"
		"    \n"
		"    Note that the alignment algorithm assumes that the waveforms are already\n"
		"    reasonably well aligned in time. In particular, the final value of\n"
		"    t_mid+deltat for W_B must lie somewhere in the interval (t_1, t_2) at\n"
		"    least, and after the time shift, W_B must have data over all of that\n"
		"    interval.\n"
		"  \n"
		"\n"
		""},
	 { NULL, NULL, 0, NULL }
};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SwigPyIterator)
SWIGINTERN PyGetSetDef SwigPyBuiltin__swig__SwigPyIterator_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__swig__SwigPyIterator_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_SwigPyIterator___eq__(self, tuple); break;
    case Py_NE : result = _wrap_SwigPyIterator___ne__(self, tuple); break;
    default : break;
  }
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__swig__SwigPyIterator_methods[] = {
  { "value", (PyCFunction) _wrap_SwigPyIterator_value, METH_VARARGS, (char*) "" },
  { "incr", (PyCFunction) _wrap_SwigPyIterator_incr, METH_VARARGS, (char*) "" },
  { "decr", (PyCFunction) _wrap_SwigPyIterator_decr, METH_VARARGS, (char*) "" },
  { "distance", (PyCFunction) _wrap_SwigPyIterator_distance, METH_VARARGS, (char*) "" },
  { "equal", (PyCFunction) _wrap_SwigPyIterator_equal, METH_VARARGS, (char*) "" },
  { "copy", (PyCFunction) _wrap_SwigPyIterator_copy, METH_VARARGS, (char*) "" },
  { "next", (PyCFunction) _wrap_SwigPyIterator_next, METH_VARARGS, (char*) "" },
  { "__next__", (PyCFunction) _wrap_SwigPyIterator___next__, METH_VARARGS, (char*) "" },
  { "previous", (PyCFunction) _wrap_SwigPyIterator_previous, METH_VARARGS, (char*) "" },
  { "advance", (PyCFunction) _wrap_SwigPyIterator_advance, METH_VARARGS, (char*) "" },
  { "__eq__", (PyCFunction) _wrap_SwigPyIterator___eq__, METH_VARARGS, (char*) "" },
  { "__ne__", (PyCFunction) _wrap_SwigPyIterator___ne__, METH_VARARGS, (char*) "" },
  { "__iadd__", (PyCFunction) _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char*) "" },
  { "__isub__", (PyCFunction) _wrap_SwigPyIterator___isub__, METH_VARARGS, (char*) "" },
  { "__add__", (PyCFunction) _wrap_SwigPyIterator___add__, METH_VARARGS, (char*) "" },
  { "__sub__", (PyCFunction) _wrap_SwigPyIterator___sub__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__swig__SwigPyIterator_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.SwigPyIterator",                /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SwigPyIterator_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__swig__SwigPyIterator_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "swig::SwigPyIterator",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__swig__SwigPyIterator_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) &swig::make_output_iterator_builtin, /* tp_iter */
    (iternextfunc) (iternextfunc) _wrap_SwigPyIterator___next___closure, /* tp_iternext */
    SwigPyBuiltin__swig__SwigPyIterator_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__swig__SwigPyIterator_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) SwigPyBuiltin_BadInit,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___sub___closure, /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___iadd___closure, /* nb_inplace_add */
    (binaryfunc) (binaryfunc) _wrap_SwigPyIterator___isub___closure, /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__swig__SwigPyIterator_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete__vectorM)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_methods[] = {
  { "iterator", (PyCFunction) _wrap__vectorM_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap__vectorM___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap__vectorM___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap__vectorM___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap__vectorM_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap__vectorM___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap__vectorM___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap__vectorM___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap__vectorM___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap__vectorM___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap__vectorM___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap__vectorM_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap__vectorM_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap__vectorM_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap__vectorM_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap__vectorM_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap__vectorM_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap__vectorM_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap__vectorM_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap__vectorM_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap__vectorM_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap__vectorM_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap__vectorM_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap__vectorM_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap__vectorM_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap__vectorM_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap__vectorM_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap__vectorM_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap__vectorM_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap__vectorM_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap__vectorM_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames._vectorM",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete__vectorM_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< GWFrames::Matrix >",        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap__vectorM_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new__vectorM,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap__vectorM___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap__vectorM___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap__vectorM___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap__vectorM___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ScriFunctor)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__ScriFunctor_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__ScriFunctor_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__ScriFunctor_methods[] = {
  { "__call__", (PyCFunction) _wrap_ScriFunctor___call__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const Quaternions::Quaternion& \n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__ScriFunctor_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.ScriFunctor",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_ScriFunctor_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__ScriFunctor_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__ScriFunctor_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__ScriFunctor_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) (ternarycallfunc) _wrap_ScriFunctor___call___closure, /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__ScriFunctor_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::ScriFunctor",                  /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__ScriFunctor_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__ScriFunctor_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__ScriFunctor_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_ScriFunctor,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__ScriFunctor_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__ScriFunctor_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DataGrid)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__DataGrid_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__DataGrid_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__DataGrid_methods[] = {
  { "SetSpin", (PyCFunction) _wrap_DataGrid_SetSpin, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int ess\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  DataGrid&\n"
		"\n"
		"\n"
		"" },
  { "SetNTheta", (PyCFunction) _wrap_DataGrid_SetNTheta, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int N_theta\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  DataGrid&\n"
		"\n"
		"\n"
		"" },
  { "SetNPhi", (PyCFunction) _wrap_DataGrid_SetNPhi, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int N_phi\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  DataGrid&\n"
		"\n"
		"\n"
		"" },
  { "size", (PyCFunction) _wrap_DataGrid_size, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  unsigned int\n"
		"\n"
		"\n"
		"" },
  { "Spin", (PyCFunction) _wrap_DataGrid_Spin, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "N_theta", (PyCFunction) _wrap_DataGrid_N_theta, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "N_phi", (PyCFunction) _wrap_DataGrid_N_phi, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_DataGrid___getitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const complex<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>&\n"
		"\n"
		"\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_DataGrid___setitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const complex<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>&\n"
		"\n"
		"\n"
		"" },
  { "Data", (PyCFunction) _wrap_DataGrid_Data, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<complex<double>>\n"
		"\n"
		"\n"
		"" },
  { "__mul__", (PyCFunction) _wrap_DataGrid___mul__, METH_VARARGS, (char*) "" },
  { "__div__", (PyCFunction) _wrap_DataGrid___div__, METH_VARARGS, (char*) "" },
  { "__add__", (PyCFunction) _wrap_DataGrid___add__, METH_VARARGS, (char*) "" },
  { "__sub__", (PyCFunction) _wrap_DataGrid___sub__, METH_VARARGS, (char*) "" },
  { "pow", (PyCFunction) _wrap_DataGrid_pow, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__DataGrid_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.DataGrid",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_DataGrid_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__DataGrid_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__DataGrid_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__DataGrid_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__DataGrid_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::DataGrid",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__DataGrid_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__DataGrid_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__DataGrid_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_DataGrid,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_DataGrid___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_DataGrid___sub___closure, /* nb_subtract */
    (binaryfunc) (binaryfunc) _wrap_DataGrid___mul___closure, /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__DataGrid_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__DataGrid_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Modes)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__Modes_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__Modes_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__Modes_methods[] = {
  { "SetSpin", (PyCFunction) _wrap_Modes_SetSpin, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int ess\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Modes&\n"
		"\n"
		"\n"
		"" },
  { "SetEllMax", (PyCFunction) _wrap_Modes_SetEllMax, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int ell\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Modes&\n"
		"\n"
		"\n"
		"" },
  { "size", (PyCFunction) _wrap_Modes_size, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  unsigned int\n"
		"\n"
		"\n"
		"" },
  { "Spin", (PyCFunction) _wrap_Modes_Spin, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "EllMax", (PyCFunction) _wrap_Modes_EllMax, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_Modes___getitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>&\n"
		"\n"
		"\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_Modes___setitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>&\n"
		"\n"
		"\n"
		"" },
  { "Data", (PyCFunction) _wrap_Modes_Data, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<complex<double>>\n"
		"\n"
		"\n"
		"" },
  { "pow", (PyCFunction) _wrap_Modes_pow, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int p\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Modes\n"
		"\n"
		"\n"
		"" },
  { "bar", (PyCFunction) _wrap_Modes_bar, METH_VARARGS, (char*) "" },
  { "__mul__", (PyCFunction) _wrap_Modes___mul__, METH_VARARGS, (char*) "" },
  { "__div__", (PyCFunction) _wrap_Modes___div__, METH_VARARGS, (char*) "" },
  { "__add__", (PyCFunction) _wrap_Modes___add__, METH_VARARGS, (char*) "" },
  { "__sub__", (PyCFunction) _wrap_Modes___sub__, METH_VARARGS, (char*) "" },
  { "edth", (PyCFunction) _wrap_Modes_edth, METH_VARARGS, (char*) "" },
  { "edthbar", (PyCFunction) _wrap_Modes_edthbar, METH_VARARGS, (char*) "" },
  { "edth2edthbar2", (PyCFunction) _wrap_Modes_edth2edthbar2, METH_VARARGS, (char*) "" },
  { "EvaluateAtPoint", (PyCFunction) _wrap_Modes_EvaluateAtPoint, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__Modes_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.Modes",                         /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Modes_closure,  /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__Modes_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__Modes_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__Modes_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__Modes_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::Modes",                        /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__Modes_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__Modes_methods,   /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__Modes_getset,    /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Modes,               /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap_Modes___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap_Modes___sub___closure, /* nb_subtract */
    (binaryfunc) (binaryfunc) _wrap_Modes___mul___closure, /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__Modes_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__Modes_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SliceModes)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__SliceModes_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__SliceModes_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__SliceModes_methods[] = {
  { "EllMax", (PyCFunction) _wrap_SliceModes_EllMax, METH_VARARGS, (char*) "" },
  { "Mass", (PyCFunction) _wrap_SliceModes_Mass, METH_VARARGS, (char*) "" },
  { "FourMomentum", (PyCFunction) _wrap_SliceModes_FourMomentum, METH_VARARGS, (char*) "" },
  { "SuperMomentum", (PyCFunction) _wrap_SliceModes_SuperMomentum, METH_VARARGS, (char*) "" },
  { "BMSTransformationOnSlice", (PyCFunction) _wrap_SliceModes_BMSTransformationOnSlice, METH_VARARGS, (char*) "\n"
		"Execute a BMS transformation except for the supertranslation of points.\n"
		"=======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double u\n"
		"    const ThreeVector& v\n"
		"    const Modes& delta\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    SliceGrid\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    A full BMS transformation is only possible using information from multiple\n"
		"    slices due to the supertranslation moving points 'between slices'. This\n"
		"    function simply transforms the data within the slice by accounting for the\n"
		"    change of grid at each point, and the change of grid points themselves. The\n"
		"    returned object is a DataGrid object, each point of which can then be used\n"
		"    to interpolate to the supertranslated time.\n"
		"  \n"
		"\n"
		"" },
  { "MoreschiIteration", (PyCFunction) _wrap_SliceModes_MoreschiIteration, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap_SliceModes___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_SliceModes___setitem__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__SliceModes_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.SliceModes",                    /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SliceModes_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__SliceModes_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__SliceModes_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__SliceModes_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__SliceModes_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::SliceModes",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__SliceModes_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__SliceModes_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__SliceModes_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_SliceModes,          /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__SliceModes_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceModes_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Scri)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__Scri_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__Scri_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__Scri_methods[] = {
  { "BMSTransformation", (PyCFunction) _wrap_Scri_BMSTransformation, METH_VARARGS, (char*) "" },
  { "NTimes", (PyCFunction) _wrap_Scri_NTimes, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "T", (PyCFunction) _wrap_Scri_T, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>\n"
		"\n"
		"\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_Scri___getitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const SliceModes\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  SliceModes&\n"
		"\n"
		"\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_Scri___setitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const SliceModes\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  SliceModes&\n"
		"\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__Scri_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.Scri",                          /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Scri_closure,   /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__Scri_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__Scri_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__Scri_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__Scri_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::Scri",                         /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__Scri_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__Scri_methods,    /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__Scri_getset,     /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Scri,                /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__Scri_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__Scri_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SuperMomenta)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__SuperMomenta_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__SuperMomenta_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__SuperMomenta_methods[] = {
  { "NTimes", (PyCFunction) _wrap_SuperMomenta_NTimes, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "T", (PyCFunction) _wrap_SuperMomenta_T, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>\n"
		"\n"
		"\n"
		"" },
  { "BMSTransform", (PyCFunction) _wrap_SuperMomenta_BMSTransform, METH_VARARGS, (char*) "\n"
		"Return value of Psi on u'=const slice centered at delta[0].\n"
		"===========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Modes& OneOverK\n"
		"    const Modes& delta\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Modes\n"
		"  \n"
		"\n"
		"" },
  { "MoreschiIteration", (PyCFunction) _wrap_SuperMomenta_MoreschiIteration, METH_VARARGS, (char*) "\n"
		"Transform to given slice with given BMS transformation, and return next step in Moreschi algorithm.\n"
		"===================================================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    Modes& OneOverK\n"
		"      Inverse conformal factor (input/output)\n"
		"    Modes& delta\n"
		"      Supertranslation (input/output)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function first transforms Psi to a u'=constant slice centered at the\n"
		"    value delta[0] with the given BMS transformation. It then replaces the\n"
		"    values of that BMS transformation with the next step in the Moreschi\n"
		"    algorithm.\n"
		"  \n"
		"\n"
		"" },
  { "__getitem__", (PyCFunction) _wrap_SuperMomenta___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap_SuperMomenta___setitem__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__SuperMomenta_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.SuperMomenta",                  /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SuperMomenta_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__SuperMomenta_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__SuperMomenta_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__SuperMomenta_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__SuperMomenta_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::SuperMomenta",                 /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__SuperMomenta_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__SuperMomenta_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__SuperMomenta_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_SuperMomenta,        /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__SuperMomenta_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__SuperMomenta_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SliceOfScriGrid)
static SwigPyGetSet SliceOfScriGrid_psi2_getset = { _wrap_SliceOfScriGrid_psi2_get, _wrap_SliceOfScriGrid_psi2_set };
static SwigPyGetSet SliceOfScriGrid_psi3_getset = { _wrap_SliceOfScriGrid_psi3_get, _wrap_SliceOfScriGrid_psi3_set };
static SwigPyGetSet SliceOfScriGrid_psi4_getset = { _wrap_SliceOfScriGrid_psi4_get, _wrap_SliceOfScriGrid_psi4_set };
static SwigPyGetSet SliceOfScriGrid_sigma_getset = { _wrap_SliceOfScriGrid_sigma_get, _wrap_SliceOfScriGrid_sigma_set };
static SwigPyGetSet SliceOfScriGrid_psi0_getset = { _wrap_SliceOfScriGrid_psi0_get, _wrap_SliceOfScriGrid_psi0_set };
static SwigPyGetSet SliceOfScriGrid_sigmadot_getset = { _wrap_SliceOfScriGrid_sigmadot_get, _wrap_SliceOfScriGrid_sigmadot_set };
static SwigPyGetSet SliceOfScriGrid_psi1_getset = { _wrap_SliceOfScriGrid_psi1_get, _wrap_SliceOfScriGrid_psi1_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_getset[] = {
    { (char*) "psi2", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.psi2", (void*) &SliceOfScriGrid_psi2_getset }
,
    { (char*) "psi3", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.psi3", (void*) &SliceOfScriGrid_psi3_getset }
,
    { (char*) "psi4", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.psi4", (void*) &SliceOfScriGrid_psi4_getset }
,
    { (char*) "sigma", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.sigma", (void*) &SliceOfScriGrid_sigma_getset }
,
    { (char*) "psi0", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.psi0", (void*) &SliceOfScriGrid_psi0_getset }
,
    { (char*) "sigmadot", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.sigmadot", (void*) &SliceOfScriGrid_sigmadot_getset }
,
    { (char*) "psi1", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::DataGrid)>.psi1", (void*) &SliceOfScriGrid_psi1_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.SliceOfScriGrid",               /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SliceOfScriGrid_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::SliceOfScri< GWFrames::DataGrid >", /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_SliceOfScriGrid,     /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_SliceOfScriModes)
static SwigPyGetSet SliceOfScriModes_psi2_getset = { _wrap_SliceOfScriModes_psi2_get, _wrap_SliceOfScriModes_psi2_set };
static SwigPyGetSet SliceOfScriModes_psi3_getset = { _wrap_SliceOfScriModes_psi3_get, _wrap_SliceOfScriModes_psi3_set };
static SwigPyGetSet SliceOfScriModes_psi4_getset = { _wrap_SliceOfScriModes_psi4_get, _wrap_SliceOfScriModes_psi4_set };
static SwigPyGetSet SliceOfScriModes_sigma_getset = { _wrap_SliceOfScriModes_sigma_get, _wrap_SliceOfScriModes_sigma_set };
static SwigPyGetSet SliceOfScriModes_psi0_getset = { _wrap_SliceOfScriModes_psi0_get, _wrap_SliceOfScriModes_psi0_set };
static SwigPyGetSet SliceOfScriModes_sigmadot_getset = { _wrap_SliceOfScriModes_sigmadot_get, _wrap_SliceOfScriModes_sigmadot_set };
static SwigPyGetSet SliceOfScriModes_psi1_getset = { _wrap_SliceOfScriModes_psi1_get, _wrap_SliceOfScriModes_psi1_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_getset[] = {
    { (char*) "psi2", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.psi2", (void*) &SliceOfScriModes_psi2_getset }
,
    { (char*) "psi3", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.psi3", (void*) &SliceOfScriModes_psi3_getset }
,
    { (char*) "psi4", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.psi4", (void*) &SliceOfScriModes_psi4_getset }
,
    { (char*) "sigma", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.sigma", (void*) &SliceOfScriModes_sigma_getset }
,
    { (char*) "psi0", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.psi0", (void*) &SliceOfScriModes_psi0_getset }
,
    { (char*) "sigmadot", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.sigmadot", (void*) &SliceOfScriModes_sigmadot_getset }
,
    { (char*) "psi1", (getter) SwigPyBuiltin_GetterClosure, (setter) SwigPyBuiltin_SetterClosure, (char*)"GWFrames::SliceOfScri<(GWFrames::Modes)>.psi1", (void*) &SliceOfScriModes_psi1_getset }
,
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.SliceOfScriModes",              /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_SliceOfScriModes_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::SliceOfScri< GWFrames::Modes >", /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_SliceOfScriModes,    /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete__Waveform)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__Waveform_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__Waveform_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__Waveform_methods[] = {
  { "CopyWithoutData", (PyCFunction) _wrap__Waveform_CopyWithoutData, METH_VARARGS, (char*) "\n"
		"Copy the Waveform, except for the data (t, frame, lm, data)\n"
		"===========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimeIndices", (PyCFunction) _wrap__Waveform_SliceOfTimeIndices, METH_VARARGS, (char*) "\n"
		"Copy the Waveform between indices i_t_a and i_t_b.\n"
		"==================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int i_t_a\n"
		"    unsigned int t_b = 0\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    i_t_a and i_t_b should hold the indices pointing to the first time in t\n"
		"    after t_a, and the first time in t after t_b (or one-past-the-end of t if\n"
		"    necessary)\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimeIndicesWithEll2", (PyCFunction) _wrap__Waveform_SliceOfTimeIndicesWithEll2, METH_VARARGS, (char*) "\n"
		"Copy of the Waveform between indices i_t_a and i_t_b, only ell=2 modes.\n"
		"=======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int i_t_a\n"
		"    unsigned int i_t_b = 0\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    i_t_a and i_t_b should hold the indices pointing to the first time in t\n"
		"    after t_a, and the first time in t after t_b (or one-past-the-end of t if\n"
		"    necessary)\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimeIndicesWithoutModes", (PyCFunction) _wrap__Waveform_SliceOfTimeIndicesWithoutModes, METH_VARARGS, (char*) "\n"
		"Copy of the Waveform between indices i_t_a and i_t_b without mode data.\n"
		"=======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int i_t_a\n"
		"    unsigned int i_t_b = 0\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    i_t_a and i_t_b should hold the indices pointing to the first time in t\n"
		"    after t_a, and the first time in t after t_b (or one-past-the-end of t if\n"
		"    necessary)\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimes", (PyCFunction) _wrap__Waveform_SliceOfTimes, METH_VARARGS, (char*) "\n"
		"Copy the Waveform between t_a and t_b.\n"
		"======================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double t_a = -1e300\n"
		"    const double t_b = 1e300\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimesWithEll2", (PyCFunction) _wrap__Waveform_SliceOfTimesWithEll2, METH_VARARGS, (char*) "\n"
		"Copy of the Waveform between t_a and t_b, only ell=2 modes.\n"
		"===========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double t_a = -1e300\n"
		"    const double t_b = 1e300\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "SliceOfTimesWithoutModes", (PyCFunction) _wrap__Waveform_SliceOfTimesWithoutModes, METH_VARARGS, (char*) "\n"
		"Copy of the Waveform between t_a and t_b without mode data.\n"
		"===========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double t_a = -1e300\n"
		"    const double t_b = 1e300\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "DropTimesOutside", (PyCFunction) _wrap__Waveform_DropTimesOutside, METH_VARARGS, (char*) "\n"
		"Remove all data relating to times outside of the given range.\n"
		"=============================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double ta\n"
		"    const double tb\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "DropEllModes", (PyCFunction) _wrap__Waveform_DropEllModes, METH_VARARGS, (char*) "\n"
		"Remove data relating to the given ell modes.\n"
		"============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<unsigned int>& EllModesToDrop\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "KeepOnlyEllModes", (PyCFunction) _wrap__Waveform_KeepOnlyEllModes, METH_VARARGS, (char*) "\n"
		"Remove data relating to all but the given ell modes.\n"
		"====================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<unsigned int>& EllModesToKeep\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "KeepOnlyEll2", (PyCFunction) _wrap__Waveform_KeepOnlyEll2, METH_VARARGS, (char*) "\n"
		"Remove data relating to all but the ell=2 modes.\n"
		"================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "SetSpinWeight", (PyCFunction) _wrap__Waveform_SetSpinWeight, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int NewSpinWeight\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetBoostWeight", (PyCFunction) _wrap__Waveform_SetBoostWeight, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int NewBoostWeight\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "AppendHistory", (PyCFunction) _wrap__Waveform_AppendHistory, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const string& Hist\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetHistory", (PyCFunction) _wrap__Waveform_SetHistory, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const string& Hist\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetT", (PyCFunction) _wrap__Waveform_SetT, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const vector<double>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetTime", (PyCFunction) _wrap__Waveform_SetTime, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const vector<double>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetFrame", (PyCFunction) _wrap__Waveform_SetFrame, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const vector<Quaternions::Quaternion>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetFrameType", (PyCFunction) _wrap__Waveform_SetFrameType, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const WaveformFrameType Type\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetDataType", (PyCFunction) _wrap__Waveform_SetDataType, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const WaveformDataType Type\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetRIsScaledOut", (PyCFunction) _wrap__Waveform_SetRIsScaledOut, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const bool Scaled\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetMIsScaledOut", (PyCFunction) _wrap__Waveform_SetMIsScaledOut, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const bool Scaled\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetLM", (PyCFunction) _wrap__Waveform_SetLM, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const vector<vector<int>>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "SetData", (PyCFunction) _wrap__Waveform_SetData, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const vector<vector<complex<double>>>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int i_Mode\n"
		"  const unsigned int i_Time\n"
		"  const complex<double>& a\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "ResizeData", (PyCFunction) _wrap__Waveform_ResizeData, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int NModes\n"
		"  const unsigned int NTimes\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "swap", (PyCFunction) _wrap__Waveform_swap, METH_VARARGS, (char*) "\n"
		"Efficiently swap data between two Waveform objects.\n"
		"===================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    Waveform& b\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function uses the std::vector method 'swap' which simply swaps\n"
		"    pointers to data, for efficiency.\n"
		"  \n"
		"\n"
		"" },
  { "NTimes", (PyCFunction) _wrap__Waveform_NTimes, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  unsigned int\n"
		"\n"
		"\n"
		"" },
  { "NModes", (PyCFunction) _wrap__Waveform_NModes, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  unsigned int\n"
		"\n"
		"\n"
		"" },
  { "SpinWeight", (PyCFunction) _wrap__Waveform_SpinWeight, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "BoostWeight", (PyCFunction) _wrap__Waveform_BoostWeight, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "HistoryStr", (PyCFunction) _wrap__Waveform_HistoryStr, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  string\n"
		"\n"
		"\n"
		"" },
  { "HistoryStream", (PyCFunction) _wrap__Waveform_HistoryStream, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  stringstream&\n"
		"\n"
		"\n"
		"" },
  { "FrameType", (PyCFunction) _wrap__Waveform_FrameType, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "DataType", (PyCFunction) _wrap__Waveform_DataType, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  int\n"
		"\n"
		"\n"
		"" },
  { "FrameTypeString", (PyCFunction) _wrap__Waveform_FrameTypeString, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  string\n"
		"\n"
		"\n"
		"" },
  { "DataTypeString", (PyCFunction) _wrap__Waveform_DataTypeString, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  string\n"
		"\n"
		"\n"
		"" },
  { "DataTypeLaTeXString", (PyCFunction) _wrap__Waveform_DataTypeLaTeXString, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  string\n"
		"\n"
		"\n"
		"" },
  { "DescriptorString", (PyCFunction) _wrap__Waveform_DescriptorString, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  string\n"
		"\n"
		"\n"
		"" },
  { "RIsScaledOut", (PyCFunction) _wrap__Waveform_RIsScaledOut, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  bool\n"
		"\n"
		"\n"
		"" },
  { "MIsScaledOut", (PyCFunction) _wrap__Waveform_MIsScaledOut, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  bool\n"
		"\n"
		"\n"
		"" },
  { "T", (PyCFunction) _wrap__Waveform_T, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"" },
  { "Frame", (PyCFunction) _wrap__Waveform_Frame, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Quaternions::Quaternion\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<Quaternions::Quaternion>&\n"
		"\n"
		"\n"
		"" },
  { "Re", (PyCFunction) _wrap__Waveform_Re, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"turn vector of real parts of a given mode as function of time.\n"
		"==============================================================\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"turn vector of vector of real parts of all modes as function of time.\n"
		"=====================================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "Im", (PyCFunction) _wrap__Waveform_Im, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"turn vector of imaginary parts of a given mode as function of time.\n"
		"===================================================================\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"turn vector of vector of imaginary parts of all modes as function of time.\n"
		"==========================================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "Abs", (PyCFunction) _wrap__Waveform_Abs, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"turn vector of absolute value of a given mode as function of time.\n"
		"==================================================================\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"turn vector of vector of absolute value of all modes as function of time.\n"
		"=========================================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "Arg", (PyCFunction) _wrap__Waveform_Arg, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"turn vector of arg of a given mode as function of time.\n"
		"=======================================================\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"Description\n"
		"-----------\n"
		"  Note that this quantity is not 'unwrapped'. That is, the arg is between -pi\n"
		"  and +pi. To get a smooth, continuous phase in python, use numpy.unwrap.\n"
		"\n"
		"\n"
		"turn vector of vector of arg of all modes as function of time.\n"
		"==============================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "Data", (PyCFunction) _wrap__Waveform_Data, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>\n"
		"\n"
		"\n"
		"turn vector of complex data of a given mode as function of time.\n"
		"================================================================\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<complex<double>>\n"
		"\n"
		"\n"
		"turn vector of vector of complex data of all modes as function of time.\n"
		"=======================================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<complex<double>>>\n"
		"\n"
		"\n"
		"" },
  { "__call__", (PyCFunction) _wrap__Waveform___call__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"  const unsigned int TimeIndex\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  complex<double>\n"
		"\n"
		"\n"
		"" },
  { "LM", (PyCFunction) _wrap__Waveform_LM, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<int>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<int>>&\n"
		"\n"
		"\n"
		"" },
  { "ArgUnwrapped", (PyCFunction) _wrap__Waveform_ArgUnwrapped, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int Mode\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"turn vector of vector of arg of all modes as function of time.\n"
		"==============================================================\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "EllMax", (PyCFunction) _wrap__Waveform_EllMax, METH_VARARGS, (char*) "\n"
		"Return greatest ell value present in the data.\n"
		"==============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    int\n"
		"  \n"
		"\n"
		"" },
  { "FindModeIndex", (PyCFunction) _wrap__Waveform_FindModeIndex, METH_VARARGS, (char*) "\n"
		"Find index of mode with given (l,m) data.\n"
		"=========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const int L\n"
		"    const int M\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    unsigned int\n"
		"  \n"
		"\n"
		"" },
  { "FindModeIndexWithoutError", (PyCFunction) _wrap__Waveform_FindModeIndexWithoutError, METH_VARARGS, (char*) "\n"
		"Find index of mode with given (l,m) data without the chance of throwing an exception.\n"
		"=====================================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const int L\n"
		"    const int M\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    unsigned int\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    If the requested mode is not present, the returned index is 1 beyond the\n"
		"    end of the mode vector.\n"
		"  \n"
		"\n"
		"" },
  { "Contrast", (PyCFunction) _wrap__Waveform_Contrast, METH_VARARGS, (char*) "\n"
		"Return the contrast in the given mode pair.\n"
		"===========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const int L\n"
		"      $ell$ value of the mode pair\n"
		"    const int M\n"
		"      $m$ value of the mode pair\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<double>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function just returns the value of the contrast $\\kappa^{\\ell,m}$\n"
		"    defined by Boyle et al. (2014):\n"
		"    \n"
		"    \\begin{equation*} kappa^{\\ell,m} = 2 \\frac{\\lvert h^{\\ell,m} \\rvert -\n"
		"    \\lvert h^{\\ell,-m} \\rvert} {\\lvert h^{\\ell,m} \\rvert - \\lvert\n"
		"    h^{\\ell,-m} \\rvert}. \\end{equation*}\n"
		"    \n"
		"    That is, the difference between mode pairs normalized by their average.\n"
		"  \n"
		"\n"
		"" },
  { "NormalizedAsymmetry", (PyCFunction) _wrap__Waveform_NormalizedAsymmetry, METH_VARARGS, (char*) "" },
  { "DataDot", (PyCFunction) _wrap__Waveform_DataDot, METH_VARARGS, (char*) "\n"
		"Return time derivative of data.\n"
		"===============================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int Mode\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<complex<double>>\n"
		"  \n"
		"\n"
		"" },
  { "Differentiate", (PyCFunction) _wrap__Waveform_Differentiate, METH_VARARGS, (char*) "\n"
		"Differentiate the waveform as a function of time.\n"
		"=================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "Norm", (PyCFunction) _wrap__Waveform_Norm, METH_VARARGS, (char*) "\n"
		"Return the norm (sum of squares of modes) of the waveform.\n"
		"==========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const bool TakeSquareRoot = false\n"
		"      If true, the square root is taken at each instant before returning\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<double>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This returns the norm of the waveform, defined as the sum of the complex\n"
		"    norms of the modes. Note that we are calling this norm in analogy with the\n"
		"    c++ std::complex norm, which is the square of the absolute value. However,\n"
		"    there is also an option to take the square root of the data at each time\n"
		"    step, which would be the usual L2 norm of the waveform.\n"
		"    \n"
		"    MaxNormIndex\n"
		"    \n"
		"    MaxNormTime\n"
		"  \n"
		"\n"
		"" },
  { "MaxNormIndex", (PyCFunction) _wrap__Waveform_MaxNormIndex, METH_VARARGS, (char*) "\n"
		"Return the data index corresponding to the time of the largest norm.\n"
		"====================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int SkipFraction = 4\n"
		"      Integer fraction of data to skip before looking\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    unsigned int\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    The default value of SkipFraction is 4, meaning that we start looking for\n"
		"    the maximum after 1/4th of the data, so as to cut out junk radiation. Note\n"
		"    that this is integer division, so an argument of NTimes()+1 will look\n"
		"    through all of the data.\n"
		"    \n"
		"    Norm()\n"
		"    \n"
		"    MaxNormTime()\n"
		"  \n"
		"\n"
		"" },
  { "MaxNormTime", (PyCFunction) _wrap__Waveform_MaxNormTime, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int SkipFraction = 4\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"" },
  { "RotatePhysicalSystem", (PyCFunction) _wrap__Waveform_RotatePhysicalSystem, METH_VARARGS, (char*) "\n"
		"Rotate the physical content of the Waveform by a constant rotor.\n"
		"================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Quaternions::Quaternion& R_phys\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"Rotate the physical content of the Waveform.\n"
		"============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<Quaternions::Quaternion> R_phys\n"
		"      Vector of Quaternions by which to rotate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This rotates the physical system, leaving the coordinates in place.\n"
		"    \n"
		"    The Waveform's frame data records the rotors needed to rotate the standard\n"
		"    (x,y,z) basis into the (X,Y,Z) basis with respect to which the Waveform\n"
		"    modes are decomposed. If this is not the first rotation of the frame, we\n"
		"    need to be careful about how we record the total rotation. Here, we are\n"
		"    rotating the physical system, while leaving fixed the basis with respect to\n"
		"    which the modes are decomposed. Therefore, the new frame must be the\n"
		"    original frame data times $\\bar{R}_{phys}$.\n"
		"    \n"
		"    Note that this function does not change the frameType; this is left to the\n"
		"    calling function.\n"
		"  \n"
		"\n"
		"" },
  { "RotateDecompositionBasis", (PyCFunction) _wrap__Waveform_RotateDecompositionBasis, METH_VARARGS, (char*) "\n"
		"Rotate the basis in which this Waveform is measured by a constant rotor.\n"
		"========================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Quaternions::Quaternion& R_frame\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"Rotate the basis in which this Waveform is measured.\n"
		"====================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<Quaternions::Quaternion>& R_frame\n"
		"      Vector of Quaternions by which to rotate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This rotates the coordinate basis, leaving the physical system in place.\n"
		"    \n"
		"    The Waveform's frame data records the rotors needed to rotate the standard\n"
		"    (x,y,z) basis into the (X,Y,Z) basis with respect to which the Waveform\n"
		"    modes are decomposed. If this is not the first rotation of the frame, we\n"
		"    need to be careful about how we record the total rotation. Here, we are\n"
		"    just composing rotations, so we need to store R_frame times the original\n"
		"    frame data.\n"
		"    \n"
		"    Note that this function does not change the frameType; this is left to the\n"
		"    calling function.\n"
		"  \n"
		"\n"
		"" },
  { "RotateDecompositionBasisOfUncertainties", (PyCFunction) _wrap__Waveform_RotateDecompositionBasisOfUncertainties, METH_VARARGS, (char*) "\n"
		"Rotate the basis in which this Waveform's uncertainties are measured.\n"
		"=====================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<Quaternions::Quaternion>& R_frame\n"
		"      Vector of Quaternions by which to rotate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This rotates the coordinate basis, leaving the physical system in place.\n"
		"    \n"
		"    The Waveform's frame data records the rotors needed to rotate the standard\n"
		"    (x,y,z) basis into the (X,Y,Z) basis with respect to which the Waveform\n"
		"    modes are decomposed. If this is not the first rotation of the frame, we\n"
		"    need to be careful about how we record the total rotation. Here, we are\n"
		"    just composing rotations, so we need to store R_frame times the original\n"
		"    frame data.\n"
		"    \n"
		"    Note that this function does not change the frameType; this is left to the\n"
		"    calling function.\n"
		"  \n"
		"\n"
		"" },
  { "LdtVector", (PyCFunction) _wrap__Waveform_LdtVector, METH_VARARGS, (char*) "\n"
		"Calculate the $<L \\partial_t>$ quantity defined in the paper.\n"
		"==============================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<int> Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<vector<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"    \n"
		"    $<L \\partial_t>^a = \\sum_{\\ell,m,m'} \\Im [ \\bar{f}^{\\ell,m'}\n"
		"    <\\ell,m' | L_a | \\ell,m> \\dot{f}^{\\ell,m} ]$\n"
		"  \n"
		"\n"
		"" },
  { "LLMatrix", (PyCFunction) _wrap__Waveform_LLMatrix, METH_VARARGS, (char*) "\n"
		"Calculate the $<LL>$ quantity defined in the paper.\n"
		"===================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<int> Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<Matrix>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"    \n"
		"    $<LL>^{ab} = \\sum_{\\ell,m,m'} [\\bar{f}^{\\ell,m'} <\\ell,m' | L_a L_b |\n"
		"    \\ell,m> f^{\\ell,m} ]$\n"
		"  \n"
		"\n"
		"" },
  { "OShaughnessyEtAlVector", (PyCFunction) _wrap__Waveform_OShaughnessyEtAlVector, METH_VARARGS, (char*) "\n"
		"Calculate the principal axis of the LL matrix, as prescribed by O'Shaughnessy et al.\n"
		"====================================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<vector<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "AngularVelocityVector", (PyCFunction) _wrap__Waveform_AngularVelocityVector, METH_VARARGS, (char*) "\n"
		"Calculate the angular velocity of the Waveform.\n"
		"===============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<vector<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This returns the angular velocity of the Waveform, as defined in Sec. II of\n"
		"    'Angular velocity of gravitational radiation and the corotating frame'.\n"
		"    Note that the returned vector is relative to the inertial frame.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "CorotatingFrame", (PyCFunction) _wrap__Waveform_CorotatingFrame, METH_VARARGS, (char*) "\n"
		"Frame in which the rotation is minimal.\n"
		"=======================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<Quaternions::Quaternion>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function combines the steps required to obtain the corotating frame.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "PNEquivalentOrbitalAV", (PyCFunction) _wrap__Waveform_PNEquivalentOrbitalAV, METH_VARARGS, (char*) "\n"
		"Deduce PN-equivalent orbital angular velocity from Waveform.\n"
		"============================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<vector<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply takes the projection of the field's angular-velocity\n"
		"    vector $\\vec{\\omega}$ along the dominant eigenvector $\\hat{V}_f$ of\n"
		"    $<LL>$. This should be equivalent to the orbital angular velocity of the PN\n"
		"    system. Note that the returned vector is relative to the inertial frame.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "PNEquivalentPrecessionalAV", (PyCFunction) _wrap__Waveform_PNEquivalentPrecessionalAV, METH_VARARGS, (char*) "\n"
		"Deduce PN-equivalent precessional angular velocity from Waveform.\n"
		"=================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<vector<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function subtracts the PN-equivalent orbital angular velocity (given\n"
		"    by PNEquivalentOrbitalAV) from the field's angular velocity. This should be\n"
		"    equivalent to the precessional angular velocity of the PN system. Note that\n"
		"    the returned vector is relative to the inertial frame.\n"
		"    \n"
		"    This may be essentially numerical noise if there is no precession, or if\n"
		"    precession has oscillated to zero.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"    \n"
		"    PNEquivalentOrbitalAV\n"
		"  \n"
		"\n"
		"" },
  { "TransformToOShaughnessyEtAlFrame", (PyCFunction) _wrap__Waveform_TransformToOShaughnessyEtAlFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform to O'Shaughnessy et al. frame.\n"
		"=================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function combines the steps required to obtain the Waveform in the\n"
		"    O'Shaughnessy et al. frame.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "TransformToAngularVelocityFrame", (PyCFunction) _wrap__Waveform_TransformToAngularVelocityFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform to frame aligned with angular-velocity vector.\n"
		"=================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function combines the steps required to obtain the Waveform in the\n"
		"    frame aligned with the angular-velocity vector. Note that this frame is not\n"
		"    the corotating frame; this frame has its z axis aligned with the\n"
		"    angular-velocity vector.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "TransformToCorotatingFrame", (PyCFunction) _wrap__Waveform_TransformToCorotatingFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform to corotating frame.\n"
		"=======================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      L modes to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function combines the steps required to obtain the Waveform in the\n"
		"    corotating frame. Note that this leaves an integration constant unset. To\n"
		"    set it, the modes should be rotated so that they are aligned with the frame\n"
		"    using AlignModesToFrame.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "TransformToInertialFrame", (PyCFunction) _wrap__Waveform_TransformToInertialFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform to an inertial frame.\n"
		"========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function uses the stored frame information to transform from whatever\n"
		"    rotating frame the waveform is currently in, to a stationary, inertial\n"
		"    frame. This is the usual frame of scri^+, and is the frame in which GW\n"
		"    observations should be made.\n"
		"  \n"
		"\n"
		"" },
  { "TransformUncertaintiesToCorotatingFrame", (PyCFunction) _wrap__Waveform_TransformUncertaintiesToCorotatingFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform uncertainties to corotating frame.\n"
		"=====================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<Quaternions::Quaternion>& R_frame\n"
		"      Vector of rotors giving corotating frame of the data.\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "TransformUncertaintiesToInertialFrame", (PyCFunction) _wrap__Waveform_TransformUncertaintiesToInertialFrame, METH_VARARGS, (char*) "\n"
		"Transform Waveform to an inertial frame.\n"
		"========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function uses the stored frame information to transform from whatever\n"
		"    rotating frame the waveform is currently in, to a stationary, inertial\n"
		"    frame. This is the usual frame of scri^+, and is the frame in which GW\n"
		"    observations should be made.\n"
		"  \n"
		"\n"
		"" },
  { "Interpolate", (PyCFunction) _wrap__Waveform_Interpolate, METH_VARARGS, (char*) "\n"
		"Interpolate the Waveform to a new set of time instants.\n"
		"=======================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<double>& NewTime\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "InterpolateInPlace", (PyCFunction) _wrap__Waveform_InterpolateInPlace, METH_VARARGS, (char*) "\n"
		"Interpolate the Waveform to a new set of time instants.\n"
		"=======================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<double>& NewTime\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "Segment", (PyCFunction) _wrap__Waveform_Segment, METH_VARARGS, (char*) "\n"
		"Extract a segment of a Waveform.\n"
		"================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const unsigned int i1\n"
		"      Index of initial time\n"
		"    const unsigned int i2\n"
		"      Index just beyond final time\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "GetAlignmentOfTime", (PyCFunction) _wrap__Waveform_GetAlignmentOfTime, METH_VARARGS, (char*) "\n"
		"Find the time offset aligning this waveform to the other at the fiducial time.\n"
		"==============================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in inertial frame to which this Waveform is aligned\n"
		"    const double t_fid\n"
		"    double& deltat\n"
		"      The value to be returned\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply finds the appropriate time offset, rather than\n"
		"    applying it. This is called by AlignTime and probably does not need to be\n"
		"    called directly; see that function's documentation for more details.\n"
		"    \n"
		"    AlignTime\n"
		"  \n"
		"\n"
		"" },
  { "AlignTime", (PyCFunction) _wrap__Waveform_AlignTime, METH_VARARGS, (char*) "\n"
		"Change this Waveform by aligning to the other at the given time.\n"
		"================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in inertial frame to which this Waveform is aligned\n"
		"    const double t_fid\n"
		"      Note that this function operates in place; the Waveform to which it is\n"
		"      applied will change.\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    As noted above, it is implicitly assumed that both Waveforms are in an\n"
		"    inertial frame, so that the magnitude of the angular velocity may be\n"
		"    properly measured. This could be adjusted to account for the angular\n"
		"    velocity of the frame, but hasn't been yet.\n"
		"    \n"
		"    To improve accuracy, the angular velocity of A is interpolated to t_fid.\n"
		"    The time of B is then interpolated to the interpolated angular velocity.\n"
		"    This assumes that B's angular velocity is strictly monotonic for roughly 5\n"
		"    data points to either side.\n"
		"  \n"
		"\n"
		"" },
  { "GetAlignmentsOfDecompositionFrameToModes", (PyCFunction) _wrap__Waveform_GetAlignmentsOfDecompositionFrameToModes, METH_VARARGS, (char*) "\n"
		"Find the appropriate rotations to fix the orientation of the corotating frame.\n"
		"==============================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<Quaternions::Quaternion>& nHat_t_fid\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      Lmodes to use in computing $<LL>$\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<Quaternions::Quaternion>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function finds the appropriate pre-multiplied rotation\n"
		"    $R_{\\varepsilon}$ so that the decomposition frame is aligned to the\n"
		"    waveform. This particular version finds the appropriate $R_{\\varepsilon}$\n"
		"    at each time in the input Waveform. This is useful in cases where we need\n"
		"    to try many such alignments, because the setup for interpolation is very\n"
		"    slow.\n"
		"  \n"
		"\n"
		"" },
  { "GetAlignmentOfDecompositionFrameToModes", (PyCFunction) _wrap__Waveform_GetAlignmentOfDecompositionFrameToModes, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const double t_fid\n"
		"  const Quaternions::Quaternion& nHat_t_fid\n"
		"  Quaternions::Quaternion& R_eps\n"
		"  const vector<int>& Lmodes = vector<int>(0)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  void\n"
		"\n"
		"\n"
		"nd the appropriate rotation to fix the orientation of the corotating frame over a range of time.\n"
		"================================================================================================\n"
		"Parameters\n"
		"----------\n"
		"  const double t1\n"
		"    Beginning of time range over which the alignment should happen\n"
		"  const double t2\n"
		"    End of time range over which the alignment should happen\n"
		"  const Quaternions::Quaternion& nHat_t1\n"
		"    The approximate direction of nHat at t1\n"
		"  Quaternions::Quaternion& R_eps\n"
		"    Returned rotor\n"
		"  const vector<int>& Lmodes = vector<int>(0)\n"
		"    Lmodes to use in computing $<LL>$\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  void\n"
		"\n"
		"Description\n"
		"-----------\n"
		"  This function simply finds the rotation necessary to align the corotating\n"
		"  frame to the waveform at the fiducial time, rather than applying it. This\n"
		"  is called by AlignDecompositionFrameToModes and probably does not need to\n"
		"  be called directly; see that function's documentation for more details.\n"
		"  \n"
		"  AlignDecompositionFrameToModes\n"
		"\n"
		"\n"
		"" },
  { "AlignDecompositionFrameToModes", (PyCFunction) _wrap__Waveform_AlignDecompositionFrameToModes, METH_VARARGS, (char*) "\n"
		"Fix the orientation of the corotating frame.\n"
		"============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double t_fid\n"
		"      Fiducial time at which the alignment should happen\n"
		"    const Quaternions::Quaternion& nHat_t_fid\n"
		"      The approximate direction of nHat at t_fid\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      Lmodes to use in computing $<LL>$\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    The corotating frame is only defined up to some constant rotor R_eps; if\n"
		"    R_corot is corotating, then so is R_corot*R_eps. This function uses that\n"
		"    freedom to ensure that the frame is aligned with the Waveform modes at the\n"
		"    fiducial time. In particular, it ensures that the Z axis of the frame in\n"
		"    which the decomposition is done is along the dominant eigenvector of $<LL>$\n"
		"    (suggested by O'Shaughnessy et al.), and the phase of the (2,2) mode is\n"
		"    zero.\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"Fix the orientation of the corotating frame by optimizing over a range of times.\n"
		"================================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double t1\n"
		"      Beginning of time range over which the alignment should happen\n"
		"    const double t2\n"
		"      End of time range over which the alignment should happen\n"
		"    const Quaternions::Quaternion& nHat_t1\n"
		"      The approximate direction of nHat at t1\n"
		"    const vector<int>& Lmodes = vector<int>(0)\n"
		"      Lmodes to use in computing $<LL>$\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    The corotating frame is only defined up to some constant rotor R_eps; if\n"
		"    R_corot is corotating, then so is R_corot*R_eps. This function uses that\n"
		"    freedom to ensure that the frame is aligned with the Waveform modes as well\n"
		"    as possible across the given time range. In particular, it ensures that the\n"
		"    Z axis of the frame in which the decomposition is done is along the\n"
		"    dominant eigenvector of $<LL>$ (suggested by O'Shaughnessy et al.), and the\n"
		"    phase of the (2,2) mode is zero. These two conditions only give us axes,\n"
		"    but we need vectors to fully specify the frame. So we also impose the\n"
		"    condition that the eigenvector is more parallel to the angular velocity of\n"
		"    the waveform than anti-parallel, and the X axis of the rotated frame is\n"
		"    more parallel to the input nHat_t1 than anti-parallel. These conditions are\n"
		"    imposed as accurately as possible across the range of times (t1, t2).\n"
		"    \n"
		"    If Lmodes is empty (default), all L modes are used. Setting Lmodes to [2]\n"
		"    or [2,3,4], for example, restricts the range of the sum.\n"
		"  \n"
		"\n"
		"" },
  { "GetAlignmentOfFrame", (PyCFunction) _wrap__Waveform_GetAlignmentOfFrame, METH_VARARGS, (char*) "\n"
		"Get the rotor needed to align this waveform's frame to the other's at the given time.\n"
		"=====================================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in corotating frame to which this Waveform is aligned\n"
		"    const double t_fid\n"
		"      Fiducial time at which to equate frames\n"
		"    Quaternions::Quaternion& R_delta\n"
		"      Returned rotor\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply finds the rotation necessary to align this waveform's\n"
		"    frame to the other at the fiducial time, rather than applying it. This is\n"
		"    called by AlignFrame and probably does not need to be called directly; see\n"
		"    that function's documentation for more details.\n"
		"    \n"
		"    AlignFrame\n"
		"  \n"
		"\n"
		"" },
  { "AlignFrame", (PyCFunction) _wrap__Waveform_AlignFrame, METH_VARARGS, (char*) "\n"
		"Change this Waveform by aligning the frame to the other's at the given time.\n"
		"============================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in corotating frame to which this Waveform is aligned\n"
		"    const double t_fid\n"
		"      Fiducial time at which to equate frames\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    Note that this function operates in place; the Waveform to which it is\n"
		"    applied will change. However, the modes are not altered; only the frame\n"
		"    data is.\n"
		"    \n"
		"    As noted above, it is implicitly assumed that both Waveforms are in their\n"
		"    corotating frames, with the modes appropriately aligned to the frames at\n"
		"    t_fid. The assumption is that the frames actually represent something\n"
		"    physically meaningful, so that it is meaningful to insist that they be the\n"
		"    same.\n"
		"    \n"
		"    Then, this function aligns the frames at t_fid by multiplying this->frame\n"
		"    on the left by a constant rotor such that this->frame at t_fid is exactly\n"
		"    A.frame at t_fid. The resulting frame is now corotating with an\n"
		"    angular-velocity vector that has been rotated by that constant rotor,\n"
		"    relative to the inertial basis.\n"
		"    \n"
		"    AlignDecompositionFrameToModes\n"
		"  \n"
		"\n"
		"" },
  { "GetAlignmentOfTimeAndFrame", (PyCFunction) _wrap__Waveform_GetAlignmentOfTimeAndFrame, METH_VARARGS, (char*) "\n"
		"Get time and frame offset for alignment over extended region.\n"
		"=============================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in corotating frame to which this Waveform is aligned\n"
		"    const double t1\n"
		"      Initial time of region over which differences are minimized\n"
		"    const double t2\n"
		"      Final time of region over which differences are minimized\n"
		"    double& deltat\n"
		"      Returned time offset\n"
		"    Quaternions::Quaternion& R_delta\n"
		"      Returned rotation offset\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply finds the time and rotation shifts necessary to align\n"
		"    this waveform to the other at the fiducial time, rather than applying it.\n"
		"    This is called by AlignTimeAndFrame and probably does not need to be called\n"
		"    directly; see that function's documentation for more details.\n"
		"    \n"
		"    In particular, note that this function is basically just a wrapper for the\n"
		"    Quaternions::OptimalAlignment function.\n"
		"    \n"
		"    AlignTimeAndFrame\n"
		"  \n"
		"\n"
		"" },
  { "AlignTimeAndFrame", (PyCFunction) _wrap__Waveform_AlignTimeAndFrame, METH_VARARGS, (char*) "\n"
		"Align time and frame over extended region.\n"
		"==========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& A\n"
		"      Fixed Waveform in corotating frame to which this Waveform is aligned\n"
		"    const double t1\n"
		"      Initial time of region over which differences are minimized\n"
		"    const double t2\n"
		"      Final time of region over which differences are minimized\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    Note that this function operates in place; the Waveform to which it is\n"
		"    applied will change. However, the modes are not altered; only the t and\n"
		"    frame data are.\n"
		"    \n"
		"    The times t1 and t2 are measured relative to the time in Waveform A, and\n"
		"    all are left fixed; only this Waveform is shifted (in time and orientation)\n"
		"    to achieve alignment.\n"
		"    \n"
		"    It is implicitly assumed that both Waveforms are in their corotating\n"
		"    frames, with the modes appropriately aligned to the frames using\n"
		"    AlignDecompositionFrameToModes at some fiducial time at roughly the average\n"
		"    of t1 and t2. The assumption is that the frames then actually represent\n"
		"    something physically meaningful, so that it is meaningful to insist that\n"
		"    they be the same.\n"
		"    \n"
		"    Also, it is assumed that the time data for the two waveforms are fairly\n"
		"    closely aligned. In particular, the minimization algorithm searches over\n"
		"    time offsets of magnitude (t2-t1)/2.0 or less. So, basically, the time data\n"
		"    for this Waveform must be within $\\pm (t2-t1)/2$ of the 'correct' result.\n"
		"    \n"
		"    Then, this function adjust the time and orientation of this Waveform, so\n"
		"    that the difference between the two frames is minimized. That difference is\n"
		"    measured by finding the rotor R_Delta required to rotate one frame into the\n"
		"    other, taking the angle of that rotor, and integrating over the region [t1,\n"
		"    t2].\n"
		"    \n"
		"    Relative to the inertial basis, the physical measurables (angular-velocity\n"
		"    vector and dominant eigenvector of $<LL>$) of this Waveform are rotated.\n"
		"    \n"
		"    AlignDecompositionFrameToModes\n"
		"  \n"
		"\n"
		"" },
  { "Compare", (PyCFunction) _wrap__Waveform_Compare, METH_VARARGS, (char*) "\n"
		"Return a Waveform with differences between the two inputs.\n"
		"==========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& B\n"
		"    const double MinTimeStep = 0.005\n"
		"    const double MinTime = -3.0e300\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply subtracts the data in this Waveform from the data in\n"
		"    Waveform A, and finds the rotation needed to take this frame into frame A.\n"
		"    Note that the waveform data are stored as complex numbers, rather than as\n"
		"    modulus and phase.\n"
		"  \n"
		"\n"
		"" },
  { "Hybridize", (PyCFunction) _wrap__Waveform_Hybridize, METH_VARARGS, (char*) "\n"
		"Hybridize this Waveform with another.\n"
		"=====================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const Waveform& B\n"
		"      Second Waveform to hybridize with\n"
		"    const double t1\n"
		"      Beginning of time over which to transition\n"
		"    const double t2\n"
		"      End of time over which to transition\n"
		"    const double tMinStep = 0.005\n"
		"      Lower limit on time step appearing in the output\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function simply takes two Waveforms and blends them together. In\n"
		"    particular, it does not align the Waveforms; that is assumed to have been\n"
		"    done already.\n"
		"    \n"
		"    The transition function is a $C^\\infty$ function, meaning that the output\n"
		"    data has exactly this Waveform's data before t1, exactly Waveform B's data\n"
		"    after t2, and a smooth blend in between.\n"
		"    \n"
		"    Note that this function does NOT operate in place; a new Waveform object is\n"
		"    constructed and returned.\n"
		"  \n"
		"\n"
		"" },
  { "EvaluateAtPoint", (PyCFunction) _wrap__Waveform_EvaluateAtPoint, METH_VARARGS, (char*) "\n"
		"Evaluate Waveform at a particular sky location.\n"
		"===============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double vartheta\n"
		"      Polar angle of detector\n"
		"    const double varphi\n"
		"      Azimuthal angle of detector\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    vector<complex<double>>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    Note that the input angle parameters are measured relative to the binary's\n"
		"    coordinate system. In particular, this will make no sense if the frame type\n"
		"    is something other than inertial, and will fail if the FrameType is neither\n"
		"    UnknownFrameType nor Inertial.\n"
		"  \n"
		"\n"
		"Evaluate Waveform at a particular sky location and an instant of time.\n"
		"======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double vartheta\n"
		"      Polar angle of detector\n"
		"    const double varphi\n"
		"      Azimuthal angle of detector\n"
		"    const unsigned int i_t\n"
		"      Index of time at which to evaluate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    complex<double>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    Note that the input angle parameters are measured relative to the binary's\n"
		"    coordinate system. In particular, this will make no sense if the frame type\n"
		"    is something other than inertial, and will fail if the FrameType is neither\n"
		"    UnknownFrameType nor Inertial.\n"
		"  \n"
		"\n"
		"" },
  { "InterpolateToPoint", (PyCFunction) _wrap__Waveform_InterpolateToPoint, METH_VARARGS, (char*) "\n"
		"Evaluate Waveform at a particular sky location and an instant of time.\n"
		"======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const double vartheta\n"
		"      Polar angle of detector\n"
		"    const double varphi\n"
		"      Azimuthal angle of detector\n"
		"    const double t_i\n"
		"      New time to interpolate to\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    complex<double>\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    Note that the input angle parameters are measured relative to the binary's\n"
		"    coordinate system. In particular, this will make no sense if the frame type\n"
		"    is something other than inertial, and will fail if the FrameType is neither\n"
		"    UnknownFrameType nor Inertial.\n"
		"  \n"
		"\n"
		"" },
  { "__add__", (PyCFunction) _wrap__Waveform___add__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const Waveform& B\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"" },
  { "__sub__", (PyCFunction) _wrap__Waveform___sub__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const Waveform& B\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"" },
  { "__mul__", (PyCFunction) _wrap__Waveform___mul__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const Waveform& B\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const double b\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"" },
  { "__div__", (PyCFunction) _wrap__Waveform___div__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const Waveform& B\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const double b\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform\n"
		"\n"
		"\n"
		"" },
  { "NPEdth", (PyCFunction) _wrap__Waveform_NPEdth, METH_VARARGS, (char*) "\n"
		"Newman-Penrose edth operator.\n"
		"=============================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator is the one defined by Newman and Penrose (1966) and further\n"
		"    described by Goldberg et al. (1967). It raises the spin weight of any field\n"
		"    on the sphere by 1. Note that this operator does not preserve boost weights\n"
		"    in any nice way  except in special cases. The GHP version does. Note that,\n"
		"    in this implementation, the only difference between the NP and GHP versions\n"
		"    is the factor of $\\sqrt{2}$. The additional GHP term that keeps the boost\n"
		"    weight meaningful is zero in any given frame  though it transforms\n"
		"    nontrivially.\n"
		"    \n"
		"    Note that the boost weight is set to the value of WeightError, which is\n"
		"    just meant to be large enough that it will give improbable values if used.\n"
		"    This is not fool-proof.\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "NPEdthBar", (PyCFunction) _wrap__Waveform_NPEdthBar, METH_VARARGS, (char*) "\n"
		"Newman-Penrose edth operator conjugate.\n"
		"=======================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator is the one defined by Newman and Penrose (1966) and further\n"
		"    described by Goldberg et al. (1967). It lowers the spin weight of any field\n"
		"    on the sphere by 1. Note that this operator does not preserve boost weights\n"
		"    in any nice way  except in special cases. The GHP version does. Note that,\n"
		"    in this implementation, the only difference between the NP and GHP versions\n"
		"    is the factor of $\\sqrt{2}$. The additional GHP term that keeps the boost\n"
		"    weight meaningful is zero in any given frame  though it transforms\n"
		"    nontrivially.\n"
		"    \n"
		"    Note that the boost weight is set to the value of WeightError, which is\n"
		"    just meant to be large enough that it will give improbable values if used.\n"
		"    This is not fool-proof.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "GHPEdth", (PyCFunction) _wrap__Waveform_GHPEdth, METH_VARARGS, (char*) "\n"
		"Geroch-Held-Penrose edth operator.\n"
		"==================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator is the one defined by Geroch et al. (1973). It raises the\n"
		"    spin weight of any field on the sphere by 1, while leaving the boost weight\n"
		"    unchanged.\n"
		"    \n"
		"    This operator is very similar to the basic Newman-Penrose edth operator,\n"
		"    except that it preserves boost weights. Its effect in this implementation\n"
		"    is identical (up to a factor of $\\sqrt{2}$) to the NP edth. There is an\n"
		"    additional term in the definition of the GHP operator, but its value is\n"
		"    zero. (It transforms nontrivially, though.) In this context, we have\n"
		"    NPEdth() = sqrt(2)*GHPEdth().\n"
		"    \n"
		"    The complex shear $\\sigma$ has spin weight +2 and boost weight +1. The\n"
		"    radial coordinate $r$ has boost weight -1, and the derivative with respect\n"
		"    to time $d/du$ has boost weight -1. The asymptotic metric shear $r\\, h$\n"
		"    has spin weight -2 and boost weight -1. In particular, it seems that $r\\,\n"
		"    h = r^2\\, \\bar{\\sigma}$.\n"
		"    \n"
		"    The Newman-Penrose scalars $\\Psi_i$ have spin weight and boost weight\n"
		"    equal to $2-i$. (E.g., $\\Psi_4$ has $s = b = -2$.) However, when these are\n"
		"    multiplied by the appropriate factors of $r$ to find the leading-order\n"
		"    terms, they acquire boost weights. In particular, we need to multiply\n"
		"    $\\Psi_i$ by $r^{5-i}$ to get nonzero values at scri, which adds $i-5$ to\n"
		"    the boost weight, so that the asymptotic NP scalars all have boost weight\n"
		"    -3.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "GHPEdthBar", (PyCFunction) _wrap__Waveform_GHPEdthBar, METH_VARARGS, (char*) "\n"
		"Geroch-Held-Penrose edth operator conjugate.\n"
		"============================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator is the one defined by Geroch et al. (1973). It lowers the\n"
		"    spin weight of any field on the sphere by 1, while leaving the boost weight\n"
		"    unchanged.\n"
		"    \n"
		"    This operator is very similar to the basic Newman-Penrose edth operator,\n"
		"    except that it preserves boost weights. Its effect in this implementation\n"
		"    is identical (up to a factor of $\\sqrt{2}$) to the NP edth. There is an\n"
		"    additional term in the definition of the GHP operator, but its value is\n"
		"    zero. (It transforms nontrivially, though.) In this context, we have\n"
		"    NPEdthBar() = sqrt(2)*GHPEdthBar().\n"
		"    \n"
		"    The complex shear $\\sigma$ has spin weight +2 and boost weight +1. The\n"
		"    radial coordinate $r$ has boost weight -1, and the derivative with respect\n"
		"    to time $d/du$ has boost weight -1. The asymptotic metric shear $r\\, h$\n"
		"    has spin weight -2 and boost weight -1. In particular, it seems that $r\\,\n"
		"    h = r^2\\, \\bar{\\sigma}$.\n"
		"    \n"
		"    The Newman-Penrose scalars $\\Psi_i$ have spin weight and boost weight\n"
		"    equal to $2-i$. (E.g., $\\Psi_4$ has $s = b = -2$.) However, when these are\n"
		"    multiplied by the appropriate factors of $r$ to find the leading-order\n"
		"    terms, they acquire boost weights. In particular, we need to multiply\n"
		"    $\\Psi_i$ by $r^{5-i}$ to get nonzero values at scri, which adds $i-5$ to\n"
		"    the boost weight, so that the asymptotic NP scalars all have boost weight\n"
		"    -3.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "IntegrateNPEdth", (PyCFunction) _wrap__Waveform_IntegrateNPEdth, METH_VARARGS, (char*) "\n"
		"Integrate the Newman-Penrose edth operator.\n"
		"===========================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator inverts the action of the Newman-Penrose edth operator. This\n"
		"    is not a perfect inverse, because the l=s-1 term is set to zero. To be\n"
		"    precise, if Waveform A has spin weight $s$, then\n"
		"    A.NPEdth().IntegrateNPEdth() has the effect of setting the $\\ell=s$ term\n"
		"    in A to zero.\n"
		"    \n"
		"    Note that the N-P edth operator does not preserve boost weights, so the\n"
		"    boost weight is set to the value of WeightError, which is just meant to be\n"
		"    large enough that it will give improbable values if used. This is not\n"
		"    fool-proof. See the GHP edth operator for a weight-preserving version.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "IntegrateNPEdthBar", (PyCFunction) _wrap__Waveform_IntegrateNPEdthBar, METH_VARARGS, (char*) "\n"
		"Integrate the Newman-Penrose edth operator conjugate.\n"
		"=====================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator inverts the action of the conjugated Newman-Penrose edth\n"
		"    operator. This is not a perfect inverse, because the l=s-1 term is set to\n"
		"    zero. To be precise, if Waveform A has spin weight $s$, then\n"
		"    A.NPEdthBar().IntegrateNPEdthBar() has the effect of setting the $\\ell=s$\n"
		"    term in A to zero.\n"
		"    \n"
		"    Note that the N-P edth operator does not preserve boost weights, so the\n"
		"    boost weight is set to the value of WeightError, which is just meant to be\n"
		"    large enough that it will give improbable values if used. This is not\n"
		"    fool-proof. See the GHP edth operator for a weight-preserving version.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "IntegrateGHPEdth", (PyCFunction) _wrap__Waveform_IntegrateGHPEdth, METH_VARARGS, (char*) "\n"
		"Integrate the Geroch-Held-Penrose edth operator.\n"
		"================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator inverts the action of the GHP edth operator. This is not a\n"
		"    perfect inverse, because the l=s-1 term is set to zero. To be precise, if\n"
		"    Waveform A has spins weight $s$, then A.GHPEdth().IntegrateGHPEdth() has\n"
		"    the effect of setting the $\\ell=s$ term in A to zero.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdthBar\n"
		"  \n"
		"\n"
		"" },
  { "IntegrateGHPEdthBar", (PyCFunction) _wrap__Waveform_IntegrateGHPEdthBar, METH_VARARGS, (char*) "\n"
		"Integrate the Geroch-Held-Penrose edth operator conjugate.\n"
		"==========================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    (none)\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This operator inverts the action of the GHP edth operator. This is not a\n"
		"    perfect inverse, because the l=s-1 term is set to zero. To be precise, if\n"
		"    Waveform A has spins weight $s$, then A.GHPEdth().IntegrateGHPEdth() has\n"
		"    the effect of setting the $\\ell=s$ term in A to zero.\n"
		"    \n"
		"    NPEdth\n"
		"    \n"
		"    NPEdthBar\n"
		"    \n"
		"    GHPEdth\n"
		"    \n"
		"    GHPEdthBar\n"
		"    \n"
		"    IntegrateNPEdth\n"
		"    \n"
		"    IntegrateNPEdthBar\n"
		"    \n"
		"    IntegrateGHPEdth\n"
		"  \n"
		"\n"
		"" },
  { "ApplySupertranslation", (PyCFunction) _wrap__Waveform_ApplySupertranslation, METH_VARARGS, (char*) "\n"
		"Re-interpolate data to new time slices given by this supertranslation.\n"
		"======================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<complex<double>>& gamma\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function takes the current data decomposed as spherical harmonics on a\n"
		"    given slicing, transforms to physical space, re-interpolates the data at\n"
		"    each point to a new set of time slices, and transforms back to\n"
		"    spherical-harmonic coefficients.\n"
		"    \n"
		"    The supertranslation data input gamma is a vector of complex numbers\n"
		"    representing the (scalar) spherical-harmonic components of the\n"
		"    supertranslation, stored in the order (0,0), (1,-1), (1,0), (1,1), (2,-2),\n"
		"    ... The overall time translation is given by the first component; the\n"
		"    spatial translation is given by the second through fourth componentes;\n"
		"    higher components give the proper supertranslations. In particular, a\n"
		"    proper supertranslation will have its first four coefficients equal to 0.0.\n"
		"    \n"
		"    Note that, for general spin-weighted spherical-harmonic components\n"
		"    ${}_{s}a_{l,m}$, a real function results when ${}_{-s}a_{l,-m} =\n"
		"    {}_{s}a_{l,m}^\\ast$. In particular, the input gamma data are assumed to\n"
		"    satisfy this formula with $s=0$.\n"
		"  \n"
		"\n"
		"" },
  { "BoostPsi4", (PyCFunction) _wrap__Waveform_BoostPsi4, METH_VARARGS, (char*) "\n"
		"Apply a boost to Psi4 data.\n"
		"===========================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<vector<double>>& v\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform&\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    This function does three things. First, it evaluates the Waveform on what\n"
		"    will become an equi-angular grid after transformation by the boost. Second,\n"
		"    at each point of that grid, it takes the appropriate combinations of the\n"
		"    present value of Psi_4 and its conjugate to give the value of Psi_4 as\n"
		"    observed in the boosted frame. Finally, it transforms back to Fourier space\n"
		"    using that new equi-angular grid.\n"
		"    \n"
		"    The input three-velocities are assumed to give the velocities of the\n"
		"    boosted frame relative to the present frame.\n"
		"  \n"
		"\n"
		"" },
  { "Translate", (PyCFunction) _wrap__Waveform_Translate, METH_VARARGS, (char*) "\n"
		"Translate the waveform data by some series of spatial translations.\n"
		"===================================================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const vector<vector<double>>& x\n"
		"      Array of 3-vectors by which to translate\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveform\n"
		"  \n"
		"\n"
		"" },
  { "Output", (PyCFunction) _wrap__Waveform_Output, METH_VARARGS, (char*) "\n"
		"Output Waveform object to data file.\n"
		"====================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    const string& FileName\n"
		"    const unsigned int precision = 14\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    const Waveform&\n"
		"  \n"
		"\n"
		"" },
  { "__str__", (PyCFunction) _wrap__Waveform___str__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__Waveform_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames._Waveform",                     /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete__Waveform_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__Waveform_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__Waveform_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__Waveform_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) (ternarycallfunc) _wrap__Waveform___call___closure, /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__Waveform_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::Waveform",                     /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__Waveform_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__Waveform_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__Waveform_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new__Waveform,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) (binaryfunc) _wrap__Waveform___add___closure, /* nb_add */
    (binaryfunc) (binaryfunc) _wrap__Waveform___sub___closure, /* nb_subtract */
    (binaryfunc) (binaryfunc) _wrap__Waveform___mul___closure, /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__Waveform_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__Waveform_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Waveforms)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__Waveforms_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__Waveforms_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__Waveforms_methods[] = {
  { "__getitem__", (PyCFunction) _wrap_Waveforms___getitem__, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const Waveform&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  const int i\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  Waveform&\n"
		"\n"
		"\n"
		"" },
  { "clear", (PyCFunction) _wrap_Waveforms_clear, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  void\n"
		"\n"
		"\n"
		"" },
  { "size", (PyCFunction) _wrap_Waveforms_size, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  unsigned int\n"
		"\n"
		"\n"
		"" },
  { "SetCommonTime", (PyCFunction) _wrap_Waveforms_SetCommonTime, METH_VARARGS, (char*) "\n"
		"Interpolate to a common set of times.\n"
		"=====================================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<vector<double>>& Radii\n"
		"    const double MinTimeStep = 0.005\n"
		"    const double EarliestTime = -3e300\n"
		"    const double LatestTime = 3e300\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    void\n"
		"  \n"
		"\n"
		"" },
  { "Extrapolate", (PyCFunction) _wrap_Waveforms_Extrapolate, METH_VARARGS, (char*) "\n"
		"Main extrapolation routine.\n"
		"===========================\n"
		"  Parameters\n"
		"  ----------\n"
		"    vector<vector<double>>& Radii\n"
		"      Array of radii for each Waveform (first index) and each time (second\n"
		"      index)\n"
		"    const vector<int>& ExtrapolationOrders\n"
		"      List of integers denote extrapolation orders\n"
		"    const vector<double>& Omegas = vector<double>(0)\n"
		"      Optional list of angular frequencies for scaling extrapolation polynomial\n"
		"  \n"
		"  Returns\n"
		"  -------\n"
		"    Waveforms\n"
		"  \n"
		"  Description\n"
		"  -----------\n"
		"    The input FiniteRadiusWaveforms are assumed to be properly scaled and\n"
		"    time-retarded, and interpolated to a uniform set of retarded times. This\n"
		"    function simply steps through the indices, fitting those data to\n"
		"    polynomials in 1/radius, and evaluating at 0 (for infinity).\n"
		"    \n"
		"    The extrapolation orders can be negative. In this case, the scaled,\n"
		"    time-retarded waveform at finite radius is given, where N=-1 is the\n"
		"    outermost Waveform, N=-2 is the second to outermost, etc.\n"
		"    \n"
		"    Note that the fitting uses gsl_multifit_linear_usvd, which is GSL's fitting\n"
		"    function that does NOT use column scaling (specified by the 'u' in front of\n"
		"    'svd' in the function name). The basic GSL fitting function uses column\n"
		"    scaling 'to improve\n"
		"the accuracy of the singular values'. However, for\n"
		"    convergent series, this scaling can make all the coefficients roughly equal\n"
		"    (just as the Omegas option does), which defeats the SVD.\n"
		"  \n"
		"\n"
		"" },
  { "__setitem__", (PyCFunction) _wrap_Waveforms___setitem__, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__Waveforms_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames.Waveforms",                     /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete_Waveforms_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__Waveforms_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__Waveforms_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__Waveforms_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__Waveforms_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::Waveforms",                    /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__Waveforms_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__Waveforms_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__Waveforms_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new_Waveforms,           /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__Waveforms_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__Waveforms_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete__vectorW)
SWIGINTERN PyGetSetDef SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_methods[] = {
  { "iterator", (PyCFunction) _wrap__vectorW_iterator, METH_VARARGS, (char*) "" },
  { "__nonzero__", (PyCFunction) _wrap__vectorW___nonzero__, METH_VARARGS, (char*) "" },
  { "__bool__", (PyCFunction) _wrap__vectorW___bool__, METH_VARARGS, (char*) "" },
  { "__len__", (PyCFunction) _wrap__vectorW___len__, METH_VARARGS, (char*) "" },
  { "pop", (PyCFunction) _wrap__vectorW_pop, METH_VARARGS, (char*) "" },
  { "__getslice__", (PyCFunction) _wrap__vectorW___getslice__, METH_VARARGS, (char*) "" },
  { "__setslice__", (PyCFunction) _wrap__vectorW___setslice__, METH_VARARGS, (char*) "" },
  { "__delslice__", (PyCFunction) _wrap__vectorW___delslice__, METH_VARARGS, (char*) "" },
  { "__delitem__", (PyCFunction) _wrap__vectorW___delitem__, METH_VARARGS, (char*) "" },
  { "__getitem__", (PyCFunction) _wrap__vectorW___getitem__, METH_VARARGS, (char*) "" },
  { "__setitem__", (PyCFunction) _wrap__vectorW___setitem__, METH_VARARGS, (char*) "" },
  { "append", (PyCFunction) _wrap__vectorW_append, METH_VARARGS, (char*) "" },
  { "empty", (PyCFunction) _wrap__vectorW_empty, METH_VARARGS, (char*) "" },
  { "size", (PyCFunction) _wrap__vectorW_size, METH_VARARGS, (char*) "" },
  { "clear", (PyCFunction) _wrap__vectorW_clear, METH_VARARGS, (char*) "" },
  { "swap", (PyCFunction) _wrap__vectorW_swap, METH_VARARGS, (char*) "" },
  { "get_allocator", (PyCFunction) _wrap__vectorW_get_allocator, METH_VARARGS, (char*) "" },
  { "begin", (PyCFunction) _wrap__vectorW_begin, METH_VARARGS, (char*) "" },
  { "end", (PyCFunction) _wrap__vectorW_end, METH_VARARGS, (char*) "" },
  { "rbegin", (PyCFunction) _wrap__vectorW_rbegin, METH_VARARGS, (char*) "" },
  { "rend", (PyCFunction) _wrap__vectorW_rend, METH_VARARGS, (char*) "" },
  { "pop_back", (PyCFunction) _wrap__vectorW_pop_back, METH_VARARGS, (char*) "" },
  { "resize", (PyCFunction) _wrap__vectorW_resize, METH_VARARGS, (char*) "" },
  { "erase", (PyCFunction) _wrap__vectorW_erase, METH_VARARGS, (char*) "" },
  { "push_back", (PyCFunction) _wrap__vectorW_push_back, METH_VARARGS, (char*) "" },
  { "front", (PyCFunction) _wrap__vectorW_front, METH_VARARGS, (char*) "" },
  { "back", (PyCFunction) _wrap__vectorW_back, METH_VARARGS, (char*) "" },
  { "assign", (PyCFunction) _wrap__vectorW_assign, METH_VARARGS, (char*) "" },
  { "insert", (PyCFunction) _wrap__vectorW_insert, METH_VARARGS, (char*) "" },
  { "reserve", (PyCFunction) _wrap__vectorW_reserve, METH_VARARGS, (char*) "" },
  { "capacity", (PyCFunction) _wrap__vectorW_capacity, METH_VARARGS, (char*) "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames._vectorW",                      /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete__vectorW_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "std::vector< GWFrames::Waveform >",      /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) (getiterfunc) _wrap__vectorW_iterator_closure, /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new__vectorW,            /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) (inquiry) _wrap__vectorW___nonzero___closure, /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) (binaryfunc) _wrap__vectorW___getitem___closure, /* mp_subscript */
    (objobjargproc) (objobjargproc) _wrap__vectorW___setitem___closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) (lenfunc) _wrap__vectorW___len___closure, /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type};

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete__PNWaveform)
SWIGINTERN PyGetSetDef SwigPyBuiltin__GWFrames__PNWaveform_getset[] = {
    {NULL, NULL, NULL, NULL, NULL} /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__GWFrames__PNWaveform_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  Py_XINCREF(other);
  if (!result) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      Py_INCREF(result);
    }
  }
  Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__GWFrames__PNWaveform_methods[] = {
  { "chi1", (PyCFunction) _wrap__PNWaveform_chi1, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<double>>&\n"
		"\n"
		"\n"
		"" },
  { "chi2", (PyCFunction) _wrap__PNWaveform_chi2, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<double>>&\n"
		"\n"
		"\n"
		"" },
  { "Omega_orb", (PyCFunction) _wrap__PNWaveform_Omega_orb, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<double>>&\n"
		"\n"
		"\n"
		"" },
  { "Omega_prec", (PyCFunction) _wrap__PNWaveform_Omega_prec, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<double>>&\n"
		"\n"
		"\n"
		"" },
  { "Omega_tot", (PyCFunction) _wrap__PNWaveform_Omega_tot, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "L", (PyCFunction) _wrap__PNWaveform_L, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<vector<double>>&\n"
		"\n"
		"\n"
		"" },
  { "chi1Mag", (PyCFunction) _wrap__PNWaveform_chi1Mag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"" },
  { "chi2Mag", (PyCFunction) _wrap__PNWaveform_chi2Mag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"" },
  { "Omega_orbMag", (PyCFunction) _wrap__PNWaveform_Omega_orbMag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"" },
  { "Omega_precMag", (PyCFunction) _wrap__PNWaveform_Omega_precMag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"" },
  { "Omega_totMag", (PyCFunction) _wrap__PNWaveform_Omega_totMag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"" },
  { "LMag", (PyCFunction) _wrap__PNWaveform_LMag, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"" },
  { "chiHat1", (PyCFunction) _wrap__PNWaveform_chiHat1, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "chiHat2", (PyCFunction) _wrap__PNWaveform_chiHat2, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "OmegaHat_orb", (PyCFunction) _wrap__PNWaveform_OmegaHat_orb, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "OmegaHat_prec", (PyCFunction) _wrap__PNWaveform_OmegaHat_prec, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "OmegaHat_tot", (PyCFunction) _wrap__PNWaveform_OmegaHat_tot, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "LHat", (PyCFunction) _wrap__PNWaveform_LHat, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<double>\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  vector<vector<double>>\n"
		"\n"
		"\n"
		"" },
  { "Phi_orb", (PyCFunction) _wrap__PNWaveform_Phi_orb, METH_VARARGS, (char*) "\n"
		"Parameters\n"
		"----------\n"
		"  const unsigned int iTime\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  double\n"
		"\n"
		"\n"
		"\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"  (none)\n"
		"\n"
		"Returns\n"
		"-------\n"
		"  const vector<double>&\n"
		"\n"
		"\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

static PyHeapTypeObject SwigPyBuiltin__GWFrames__PNWaveform_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                        /* ob_size */
#endif
    "GWFrames._PNWaveform",                   /* tp_name */
    sizeof(SwigPyObject),                     /* tp_basicsize */
    0,                                        /* tp_itemsize */
    (destructor) _wrap_delete__PNWaveform_closure, /* tp_dealloc */
    (printfunc) 0,                            /* tp_print */
    (getattrfunc) 0,                          /* tp_getattr */
    (setattrfunc) 0,                          /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                        /* tp_compare */
#else
    (cmpfunc) 0,                              /* tp_compare */
#endif
    (reprfunc) 0,                             /* tp_repr */
    &SwigPyBuiltin__GWFrames__PNWaveform_type.as_number,      /* tp_as_number */
    &SwigPyBuiltin__GWFrames__PNWaveform_type.as_sequence,    /* tp_as_sequence */
    &SwigPyBuiltin__GWFrames__PNWaveform_type.as_mapping,     /* tp_as_mapping */
    (hashfunc) 0,                             /* tp_hash */
    (ternaryfunc) 0,                          /* tp_call */
    (reprfunc) 0,                             /* tp_str */
    (getattrofunc) 0,                         /* tp_getattro */
    (setattrofunc) 0,                         /* tp_setattro */
    &SwigPyBuiltin__GWFrames__PNWaveform_type.as_buffer,      /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,   /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "GWFrames::PNWaveform",                   /* tp_doc */
    (traverseproc) 0,                         /* tp_traverse */
    (inquiry) 0,                              /* tp_clear */
    (richcmpfunc) SwigPyBuiltin__GWFrames__PNWaveform_richcompare, /* feature:python:tp_richcompare */
    0,                                        /* tp_weaklistoffset */
    (getiterfunc) 0,                          /* tp_iter */
    (iternextfunc) 0,                         /* tp_iternext */
    SwigPyBuiltin__GWFrames__PNWaveform_methods, /* tp_methods */
    0,                                        /* tp_members */
    SwigPyBuiltin__GWFrames__PNWaveform_getset, /* tp_getset */
    0,                                        /* tp_base */
    0,                                        /* tp_dict */
    (descrgetfunc) 0,                         /* tp_descr_get */
    (descrsetfunc) 0,                         /* tp_descr_set */
    (Py_ssize_t)offsetof(SwigPyObject, dict), /* tp_dictoffset */
    (initproc) _wrap_new__PNWaveform,         /* tp_init */
    (allocfunc) 0,                            /* tp_alloc */
    (newfunc) 0,                              /* tp_new */
    (freefunc) 0,                             /* tp_free */
    (inquiry) 0,                              /* tp_is_gc */
    (PyObject*) 0,                            /* tp_bases */
    (PyObject*) 0,                            /* tp_mro */
    (PyObject*) 0,                            /* tp_cache */
    (PyObject*) 0,                            /* tp_subclasses */
    (PyObject*) 0,                            /* tp_weaklist */
    (destructor) 0,                           /* tp_del */
#if PY_VERSION_HEX >= 0x02060000
    (int) 0,                                  /* tp_version_tag */
#endif
  },
  {
    (binaryfunc) 0,                           /* nb_add */
    (binaryfunc) 0,                           /* nb_subtract */
    (binaryfunc) 0,                           /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_divide */
#endif
    (binaryfunc) 0,                           /* nb_remainder */
    (binaryfunc) 0,                           /* nb_divmod */
    (ternaryfunc) 0,                          /* nb_power */
    (unaryfunc) 0,                            /* nb_negative */
    (unaryfunc) 0,                            /* nb_positive */
    (unaryfunc) 0,                            /* nb_absolute */
    (inquiry) 0,                              /* nb_nonzero */
    (unaryfunc) 0,                            /* nb_invert */
    (binaryfunc) 0,                           /* nb_lshift */
    (binaryfunc) 0,                           /* nb_rshift */
    (binaryfunc) 0,                           /* nb_and */
    (binaryfunc) 0,                           /* nb_xor */
    (binaryfunc) 0,                           /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                             /* nb_coerce */
#endif
    (unaryfunc) 0,                            /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* nb_reserved */
#else
    (unaryfunc) 0,                            /* nb_long */
#endif
    (unaryfunc) 0,                            /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                            /* nb_oct */
    (unaryfunc) 0,                            /* nb_hex */
#endif
    (binaryfunc) 0,                           /* nb_inplace_add */
    (binaryfunc) 0,                           /* nb_inplace_subtract */
    (binaryfunc) 0,                           /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                           /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                           /* nb_inplace_remainder */
    (ternaryfunc) 0,                          /* nb_inplace_power */
    (binaryfunc) 0,                           /* nb_inplace_lshift */
    (binaryfunc) 0,                           /* nb_inplace_rshift */
    (binaryfunc) 0,                           /* nb_inplace_and */
    (binaryfunc) 0,                           /* nb_inplace_xor */
    (binaryfunc) 0,                           /* nb_inplace_or */
    (binaryfunc) 0,                           /* nb_floor_divide */
    (binaryfunc) 0,                           /* nb_true_divide */
    (binaryfunc) 0,                           /* nb_inplace_floor_divide */
    (binaryfunc) 0,                           /* nb_inplace_true_divide */
#if PY_VERSION_HEX >= 0x02050000
    (unaryfunc) 0,                            /* nb_index */
#endif
  },
  {
    (lenfunc) 0,                              /* mp_length */
    (binaryfunc) 0,                           /* mp_subscript */
    (objobjargproc) 0,                        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                              /* sq_length */
    (binaryfunc) 0,                           /* sq_concat */
    (ssizeargfunc) 0,                         /* sq_repeat */
    (ssizeargfunc) 0,                         /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                    /* sq_slice */
#endif
    (ssizeobjargproc) 0,                      /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void*) 0,                                /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,                 /* sq_ass_slice */
#endif
    (objobjproc) 0,                           /* sq_contains */
    (binaryfunc) 0,                           /* sq_inplace_concat */
    (ssizeargfunc) 0,                         /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                       /* bf_getreadbuffer */
    (writebufferproc) 0,                      /* bf_getwritebuffer */
    (segcountproc) 0,                         /* bf_getsegcount */
    (charbufferproc) 0,                       /* bf_getcharbuffer */
#endif
#if PY_VERSION_HEX >= 0x02060000
    (getbufferproc) 0,                        /* bf_getbuffer */
    (releasebufferproc) 0,                    /* bf_releasebuffer */
#endif
  },
    (PyObject*) 0,                            /* ht_name */
    (PyObject*) 0,                            /* ht_slots */
};

SWIGINTERN SwigPyClientData SwigPyBuiltin__GWFrames__PNWaveform_clientdata = {0, 0, 0, 0, 0, 0, (PyTypeObject *)&SwigPyBuiltin__GWFrames__PNWaveform_type};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GWFrames__PNWaveformTo_p_GWFrames__Waveform(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((GWFrames::Waveform *)  ((GWFrames::PNWaveform *) x));
}
static swig_type_info _swigt__p_GWFrames__DataGrid = {"_p_GWFrames__DataGrid", "GWFrames::DataGrid *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__DataGrid_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__Matrix = {"_p_GWFrames__Matrix", "std::vector< GWFrames::Matrix >::value_type *|GWFrames::Matrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GWFrames__Modes = {"_p_GWFrames__Modes", "GWFrames::Modes *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__Modes_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__PNWaveform = {"_p_GWFrames__PNWaveform", "GWFrames::PNWaveform *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__PNWaveform_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__Scri = {"_p_GWFrames__Scri", "GWFrames::Scri *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__Scri_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__ScriFunctor = {"_p_GWFrames__ScriFunctor", "GWFrames::ScriFunctor *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__ScriFunctor_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__SliceModes = {"_p_GWFrames__SliceModes", "GWFrames::SliceModes *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__SliceModes_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t = {"_p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t", "GWFrames::SliceGrid *|GWFrames::SliceOfScri< GWFrames::DataGrid > *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__SliceOfScriT_GWFrames__Modes_t = {"_p_GWFrames__SliceOfScriT_GWFrames__Modes_t", "GWFrames::SliceOfScri< GWFrames::Modes > *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__SuperMomenta = {"_p_GWFrames__SuperMomenta", "GWFrames::SuperMomenta *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__SuperMomenta_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__Waveform = {"_p_GWFrames__Waveform", "std::vector< GWFrames::Waveform >::value_type *|GWFrames::Waveform *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__Waveform_clientdata, 0};
static swig_type_info _swigt__p_GWFrames__Waveforms = {"_p_GWFrames__Waveforms", "GWFrames::Waveforms *", 0, 0, (void*)&SwigPyBuiltin__GWFrames__Waveforms_clientdata, 0};
static swig_type_info _swigt__p_Quaternions__Quaternion = {"_p_Quaternions__Quaternion", "Quaternions::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_GWFrames__Matrix_t = {"_p_std__allocatorT_GWFrames__Matrix_t", "std::vector< GWFrames::Matrix >::allocator_type *|std::allocator< GWFrames::Matrix > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_GWFrames__Waveform_t = {"_p_std__allocatorT_GWFrames__Waveform_t", "std::allocator< GWFrames::Waveform > *|std::vector< GWFrames::Waveform >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "std_complex_double *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "std::stringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t = {"_p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t", "std::vector< GWFrames::DataGrid,std::allocator< GWFrames::DataGrid > > *|GWFrames::SliceOfScriGrids *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t = {"_p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t", "std::vector< GWFrames::Matrix,std::allocator< GWFrames::Matrix > > *|std::vector< GWFrames::Matrix > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t = {"_p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t", "std::vector< GWFrames::Modes,std::allocator< GWFrames::Modes > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t = {"_p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t", "std::vector< GWFrames::Waveform > *|std::vector< GWFrames::Waveform,std::allocator< GWFrames::Waveform > > *", 0, 0, (void*)&SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_clientdata, 0};
static swig_type_info _swigt__p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t = {"_p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t", "std::vector< Quaternions::Quaternion,std::allocator< Quaternions::Quaternion > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|GWFrames::FourVector *|FourVector *|GWFrames::ThreeVector *|ThreeVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_int_std__allocatorT_int_t_t = {"_p_std__vectorT_int_std__allocatorT_int_t_t", "std::vector< int,std::allocator< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t = {"_p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t", "std::vector< std::complex< double >,std::allocator< std::complex< double > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t = {"_p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t", "std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)&SwigPyBuiltin__swig__SwigPyIterator_clientdata, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned_int *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GWFrames__DataGrid,
  &_swigt__p_GWFrames__Matrix,
  &_swigt__p_GWFrames__Modes,
  &_swigt__p_GWFrames__PNWaveform,
  &_swigt__p_GWFrames__Scri,
  &_swigt__p_GWFrames__ScriFunctor,
  &_swigt__p_GWFrames__SliceModes,
  &_swigt__p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t,
  &_swigt__p_GWFrames__SliceOfScriT_GWFrames__Modes_t,
  &_swigt__p_GWFrames__SuperMomenta,
  &_swigt__p_GWFrames__Waveform,
  &_swigt__p_GWFrames__Waveforms,
  &_swigt__p_Quaternions__Quaternion,
  &_swigt__p_SwigPyObject,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_p_PyObject,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_GWFrames__Matrix_t,
  &_swigt__p_std__allocatorT_GWFrames__Waveform_t,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t,
  &_swigt__p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t,
  &_swigt__p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t,
  &_swigt__p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t,
  &_swigt__p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_int_std__allocatorT_int_t_t,
  &_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  &_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_GWFrames__DataGrid[] = {  {&_swigt__p_GWFrames__DataGrid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__Matrix[] = {  {&_swigt__p_GWFrames__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__Modes[] = {  {&_swigt__p_GWFrames__Modes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__PNWaveform[] = {  {&_swigt__p_GWFrames__PNWaveform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__Scri[] = {  {&_swigt__p_GWFrames__Scri, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__ScriFunctor[] = {  {&_swigt__p_GWFrames__ScriFunctor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__SliceModes[] = {  {&_swigt__p_GWFrames__SliceModes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t[] = {  {&_swigt__p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__SliceOfScriT_GWFrames__Modes_t[] = {  {&_swigt__p_GWFrames__SliceOfScriT_GWFrames__Modes_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__SuperMomenta[] = {  {&_swigt__p_GWFrames__SuperMomenta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__Waveform[] = {  {&_swigt__p_GWFrames__Waveform, 0, 0, 0},  {&_swigt__p_GWFrames__PNWaveform, _p_GWFrames__PNWaveformTo_p_GWFrames__Waveform, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GWFrames__Waveforms[] = {  {&_swigt__p_GWFrames__Waveforms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Quaternions__Quaternion[] = {  {&_swigt__p_Quaternions__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_GWFrames__Matrix_t[] = {  {&_swigt__p_std__allocatorT_GWFrames__Matrix_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_GWFrames__Waveform_t[] = {  {&_swigt__p_std__allocatorT_GWFrames__Waveform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t[] = {  {&_swigt__p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t[] = {  {&_swigt__p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t[] = {  {&_swigt__p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t[] = {  {&_swigt__p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t[] = {  {&_swigt__p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_int_std__allocatorT_int_t_t[] = {  {&_swigt__p_std__vectorT_int_std__allocatorT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t[] = {  {&_swigt__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GWFrames__DataGrid,
  _swigc__p_GWFrames__Matrix,
  _swigc__p_GWFrames__Modes,
  _swigc__p_GWFrames__PNWaveform,
  _swigc__p_GWFrames__Scri,
  _swigc__p_GWFrames__ScriFunctor,
  _swigc__p_GWFrames__SliceModes,
  _swigc__p_GWFrames__SliceOfScriT_GWFrames__DataGrid_t,
  _swigc__p_GWFrames__SliceOfScriT_GWFrames__Modes_t,
  _swigc__p_GWFrames__SuperMomenta,
  _swigc__p_GWFrames__Waveform,
  _swigc__p_GWFrames__Waveforms,
  _swigc__p_Quaternions__Quaternion,
  _swigc__p_SwigPyObject,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_p_PyObject,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_GWFrames__Matrix_t,
  _swigc__p_std__allocatorT_GWFrames__Waveform_t,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_GWFrames__DataGrid_std__allocatorT_GWFrames__DataGrid_t_t,
  _swigc__p_std__vectorT_GWFrames__Matrix_std__allocatorT_GWFrames__Matrix_t_t,
  _swigc__p_std__vectorT_GWFrames__Modes_std__allocatorT_GWFrames__Modes_t_t,
  _swigc__p_std__vectorT_GWFrames__Waveform_std__allocatorT_GWFrames__Waveform_t_t,
  _swigc__p_std__vectorT_Quaternions__Quaternion_std__allocatorT_Quaternions__Quaternion_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_int_std__allocatorT_int_t_t,
  _swigc__p_std__vectorT_std__complexT_double_t_std__allocatorT_std__complexT_double_t_t_t,
  _swigc__p_std__vectorT_std__vectorT_double_std__allocatorT_double_t_t_std__allocatorT_std__vectorT_double_std__allocatorT_double_t_t_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
  
  /* type 'swig::SwigPyIterator' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__swig__SwigPyIterator_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SwigPyIterator'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SwigPyIterator", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SwigPyIterator");
  d = md;
  
  /* type 'std::vector< GWFrames::Matrix >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_GWFrames__Matrix_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type '_vectorM'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "_vectorM", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "_vectorM");
  d = md;
  
  /* type 'GWFrames::ScriFunctor' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__ScriFunctor_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ScriFunctor'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "ScriFunctor", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ScriFunctor");
  d = md;
  
  /* type 'GWFrames::DataGrid' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__DataGrid_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DataGrid'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "DataGrid", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DataGrid");
  d = md;
  
  /* type 'GWFrames::Modes' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__Modes_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Modes'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Modes", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Modes");
  d = md;
  
  /* type 'GWFrames::SliceModes' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceModes_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SliceModes'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SliceModes", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SliceModes");
  d = md;
  
  /* type 'GWFrames::Scri' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__Scri_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Scri'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Scri", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Scri");
  d = md;
  
  /* type 'GWFrames::SuperMomenta' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__SuperMomenta_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SuperMomenta'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SuperMomenta", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SuperMomenta");
  d = md;
  
  /* type 'GWFrames::SliceOfScri< GWFrames::DataGrid >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__DataGrid_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SliceOfScriGrid'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SliceOfScriGrid", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SliceOfScriGrid");
  d = md;
  
  /* type 'GWFrames::SliceOfScri< GWFrames::Modes >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__SliceOfScriT_GWFrames__Modes_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'SliceOfScriModes'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "SliceOfScriModes", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "SliceOfScriModes");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "UnknownFrameType",SWIG_From_int(static_cast< int >(GWFrames::UnknownFrameType)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Inertial",SWIG_From_int(static_cast< int >(GWFrames::Inertial)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Coprecessing",SWIG_From_int(static_cast< int >(GWFrames::Coprecessing)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Coorbital",SWIG_From_int(static_cast< int >(GWFrames::Coorbital)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Corotating",SWIG_From_int(static_cast< int >(GWFrames::Corotating)));
  PyDict_SetItemString(md,(char*)"constants", SWIG_globals());
  SwigPyBuiltin_AddPublicSymbol(public_interface, "constants");
  SWIG_addvarlink(SWIG_globals(),(char*)"WaveformFrameNames",Swig_var_WaveformFrameNames_get, Swig_var_WaveformFrameNames_set);
  PyDict_SetItemString(md, (char*)"WaveformFrameNames", PyObject_GetAttrString(SWIG_globals(), "WaveformFrameNames"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "WaveformFrameNames");
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "UnknownDataType",SWIG_From_int(static_cast< int >(GWFrames::UnknownDataType)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "h",SWIG_From_int(static_cast< int >(GWFrames::h)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "hdot",SWIG_From_int(static_cast< int >(GWFrames::hdot)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "Psi4",SWIG_From_int(static_cast< int >(GWFrames::Psi4)));
  SWIG_addvarlink(SWIG_globals(),(char*)"WaveformDataNames",Swig_var_WaveformDataNames_get, Swig_var_WaveformDataNames_set);
  PyDict_SetItemString(md, (char*)"WaveformDataNames", PyObject_GetAttrString(SWIG_globals(), "WaveformDataNames"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "WaveformDataNames");
  SWIG_addvarlink(SWIG_globals(),(char*)"WaveformDataNamesLaTeX",Swig_var_WaveformDataNamesLaTeX_get, Swig_var_WaveformDataNamesLaTeX_set);
  PyDict_SetItemString(md, (char*)"WaveformDataNamesLaTeX", PyObject_GetAttrString(SWIG_globals(), "WaveformDataNamesLaTeX"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "WaveformDataNamesLaTeX");
  SWIG_addvarlink(SWIG_globals(),(char*)"WeightError",Swig_var_WeightError_get, Swig_var_WeightError_set);
  PyDict_SetItemString(md, (char*)"WeightError", PyObject_GetAttrString(SWIG_globals(), "WeightError"));
  SwigPyBuiltin_AddPublicSymbol(public_interface, "WeightError");
  
  /* type 'GWFrames::Waveform' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__Waveform_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type '_Waveform'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "_Waveform", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "_Waveform");
  d = md;
  
  /* type 'GWFrames::Waveforms' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__Waveforms_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Waveforms'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "Waveforms", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Waveforms");
  d = md;
  
  /* type 'std::vector< GWFrames::Waveform >' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__std__vectorT_GWFrames__Waveform_t_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type '_vectorW'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "_vectorW", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "_vectorW");
  d = md;
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "PNWaveforms_ellMax",SWIG_From_int(static_cast< int >(8)));
  
  /* type 'GWFrames::PNWaveform' */
  builtin_pytype = (PyTypeObject *)&SwigPyBuiltin__GWFrames__PNWaveform_type;
  builtin_pytype->tp_dict = d = PyDict_New();
  SwigPyBuiltin_SetMetaType(builtin_pytype, metatype);
  builtin_pytype->tp_new = PyType_GenericNew;
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_GWFrames__Waveform");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData*) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData*) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type '_PNWaveform' as base 'GWFrames::Waveform' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  SwigPyBuiltin_InitBases(builtin_pytype, builtin_bases);
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  if (PyType_Ready(builtin_pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type '_PNWaveform'.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  Py_INCREF(builtin_pytype);
  PyModule_AddObject(m, "_PNWaveform", (PyObject*) builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "_PNWaveform");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

