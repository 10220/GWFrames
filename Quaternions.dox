// -*- c++ -*-

/// \class GWFrames::Quaternion
/// \brief Quaternion class implementing standard algebraic
///        operations and several related functions.
/// 
/// This class implements all of the basic algebraic operations 
/// applicable to Quaternions, as well as several related functions.
/// Functions acting on Quaternions or vectors of Quaternions
/// re-implement the same functions and various functions such as 
/// interpolation.
/// 

/// \fn GWFrames::Quaternion& GWFrames::Quaternion::operator=(const Quaternion& Q)
/// \brief Equality operator (not available from python)

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator-() const
/// \brief Negation operator returns this object with opposite sign.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator+(const double t) const
/// \brief Add a double to scalar component.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator-(const double t) const
/// \brief Subtract a double from scalar component.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator*(const double t) const
/// \brief Multiply each component by double.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator/(const double t) const
/// \brief Divide each component by double.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator+(const GWFrames::Quaternion& Q) const
/// \brief Quaternion addition.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator-(const GWFrames::Quaternion& Q) const
/// \brief Quaternion subtraction.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::operator/(const GWFrames::Quaternion& Q) const
/// \brief Quaternion division.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::pow(const double t) const
/// \brief Raise Quaternion to (double) exponent.

/// \fn inline GWFrames::Quaternion GWFrames::Quaternion::pow(const GWFrames::Quaternion& Q) const
/// \brief Raise Quaternion to (Quaternion) exponent.

/// \fn inline double GWFrames::Quaternion::dot(const GWFrames::Quaternion& Q) const
/// \brief Dot product of two pure-vector Quaternions.
/// 
/// Note: This ignores any scalar components.

/// \fn inline double GWFrames::Quaternion::abs() const
/// \brief Absolute value of Quaternion.

/// \fn inline Quaternion GWFrames::Quaternion::sqrt() const
/// \brief Square-root of general Quaternion.
/// \sa sqrtOfRotor

/// \fn inline double GWFrames::Quaternion::angle() const
/// \brief Magnitude of logarithm of unit Quaternion.
/// 
/// Note: This function simply assumes that the input has unit
///       magnitude.  This function is here for speed, and is designed
///       not to check for unit magnitude.

/// \fn inline Quaternion GWFrames::Quaternion::inverse() const
/// \brief Inverse of Quaternion.

/// \fn inline Quaternion GWFrames::Quaternion::conjugate() const
/// \brief Conjugate of Quaternion (vector components are negated).

/// \fn inline Quaternion GWFrames::Quaternion::normalized() const
/// \brief Return normalized Quaternion.

/// \fn inline double GWFrames::Quaternion::normsquared() const
/// \brief Squared norm of Quaternion.

/// \fn inline Quaternion GWFrames::Quaternion::sqrtOfRotor() const
/// \brief Square-root of unit Quaternion.
/// 
/// Note: This function simply assumes that the input has unit
///       magnitude.  This function is here for speed, and is designed
///       not to check for unit magnitude.

/// \fn inline Quaternion GWFrames::Slerp(const double tau, const Quaternion& Qa, const Quaternion& Qb)
/// \brief Spherical linear interpolation between two quaternions
